import{_ as r}from"./plugin-vue_export-helper-DlAUqK2U.js";import{r as o,o as c,c as p,b as t,d as e,e as n,w as i,a as l}from"./app-BPFsuHku.js";const d={},h=l(`<h1 id="盒-box" tabindex="-1"><a class="header-anchor" href="#盒-box"><span>盒 ( box )</span></a></h1><h2 id="盒模型" tabindex="-1"><a class="header-anchor" href="#盒模型"><span>盒模型</span></a></h2><p>在 css 中，布局的基本单位是盒 ( box )，box 总是矩形的，它包含 4 部分：</p><ul><li>content box</li><li>padding box</li><li>border box</li><li>margin box</li></ul><p>在 css 中可以对盒子的 4 部分内容进行设置：</p><div class="language-css" data-ext="css" data-title="css"><pre class="language-css"><code><span class="token selector">.container</span> <span class="token punctuation">{</span>
  <span class="token property">width</span><span class="token punctuation">:</span> 200px<span class="token punctuation">;</span>
  <span class="token property">height</span><span class="token punctuation">:</span> 100px<span class="token punctuation">;</span>
  <span class="token property">padding</span><span class="token punctuation">:</span> 10px<span class="token punctuation">;</span>
  <span class="token property">border</span><span class="token punctuation">:</span> 1px solid #000<span class="token punctuation">;</span>
  <span class="token property">margin</span><span class="token punctuation">:</span> 10px<span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre></div><p>其盒模型示意图如下：</p><p><img src="https://raw.githubusercontent.com/yamsfeer/pic-bed/master/image-20231117154820156.png" alt="image-20231117154820156"></p><p>值得注意的是，container 的宽高设置的是 content box 部分，这是由 box-sizing 决定的。</p><div class="language-css" data-ext="css" data-title="css"><pre class="language-css"><code><span class="token selector">.container</span> <span class="token punctuation">{</span>
  <span class="token property">box-sizing</span><span class="token punctuation">:</span> content-box<span class="token punctuation">;</span> <span class="token comment">/* 默认值 */</span>
  <span class="token property">box-sizing</span><span class="token punctuation">:</span> border-box<span class="token punctuation">;</span> <span class="token comment">/* 宽高改为设置 border-box */</span>
<span class="token punctuation">}</span>
</code></pre></div><p>元素和盒并不是一一对应的，一个元素可以生成 0 个或多个盒。比如 li 元素就会生成一个 block box 和额外的 marker box。</p><p>block box：</p><img src="https://raw.githubusercontent.com/yamsfeer/pic-bed/master/image-20231117163919955.png" alt="image-20231117163919955" style="zoom:50%;"><p>marker box：</p><img src="https://raw.githubusercontent.com/yamsfeer/pic-bed/master/image-20231117164109661.png" alt="image-20231117164109661" style="zoom:50%;"><p>生成多少个盒子、盒子的类型等都是由元素的 display 属性决定的。</p><h2 id="盒类型" tabindex="-1"><a class="header-anchor" href="#盒类型"><span>盒类型</span></a></h2><p>元素的 display 属性决定了生成什么类型的 box，也决定了元素如何布局。事实上，display 属性同时定义了一个元素的两种 display type：</p><ul><li>outer display type：决定元素自身受何种 formatting context 影响</li><li>inner display type：决定为子元素创建何种 formatting context，从而影响子元素的排列</li></ul><p>display 对应生成的盒子类型如下表：</p>`,20),g=t("thead",null,[t("tr",null,[t("th",{style:{"text-align":"left"}},"display"),t("th",{style:{"text-align":"left"}},"display 全写"),t("th",{style:{"text-align":"left"}},"盒子类型")])],-1),_=t("td",{style:{"text-align":"left"}},"none",-1),b=t("td",{style:{"text-align":"left"}},"—",-1),u={style:{"text-align":"left"}},k={href:"https://www.w3.org/TR/css-display-3/#box-tree",target:"_blank",rel:"noopener noreferrer"},x=t("td",{style:{"text-align":"left"}},"contents",-1),f=t("td",{style:{"text-align":"left"}},"—",-1),y={style:{"text-align":"left"}},w={href:"https://www.w3.org/TR/css-display-3/#box-tree",target:"_blank",rel:"noopener noreferrer"},m=t("td",{style:{"text-align":"left"}},"block",-1),v=t("td",{style:{"text-align":"left"}},"block flow",-1),T={style:{"text-align":"left"}},R={href:"https://www.w3.org/TR/css-display-3/#block-level",target:"_blank",rel:"noopener noreferrer"},C={href:"https://www.w3.org/TR/css-display-3/#block-container",target:"_blank",rel:"noopener noreferrer"},F={href:"https://www.w3.org/TR/css-display-3/#block-box",target:"_blank",rel:"noopener noreferrer"},B=t("td",{style:{"text-align":"left"}},"flow-root",-1),I=t("td",{style:{"text-align":"left"}},"block flow-root",-1),N={style:{"text-align":"left"}},z={href:"https://www.w3.org/TR/css-display-3/#block-level",target:"_blank",rel:"noopener noreferrer"},L={href:"https://www.w3.org/TR/css-display-3/#block-container",target:"_blank",rel:"noopener noreferrer"},q={href:"https://www.w3.org/TR/css-display-3/#block-formatting-context",target:"_blank",rel:"noopener noreferrer"},D={href:"https://www.w3.org/TR/css-display-3/#bfc",target:"_blank",rel:"noopener noreferrer"},E=t("td",{style:{"text-align":"left"}},"inline",-1),G=t("td",{style:{"text-align":"left"}},"inline flow",-1),K={style:{"text-align":"left"}},S={href:"https://www.w3.org/TR/css-display-3/#inline-box",target:"_blank",rel:"noopener noreferrer"},V=t("td",{style:{"text-align":"left"}},"inline-block",-1),M=t("td",{style:{"text-align":"left"}},"inline flow-root",-1),j={style:{"text-align":"left"}},H={href:"https://www.w3.org/TR/css-display-3/#inline-level",target:"_blank",rel:"noopener noreferrer"},J={href:"https://www.w3.org/TR/css-display-3/#block-container",target:"_blank",rel:"noopener noreferrer"},A=t("td",{style:{"text-align":"left"}},"run-in",-1),U=t("td",{style:{"text-align":"left"}},"run-in flow",-1),W={style:{"text-align":"left"}},Y={href:"https://www.w3.org/TR/css-display-3/#run-in",target:"_blank",rel:"noopener noreferrer"},Z={href:"https://www.w3.org/TR/css-display-3/#inline-box",target:"_blank",rel:"noopener noreferrer"},X=t("td",{style:{"text-align":"left"}},"list-item",-1),O=t("td",{style:{"text-align":"left"}},"block flow list-item",-1),Q={style:{"text-align":"left"}},P={href:"https://www.w3.org/TR/css-display-3/#block-box",target:"_blank",rel:"noopener noreferrer"},$={href:"https://www.w3.org/TR/CSS2/generate.html#lists",target:"_blank",rel:"noopener noreferrer"},tt=t("td",{style:{"text-align":"left"}},"inline list-item",-1),et=t("td",{style:{"text-align":"left"}},"inline flow list-item",-1),nt={style:{"text-align":"left"}},st={href:"https://www.w3.org/TR/css-display-3/#inline-box",target:"_blank",rel:"noopener noreferrer"},lt={href:"https://www.w3.org/TR/CSS2/generate.html#lists",target:"_blank",rel:"noopener noreferrer"},at=t("td",{style:{"text-align":"left"}},"flex",-1),ot=t("td",{style:{"text-align":"left"}},"block flex",-1),it={style:{"text-align":"left"}},rt={href:"https://www.w3.org/TR/css-display-3/#block-level",target:"_blank",rel:"noopener noreferrer"},ct={href:"https://www.w3.org/TR/css-flexbox-1/#flex-container",target:"_blank",rel:"noopener noreferrer"},pt=t("td",{style:{"text-align":"left"}},"inline-flex",-1),dt=t("td",{style:{"text-align":"left"}},"inline flex",-1),ht={style:{"text-align":"left"}},gt={href:"https://www.w3.org/TR/css-display-3/#inline-level",target:"_blank",rel:"noopener noreferrer"},_t={href:"https://www.w3.org/TR/css-flexbox-1/#flex-container",target:"_blank",rel:"noopener noreferrer"},bt=t("td",{style:{"text-align":"left"}},"grid",-1),ut=t("td",{style:{"text-align":"left"}},"block grid",-1),kt={style:{"text-align":"left"}},xt={href:"https://www.w3.org/TR/css-display-3/#block-level",target:"_blank",rel:"noopener noreferrer"},ft={href:"https://www.w3.org/TR/css-grid-2/#grid-container",target:"_blank",rel:"noopener noreferrer"},yt=t("td",{style:{"text-align":"left"}},"inline-grid",-1),wt=t("td",{style:{"text-align":"left"}},"inline grid",-1),mt={style:{"text-align":"left"}},vt={href:"https://www.w3.org/TR/css-display-3/#inline-level",target:"_blank",rel:"noopener noreferrer"},Tt={href:"https://www.w3.org/TR/css-grid-2/#grid-container",target:"_blank",rel:"noopener noreferrer"},Rt=t("td",{style:{"text-align":"left"}},"ruby",-1),Ct=t("td",{style:{"text-align":"left"}},"inline ruby",-1),Ft={style:{"text-align":"left"}},Bt={href:"https://www.w3.org/TR/css-display-3/#inline-level",target:"_blank",rel:"noopener noreferrer"},It={href:"https://www.w3.org/TR/css-ruby-1/#ruby-container",target:"_blank",rel:"noopener noreferrer"},Nt=t("td",{style:{"text-align":"left"}},"block ruby",-1),zt=t("td",{style:{"text-align":"left"}},"block ruby",-1),Lt={style:{"text-align":"left"}},qt={href:"https://www.w3.org/TR/css-display-3/#block-box",target:"_blank",rel:"noopener noreferrer"},Dt={href:"https://www.w3.org/TR/css-ruby-1/#ruby-container",target:"_blank",rel:"noopener noreferrer"},Et=t("td",{style:{"text-align":"left"}},"table",-1),Gt=t("td",{style:{"text-align":"left"}},"block table",-1),Kt={style:{"text-align":"left"}},St={href:"https://www.w3.org/TR/css-display-3/#block-level",target:"_blank",rel:"noopener noreferrer"},Vt={href:"https://www.w3.org/TR/css-tables-3/#table-wrapper-box",target:"_blank",rel:"noopener noreferrer"},Mt={href:"https://www.w3.org/TR/css-tables-3/#table-grid-box",target:"_blank",rel:"noopener noreferrer"},jt=t("td",{style:{"text-align":"left"}},"inline-table",-1),Ht=t("td",{style:{"text-align":"left"}},"inline table",-1),Jt={style:{"text-align":"left"}},At={href:"https://www.w3.org/TR/css-display-3/#inline-level",target:"_blank",rel:"noopener noreferrer"},Ut={href:"https://www.w3.org/TR/css-tables-3/#table-wrapper-box",target:"_blank",rel:"noopener noreferrer"},Wt={href:"https://www.w3.org/TR/css-tables-3/#table-grid-box",target:"_blank",rel:"noopener noreferrer"},Yt=l('<p>以 <code>display: inline-block</code> 为例，它的完整写法是 <code>display: inline flow-root</code></p><ul><li>inline 表示外部类型为 inline-level</li><li>flow-root 表示内部类型为 block container</li><li>外部类型是 inline-level 内部类型是 block container 的盒子称为 inline block box。</li></ul><p>注意，一个 div 元素 <code>display:inline-block</code> 并没有生成两个盒子，而是生成的盒子既是 inline-level 类型，又是 block container 类型，它们一个决定 div 如何受外部上下文影响，一个决定 div 的子元素如何布局。</p><h3 id="outer-display-type" tabindex="-1"><a class="header-anchor" href="#outer-display-type"><span>outer display type</span></a></h3><p>外部盒子类型通常称为 xx-level box，决定元素自身受哪种 formatting context 影响。</p><ul><li><p>block-level box：元素自身受 BFC 影响</p></li><li><p>inline-level box：元素自身受 IFC 影响</p><ul><li><p>inline box</p></li><li><p>atomic inline-level box</p></li></ul></li></ul><h3 id="inner-display-type" tabindex="-1"><a class="header-anchor" href="#inner-display-type"><span>inner display type</span></a></h3><p>内部盒子类型通常称为 xx container，它会创建对应类型的 formatting context，从而决定元素的后代元素如何布局。</p><ul><li>block container：建立 BFC | IFC</li><li>flex container：建立 FFC ( flex formatting context )</li><li>grid container：建立 GFC ( grid formatting context )</li></ul><p>注意，替换元素的 display 默认值为 inline，由于其本意是显示图片，而并非作为其他元素的容器，因此无论如何设置 display，都不会生成 container box。</p><h3 id="text-align-与盒类型" tabindex="-1"><a class="header-anchor" href="#text-align-与盒类型"><span>text-align 与盒类型</span></a></h3><p>我们都知道，text-align 可以使文本内容居中。事实上，text-align 属性是设置于 block container，作用于所有 inline-level 的子元素。</p><p><img src="https://raw.githubusercontent.com/yamsfeer/pic-bed/master/text-align.png" alt=""></p>',13),Zt=t("div",{class:"language-html","data-ext":"html","data-title":"html"},[t("pre",{class:"language-html"},[t("code",null,[t("span",{class:"token tag"},[t("span",{class:"token tag"},[t("span",{class:"token punctuation"},"<"),e("div")]),e(),t("span",{class:"token special-attr"},[t("span",{class:"token attr-name"},"style"),t("span",{class:"token attr-value"},[t("span",{class:"token punctuation attr-equals"},"="),t("span",{class:"token punctuation"},'"'),t("span",{class:"token value css language-css"},[t("span",{class:"token property"},"text-align"),t("span",{class:"token punctuation"},":"),e("center")]),t("span",{class:"token punctuation"},'"')])]),t("span",{class:"token punctuation"},">")]),e(`
  `),t("span",{class:"token tag"},[t("span",{class:"token tag"},[t("span",{class:"token punctuation"},"<"),e("div")]),e(),t("span",{class:"token special-attr"},[t("span",{class:"token attr-name"},"style"),t("span",{class:"token attr-value"},[t("span",{class:"token punctuation attr-equals"},"="),t("span",{class:"token punctuation"},'"'),t("span",{class:"token value css language-css"},[t("span",{class:"token property"},"display"),t("span",{class:"token punctuation"},":"),e(" inline-block")]),t("span",{class:"token punctuation"},'"')])]),t("span",{class:"token punctuation"},">")]),e("inline-level & block container"),t("span",{class:"token tag"},[t("span",{class:"token tag"},[t("span",{class:"token punctuation"},"</"),e("div")]),t("span",{class:"token punctuation"},">")]),e(`
`),t("span",{class:"token tag"},[t("span",{class:"token tag"},[t("span",{class:"token punctuation"},"</"),e("div")]),t("span",{class:"token punctuation"},">")]),e(`
`)])])],-1),Xt=t("p",null,"上面父 div 的内部类型为 block container，设置了 text-align:center 后，外部类型为 inline-level 的资源都会居中。",-1),Ot=t("p",null,"当父 div 的外部类型不为 block container 时，text-align 自然就失效了。",-1),Qt=t("div",{class:"language-html","data-ext":"html","data-title":"html"},[t("pre",{class:"language-html"},[t("code",null,[t("span",{class:"token tag"},[t("span",{class:"token tag"},[t("span",{class:"token punctuation"},"<"),e("div")]),e(),t("span",{class:"token special-attr"},[t("span",{class:"token attr-name"},"style"),t("span",{class:"token attr-value"},[t("span",{class:"token punctuation attr-equals"},"="),t("span",{class:"token punctuation"},'"'),t("span",{class:"token value css language-css"},[t("span",{class:"token property"},"display"),t("span",{class:"token punctuation"},":"),e(" inline"),t("span",{class:"token punctuation"},";"),e(),t("span",{class:"token property"},"text-align"),t("span",{class:"token punctuation"},":"),e("center")]),t("span",{class:"token punctuation"},'"')])]),t("span",{class:"token punctuation"},">")]),e(`
  `),t("span",{class:"token tag"},[t("span",{class:"token tag"},[t("span",{class:"token punctuation"},"<"),e("div")]),e(),t("span",{class:"token special-attr"},[t("span",{class:"token attr-name"},"style"),t("span",{class:"token attr-value"},[t("span",{class:"token punctuation attr-equals"},"="),t("span",{class:"token punctuation"},'"'),t("span",{class:"token value css language-css"},[t("span",{class:"token property"},"display"),t("span",{class:"token punctuation"},":"),e(" inline-block")]),t("span",{class:"token punctuation"},'"')])]),t("span",{class:"token punctuation"},">")]),e("inline-level & block container"),t("span",{class:"token tag"},[t("span",{class:"token tag"},[t("span",{class:"token punctuation"},"</"),e("div")]),t("span",{class:"token punctuation"},">")]),e(`
`),t("span",{class:"token tag"},[t("span",{class:"token tag"},[t("span",{class:"token punctuation"},"</"),e("div")]),t("span",{class:"token punctuation"},">")]),e(`
`)])])],-1),Pt=l('<h2 id="line-box" tabindex="-1"><a class="header-anchor" href="#line-box"><span>line box</span></a></h2><h2 id="总结" tabindex="-1"><a class="header-anchor" href="#总结"><span>总结</span></a></h2><p>display 决定元素生成的盒子个数和类型。一个盒子同时存在外部和内部两种类型，外部类型决定自身如何布局，内部类型决定生成何种格式化上下文，从而决定其子元素如何布局。</p><p>outer display type:</p><ul><li><p>block-level box：元素自身受 BFC 影响</p></li><li><p>inline-level box：元素自身受 IFC 影响</p><ul><li><p>inline box</p></li><li><p>atomic inline-level box</p></li></ul></li></ul><p>inner display type:</p><ul><li>block container：建立 BFC | IFC</li><li>flex container：建立 FFC</li><li>grid container：建立 GFC</li></ul><h2 id="参考" tabindex="-1"><a class="header-anchor" href="#参考"><span>参考</span></a></h2>',8),$t={href:"https://www.w3.org/TR/css-display-3/",target:"_blank",rel:"noopener noreferrer"},te={href:"https://yachen168.github.io/article/display.html",target:"_blank",rel:"noopener noreferrer"};function ee(ne,se){const s=o("ExternalLinkIcon"),a=o("CodeDemo");return c(),p("div",null,[h,t("table",null,[g,t("tbody",null,[t("tr",null,[_,b,t("td",u,[e("subtree omitted from "),t("a",k,[e("box tree"),n(s)])])]),t("tr",null,[x,f,t("td",y,[e("element replaced by contents in "),t("a",w,[e("box tree"),n(s)])])]),t("tr",null,[m,v,t("td",T,[t("a",R,[e("block-level"),n(s)]),e(),t("a",C,[e("block container"),n(s)]),e(" aka "),t("a",F,[e("block box"),n(s)])])]),t("tr",null,[B,I,t("td",N,[t("a",z,[e("block-level"),n(s)]),e(),t("a",L,[e("block container"),n(s)]),e(" that establishes a new "),t("a",q,[e("block formatting context"),n(s)]),e(" ("),t("a",D,[e("BFC"),n(s)]),e(")")])]),t("tr",null,[E,G,t("td",K,[t("a",S,[e("inline box"),n(s)])])]),t("tr",null,[V,M,t("td",j,[t("a",H,[e("inline-level"),n(s)]),e(),t("a",J,[e("block container"),n(s)]),e(" aka inline block")])]),t("tr",null,[A,U,t("td",W,[t("a",Y,[e("run-in box"),n(s)]),e(" ("),t("a",Z,[e("inline box"),n(s)]),e(" with special box-tree-munging rules)")])]),t("tr",null,[X,O,t("td",Q,[t("a",P,[e("block box"),n(s)]),e(" with additional "),t("a",$,[e("marker box"),n(s)])])]),t("tr",null,[tt,et,t("td",nt,[t("a",st,[e("inline box"),n(s)]),e(" with additional "),t("a",lt,[e("marker box"),n(s)])])]),t("tr",null,[at,ot,t("td",it,[t("a",rt,[e("block-level"),n(s)]),e(),t("a",ct,[e("flex container"),n(s)])])]),t("tr",null,[pt,dt,t("td",ht,[t("a",gt,[e("inline-level"),n(s)]),e(),t("a",_t,[e("flex container"),n(s)])])]),t("tr",null,[bt,ut,t("td",kt,[t("a",xt,[e("block-level"),n(s)]),e(),t("a",ft,[e("grid container"),n(s)])])]),t("tr",null,[yt,wt,t("td",mt,[t("a",vt,[e("inline-level"),n(s)]),e(),t("a",Tt,[e("grid container"),n(s)])])]),t("tr",null,[Rt,Ct,t("td",Ft,[t("a",Bt,[e("inline-level"),n(s)]),e(),t("a",It,[e("ruby container"),n(s)])])]),t("tr",null,[Nt,zt,t("td",Lt,[t("a",qt,[e("block box"),n(s)]),e(" containing "),t("a",Dt,[e("ruby container"),n(s)])])]),t("tr",null,[Et,Gt,t("td",Kt,[t("a",St,[e("block-level"),n(s)]),e(),t("a",Vt,[e("table wrapper box"),n(s)]),e(" containing "),t("a",Mt,[e("table grid box"),n(s)])])]),t("tr",null,[jt,Ht,t("td",Jt,[t("a",At,[e("inline-level"),n(s)]),e(),t("a",Ut,[e("table wrapper box"),n(s)]),e(" containing "),t("a",Wt,[e("table grid box"),n(s)])])])])]),Yt,n(a,{id:"code-demo-372",type:"normal",code:"eJxVjDEKgEAMBL8SUtiJ/aG+5JrzDBqMUTSIIv7dQ7SwWnYY5sTeRkGHZcsbrHYIVR6NdsuDcKcukhotHmuvAD+p5XWWcDhgFVbKG5nikMT3Cm0kkMGDIU5qIeGlLFIjxb7F6wblcC5L"},{default:i(()=>[Zt]),_:1}),Xt,Ot,n(a,{id:"code-demo-381",type:"normal",code:"eJx9jLsKhUAMRH8lpLid3H59fMk26xo0GKNoEEX8dxfR1mqYw8w5sLNB0GHR8AqL7UKlx4aXScLugFVYKQejzbIg3KqLpEazx8orwNcrq2WMfRo+VWglgR/cGOKoFhKei39yJNmbeF49tjR1"},{default:i(()=>[Qt]),_:1}),Pt,t("p",null,[t("a",$t,[e("display - www.w3.org"),n(s)])]),t("p",null,[t("a",te,[e("你不知道的display - yachen168.github.io"),n(s)])])])}const oe=r(d,[["render",ee],["__file","3.2.盒.html.vue"]]),ie=JSON.parse('{"path":"/css/3.2.%E7%9B%92.html","title":"盒 ( box )","lang":"zh-CN","frontmatter":{"description":"盒 ( box ) 盒模型 在 css 中，布局的基本单位是盒 ( box )，box 总是矩形的，它包含 4 部分： content box padding box border box margin box 在 css 中可以对盒子的 4 部分内容进行设置： 其盒模型示意图如下： image-20231117154820156 值得注意的是，con...","head":[["meta",{"property":"og:url","content":"https://yamsfeer.github.io/notes-fe/css/3.2.%E7%9B%92.html"}],["meta",{"property":"og:site_name","content":"yamsfeer"}],["meta",{"property":"og:title","content":"盒 ( box )"}],["meta",{"property":"og:description","content":"盒 ( box ) 盒模型 在 css 中，布局的基本单位是盒 ( box )，box 总是矩形的，它包含 4 部分： content box padding box border box margin box 在 css 中可以对盒子的 4 部分内容进行设置： 其盒模型示意图如下： image-20231117154820156 值得注意的是，con..."}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:image","content":"https://raw.githubusercontent.com/yamsfeer/pic-bed/master/image-20231117154820156.png"}],["meta",{"property":"og:locale","content":"zh-CN"}],["meta",{"property":"og:updated_time","content":"2024-04-12T16:21:32.000Z"}],["meta",{"property":"article:modified_time","content":"2024-04-12T16:21:32.000Z"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"盒 ( box )\\",\\"image\\":[\\"https://raw.githubusercontent.com/yamsfeer/pic-bed/master/image-20231117154820156.png\\",\\"https://raw.githubusercontent.com/yamsfeer/pic-bed/master/text-align.png\\"],\\"dateModified\\":\\"2024-04-12T16:21:32.000Z\\",\\"author\\":[]}"]]},"headers":[{"level":2,"title":"盒模型","slug":"盒模型","link":"#盒模型","children":[]},{"level":2,"title":"盒类型","slug":"盒类型","link":"#盒类型","children":[{"level":3,"title":"outer display type","slug":"outer-display-type","link":"#outer-display-type","children":[]},{"level":3,"title":"inner display type","slug":"inner-display-type","link":"#inner-display-type","children":[]},{"level":3,"title":"text-align 与盒类型","slug":"text-align-与盒类型","link":"#text-align-与盒类型","children":[]}]},{"level":2,"title":"line box","slug":"line-box","link":"#line-box","children":[]},{"level":2,"title":"总结","slug":"总结","link":"#总结","children":[]},{"level":2,"title":"参考","slug":"参考","link":"#参考","children":[]}],"git":{"createdTime":1712938892000,"updatedTime":1712938892000,"contributors":[{"name":"yamsfeer","email":"feer.yams@gmail.com","commits":1}]},"readingTime":{"minutes":4.39,"words":1318},"filePathRelative":"css/3.2.盒.md","localizedDate":"2024年4月12日","autoDesc":true}');export{oe as comp,ie as data};
