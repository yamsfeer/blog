import{_ as a}from"./plugin-vue_export-helper-DlAUqK2U.js";import{r as t,o as p,c as o,b as n,d as e,e as c,a as l}from"./app-BPFsuHku.js";const u={},k=l(`<h1 id="生成器" tabindex="-1"><a class="header-anchor" href="#生成器"><span>生成器</span></a></h1><p>第 2 章，我们确定了用回调表达异步控制流程的两个关键缺陷：</p><ul><li><p>基于回调的异步不符合大脑对任务步骤的规划方式</p></li><li><p>由于控制反转，回调并不是可信任或可组合的。</p></li></ul><p>第 3 章，我们详细介绍了 Promise 如何把回调的控制反转反转回来，恢复了可信任性 / 可组合性。</p><p>第 4 章我们介绍一种顺序、看似同步的异步流程控制表达风格——生成器。</p><h2 id="生成器的基本特点" tabindex="-1"><a class="header-anchor" href="#生成器的基本特点"><span>生成器的基本特点</span></a></h2><h3 id="输入和输出" tabindex="-1"><a class="header-anchor" href="#输入和输出"><span>输入和输出</span></a></h3><p>生成器函数是一个特殊的函数，它除了有函数的基本特性，比如接受参数和输出返回值，还可以<strong>中断函数的运行</strong>。</p><div class="language-javascript" data-ext="js" data-title="js"><pre class="language-javascript"><code><span class="token keyword">function</span> <span class="token operator">*</span><span class="token function">foo</span><span class="token punctuation">(</span><span class="token parameter">x<span class="token punctuation">,</span> y</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token keyword">var</span> z <span class="token operator">=</span> x <span class="token operator">+</span> y<span class="token punctuation">;</span>
  <span class="token keyword">yield</span> z<span class="token punctuation">;</span>
  <span class="token keyword">return</span> z <span class="token operator">*</span> <span class="token number">2</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>

<span class="token keyword">var</span> it <span class="token operator">=</span> <span class="token function">foo</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
it<span class="token punctuation">.</span><span class="token function">next</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span>value<span class="token punctuation">;</span> <span class="token comment">// 3</span>
it<span class="token punctuation">.</span><span class="token function">next</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span>value<span class="token punctuation">;</span> <span class="token comment">// 6</span>
</code></pre></div><h3 id="双向消息传递" tabindex="-1"><a class="header-anchor" href="#双向消息传递"><span>双向消息传递</span></a></h3><p>生成器通过 <code>yield</code> 和 <code>next函数</code> 实现双向数据传递。</p><div class="language-javascript" data-ext="js" data-title="js"><pre class="language-javascript"><code><span class="token keyword">function</span> <span class="token operator">*</span><span class="token function">foo</span><span class="token punctuation">(</span><span class="token parameter">x</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token keyword">var</span> y <span class="token operator">=</span> x <span class="token operator">*</span> <span class="token punctuation">(</span><span class="token keyword">yield</span> <span class="token string">&quot;Hello&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token keyword">return</span> y<span class="token punctuation">;</span>
<span class="token punctuation">}</span>
<span class="token keyword">var</span> it <span class="token operator">=</span> <span class="token function">foo</span><span class="token punctuation">(</span> <span class="token number">6</span> <span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token keyword">var</span> res <span class="token operator">=</span> it<span class="token punctuation">.</span><span class="token function">next</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 启动生成器时一定要用不带参数的next</span>
res<span class="token punctuation">.</span>value<span class="token punctuation">;</span> <span class="token comment">// hello，对应foo函数的yield &quot;Hello&quot;，从生成器传递至迭代器。</span>
res <span class="token operator">=</span> it<span class="token punctuation">.</span><span class="token function">next</span><span class="token punctuation">(</span> <span class="token number">7</span> <span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 从迭代器传递至生成器中yield的位置</span>
res<span class="token punctuation">.</span>value<span class="token punctuation">;</span> <span class="token comment">// 42</span>
</code></pre></div><p>我们并没有向第一个 next() 调用发送值，这是有意为之。<strong>只有暂停的 yield 才能接受这样一个通过 next 传递的值</strong>，而在生成器的起始处我们调用第一个 next() 时，还没有暂停的 yield 来接受这样一个值。规范和所有兼容浏览器都会默默<strong>丢弃</strong>传递给第一个 next() 的任何东西。因此，<strong>启动生成器时一定要用不带参数的 next()</strong>。</p><p>也许你会发现，next函数通常比yield多一个，事实上他们是一一对应的。<strong>next &lt;=&gt; yield + return</strong>。</p><h3 id="多个迭代器" tabindex="-1"><a class="header-anchor" href="#多个迭代器"><span>多个迭代器</span></a></h3><p>每次构建一个迭代器，实际上就隐式构建了生成器的一个实例，通过这个迭代器来控制的是这个生成器实例。</p><p>同一个生成器的多个实例可以同时运行，它们甚至可以彼此交互或交替执行。</p><div class="language-javascript" data-ext="js" data-title="js"><pre class="language-javascript"><code><span class="token keyword">function</span> <span class="token operator">*</span><span class="token function">foo</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">var</span> x <span class="token operator">=</span> <span class="token keyword">yield</span> <span class="token number">2</span><span class="token punctuation">;</span>
    z<span class="token operator">++</span><span class="token punctuation">;</span>
    <span class="token keyword">var</span> y <span class="token operator">=</span> <span class="token keyword">yield</span> <span class="token punctuation">(</span>x <span class="token operator">*</span> z<span class="token punctuation">)</span><span class="token punctuation">;</span>
    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span> x<span class="token punctuation">,</span> y<span class="token punctuation">,</span> z <span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
<span class="token keyword">var</span> z <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>
<span class="token keyword">var</span> it1 <span class="token operator">=</span> <span class="token function">foo</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token keyword">var</span> it2 <span class="token operator">=</span> <span class="token function">foo</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token keyword">var</span> val1 <span class="token operator">=</span> it1<span class="token punctuation">.</span><span class="token function">next</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span>value<span class="token punctuation">;</span> <span class="token comment">// 2 &lt;-- yield 2</span>
<span class="token keyword">var</span> val2 <span class="token operator">=</span> it2<span class="token punctuation">.</span><span class="token function">next</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span>value<span class="token punctuation">;</span> <span class="token comment">// 2 &lt;-- yield 2</span>
val1 <span class="token operator">=</span> it1<span class="token punctuation">.</span><span class="token function">next</span><span class="token punctuation">(</span> val2 <span class="token operator">*</span> <span class="token number">10</span> <span class="token punctuation">)</span><span class="token punctuation">.</span>value<span class="token punctuation">;</span> <span class="token comment">// 40   &lt;-- x:20,  z:2</span>
val2 <span class="token operator">=</span> it2<span class="token punctuation">.</span><span class="token function">next</span><span class="token punctuation">(</span> val1 <span class="token operator">*</span> <span class="token number">5</span> <span class="token punctuation">)</span><span class="token punctuation">.</span>value<span class="token punctuation">;</span> <span class="token comment">// 600  &lt;-- x:200, z:3</span>
it1<span class="token punctuation">.</span><span class="token function">next</span><span class="token punctuation">(</span> val2 <span class="token operator">/</span> <span class="token number">2</span> <span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// y:300 // 20 300 3</span>
it2<span class="token punctuation">.</span><span class="token function">next</span><span class="token punctuation">(</span> val1 <span class="token operator">/</span> <span class="token number">4</span> <span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// y:10 // 200 10 3</span>
</code></pre></div><h2 id="用生成器产生值" tabindex="-1"><a class="header-anchor" href="#用生成器产生值"><span>用生成器产生值</span></a></h2><p>“生成器”这个名称最初的使用场景就是作为一种产生值的方式。但是在介绍生成器如何产生值之前，我们先介绍下什么是迭代器。</p><h3 id="什么是迭代器" tabindex="-1"><a class="header-anchor" href="#什么是迭代器"><span>什么是迭代器</span></a></h3><p>假定你要产生一系列值，其中每个值都与前面一个有特定的关系。要实现这一点，需要一个有状态的生产者记住其生成的最后一个值。</p><p>我们可以用闭包实现：</p><div class="language-javascript" data-ext="js" data-title="js"><pre class="language-javascript"><code><span class="token keyword">var</span> genNum <span class="token operator">=</span> <span class="token keyword">void</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token keyword">var</span> nextVal<span class="token punctuation">;</span>
  <span class="token keyword">return</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">return</span> nextVal <span class="token operator">=</span> nextVal <span class="token operator">===</span> <span class="token keyword">undefined</span> <span class="token operator">?</span> nextVal <span class="token operator">*</span> <span class="token number">2</span> <span class="token operator">:</span> <span class="token number">10</span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span>
<span class="token punctuation">}</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token function">genNum</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token comment">// 10</span>
<span class="token function">genNum</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token comment">// 20</span>
<span class="token function">genNum</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token comment">// 40</span>
</code></pre></div><p>用标准的迭代器接口实现：</p><div class="language-javascript" data-ext="js" data-title="js"><pre class="language-javascript"><code><span class="token keyword">var</span> genNum <span class="token operator">=</span> <span class="token keyword">void</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token keyword">var</span> nextVal<span class="token punctuation">;</span>
  <span class="token keyword">return</span> <span class="token punctuation">{</span>
    <span class="token punctuation">[</span>Symbol<span class="token punctuation">.</span>Iterator<span class="token punctuation">]</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span> <span class="token keyword">return</span> <span class="token keyword">this</span><span class="token punctuation">;</span> <span class="token punctuation">}</span><span class="token punctuation">,</span>
    <span class="token comment">// 标准迭代器接口方法</span>
    <span class="token function">next</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
			nextVal <span class="token operator">=</span> nextVal <span class="token operator">===</span> <span class="token keyword">undefined</span> <span class="token operator">?</span> nextVal <span class="token operator">*</span> <span class="token number">2</span> <span class="token operator">:</span> <span class="token number">10</span><span class="token punctuation">;</span>
      <span class="token keyword">return</span> <span class="token punctuation">{</span> <span class="token literal-property property">done</span><span class="token operator">:</span> <span class="token boolean">false</span><span class="token punctuation">,</span> <span class="token literal-property property">value</span><span class="token operator">:</span> nextVal <span class="token punctuation">}</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
  <span class="token punctuation">}</span>
<span class="token punctuation">}</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
genNum<span class="token punctuation">.</span><span class="token function">next</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span>value <span class="token comment">// 10</span>
genNum<span class="token punctuation">.</span><span class="token function">next</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span>value <span class="token comment">// 20</span>
</code></pre></div><p>另外，ES6 还新增了一个 for-of 循环，for-of 循环在每次迭代中自动调用迭代器的 next()，它不会向 next() 传入任何值，并且会在接收到 done:true 之后自动停止。</p><div class="language-javascript" data-ext="js" data-title="js"><pre class="language-javascript"><code><span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">var</span> v <span class="token keyword">of</span> genNum<span class="token punctuation">)</span> <span class="token punctuation">{</span>
  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span> v <span class="token punctuation">)</span><span class="token punctuation">;</span>
	<span class="token keyword">if</span> <span class="token punctuation">(</span>v <span class="token operator">&gt;</span> <span class="token number">500</span><span class="token punctuation">)</span> <span class="token punctuation">{</span> <span class="token keyword">break</span><span class="token punctuation">;</span> <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre></div><h3 id="iterable可迭代的" tabindex="-1"><a class="header-anchor" href="#iterable可迭代的"><span>iterable可迭代的</span></a></h3><p>实现了<code>Symbol.iterator</code>函数的对象是可迭代的（iterable），迭代器包含next函数，next 调用返回一个对象。这个对象有两个属性:done 是一个 boolean 值，标识迭代器的完成状态；value 中放置迭代值。</p><div class="language-javascript" data-ext="js" data-title="js"><pre class="language-javascript"><code><span class="token keyword">var</span> obj <span class="token operator">=</span> <span class="token punctuation">{</span>
  <span class="token punctuation">[</span>Symbol<span class="token punctuation">.</span>iterator<span class="token punctuation">]</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span> <span class="token comment">// iterable</span>
    <span class="token keyword">var</span> val <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>
    <span class="token keyword">return</span> <span class="token punctuation">{</span> <span class="token comment">// 返回迭代器对象</span>
      <span class="token function">next</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">return</span> <span class="token punctuation">{</span>
          <span class="token literal-property property">done</span><span class="token operator">:</span> val <span class="token operator">&gt;</span> <span class="token number">5</span><span class="token punctuation">,</span>
          <span class="token literal-property property">value</span><span class="token operator">:</span> val<span class="token operator">++</span>
        <span class="token punctuation">}</span>
      <span class="token punctuation">}</span>
    <span class="token punctuation">}</span>
  <span class="token punctuation">}</span>
<span class="token punctuation">}</span>

<span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">var</span> v <span class="token keyword">of</span> obj<span class="token punctuation">)</span> <span class="token punctuation">{</span>
  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>v<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 1 2 3 4 5</span>
<span class="token punctuation">}</span>
</code></pre></div><p>for-of 循环自动调用它的 Symbol.iterator 函数来构建一个迭代器。我们当然也可以手工调用这个函数，然后使用它返回的迭代器。</p><p>for-of 循环在每次迭代中自动调用 next()，它不会向 next() 传入任何值，并且会在接收到 done:true 之后自动停止。</p><div class="language-javascript" data-ext="js" data-title="js"><pre class="language-javascript"><code><span class="token keyword">var</span> arr <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">,</span><span class="token number">5</span><span class="token punctuation">,</span><span class="token number">7</span><span class="token punctuation">,</span><span class="token number">9</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
<span class="token keyword">var</span> it <span class="token operator">=</span> arr<span class="token punctuation">[</span>Symbol<span class="token punctuation">.</span>iterator<span class="token punctuation">]</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
it<span class="token punctuation">.</span><span class="token function">next</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span>value<span class="token punctuation">;</span>
it<span class="token punctuation">.</span><span class="token function">next</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span>value<span class="token punctuation">;</span>
</code></pre></div><h3 id="生成器与迭代器" tabindex="-1"><a class="header-anchor" href="#生成器与迭代器"><span>生成器与迭代器</span></a></h3><p>严格说来，生成器本身并不是 iterable，尽管非常类似。当你执行一个生成器，就得到了一个迭代器。</p><div class="language-javascript" data-ext="js" data-title="js"><pre class="language-javascript"><code><span class="token keyword">function</span> <span class="token operator">*</span><span class="token function">foo</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token keyword">var</span> val<span class="token punctuation">;</span>
  <span class="token keyword">while</span><span class="token punctuation">(</span><span class="token boolean">true</span><span class="token punctuation">)</span> <span class="token punctuation">{</span> <span class="token comment">// 生成器会在每次迭代中暂停，通过 yield 返回到主程序或事件循环队列中。</span>
    val <span class="token operator">=</span> val <span class="token operator">?</span> val <span class="token operator">+</span> <span class="token number">1</span> <span class="token operator">:</span> <span class="token number">1</span><span class="token punctuation">;</span>
    <span class="token keyword">yield</span> val<span class="token punctuation">;</span>
  <span class="token punctuation">}</span>
<span class="token punctuation">}</span>

<span class="token keyword">var</span> iterator <span class="token operator">=</span> <span class="token function">foo</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 执行生成器，得到迭代器</span>

<span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">var</span> v <span class="token keyword">of</span> iterator<span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token keyword">if</span> <span class="token punctuation">(</span>v <span class="token operator">&gt;</span> <span class="token number">5</span><span class="token punctuation">)</span> <span class="token keyword">break</span><span class="token punctuation">;</span>
  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>v<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 1 2 3 4 5</span>
<span class="token punctuation">}</span>
</code></pre></div><ul><li>注意foo是生成器，并不是 iterable。我们需要调用 foo() 来构造一个生产者供 for-of 循环迭代。</li><li>foo() 调用产生一个迭代器，但 for-of 循环需要的是一个 iterable。所以生成器的迭代器也有一个 Symbol.iterator 函数，基本上这个函数做的就是 return this。换句话说，生成器的迭代器也是一个 iterable 。</li></ul><h4 id="停止生成器-it-return" tabindex="-1"><a class="header-anchor" href="#停止生成器-it-return"><span>停止生成器 it.return()</span></a></h4><p>在前面的例子中，看起来似乎 *foo() 生成器的迭代器实例在循环break之后就永远留在了挂起状态。</p><p>其实有一个隐藏的特性会帮助你管理此事。for-of 循环的“异常结束”(也就是“提前终止”)，通常由<strong>break、return 或者未捕获异常</strong>引起，会向生成器的迭代器发送一个信号使其终止。<em>严格地说，在循环正常结束之后，for-of 循环也会向迭代器发送这个信号。</em></p><p>尽管 for-of 循环会自动发送这个信号，但你可能会希望向一个迭代器手工发送这个信号。</p><div class="language-javascript" data-ext="js" data-title="js"><pre class="language-javascript"><code><span class="token keyword">var</span> it <span class="token operator">=</span> <span class="token function">foo</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">var</span> v <span class="token keyword">of</span> it<span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token keyword">if</span> <span class="token punctuation">(</span>v <span class="token operator">&gt;</span> <span class="token number">5</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token comment">// 调用 it.return() 之后，它会立即终止生成器，并把返回的value设置为传入return()的内容</span>
    it<span class="token punctuation">.</span><span class="token function">return</span><span class="token punctuation">(</span><span class="token string">&#39;hello&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// { done: true, value: &#39;hello&#39;}</span>
    <span class="token comment">// 不需要break</span>
  <span class="token punctuation">}</span>
  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>v<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 1 2 3 4 5 6</span>
<span class="token punctuation">}</span>
</code></pre></div><h4 id="抛出错误-it-throw" tabindex="-1"><a class="header-anchor" href="#抛出错误-it-throw"><span>抛出错误 it.throw()</span></a></h4><p>迭代器主动抛出错误，不常用。</p><div class="language-javascript" data-ext="js" data-title="js"><pre class="language-javascript"><code><span class="token keyword">function</span> <span class="token operator">*</span><span class="token function">foo</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token keyword">try</span> <span class="token punctuation">{</span>
   	<span class="token keyword">yield</span> <span class="token number">1</span><span class="token punctuation">;</span>
    <span class="token keyword">yield</span> <span class="token number">2</span><span class="token punctuation">;</span> 
  <span class="token punctuation">}</span> <span class="token keyword">catch</span><span class="token punctuation">(</span>err<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>err<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// &#39;oops&#39;</span>
  <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
<span class="token keyword">var</span> it <span class="token operator">=</span> <span class="token function">foo</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
it<span class="token punctuation">.</span><span class="token function">next</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span>value<span class="token punctuation">;</span> <span class="token comment">// 1</span>
it<span class="token punctuation">.</span><span class="token function">throw</span><span class="token punctuation">(</span><span class="token string">&#39;oops&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre></div><h2 id="生成器重构回调例子" tabindex="-1"><a class="header-anchor" href="#生成器重构回调例子"><span>生成器重构回调例子</span></a></h2><p>先来看下回调的例子：</p><div class="language-javascript" data-ext="js" data-title="js"><pre class="language-javascript"><code><span class="token keyword">function</span> <span class="token function">foo</span><span class="token punctuation">(</span><span class="token parameter">url<span class="token punctuation">,</span>cb</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token function">ajax</span><span class="token punctuation">(</span>url<span class="token punctuation">,</span> cb<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
<span class="token function">foo</span><span class="token punctuation">(</span> <span class="token string">&#39;http://xx.com&#39;</span><span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token parameter">err<span class="token punctuation">,</span>text</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> err <span class="token operator">?</span> console<span class="token punctuation">.</span><span class="token function">error</span><span class="token punctuation">(</span>err<span class="token punctuation">)</span> <span class="token operator">:</span> console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>text<span class="token punctuation">)</span> <span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre></div><p>生成器例子：</p><div class="language-javascript" data-ext="js" data-title="js"><pre class="language-javascript"><code><span class="token keyword">function</span> <span class="token function">foo</span><span class="token punctuation">(</span><span class="token parameter">url</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token function">ajax</span><span class="token punctuation">(</span>url<span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token parameter">err<span class="token punctuation">,</span> data</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
    <span class="token comment">// 向*main()抛出一个错误 或 用收到的data恢复*main()</span>
    err <span class="token operator">?</span> it<span class="token punctuation">.</span><span class="token function">throw</span><span class="token punctuation">(</span>err<span class="token punctuation">)</span> <span class="token operator">:</span> it<span class="token punctuation">.</span><span class="token function">next</span><span class="token punctuation">(</span>data<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
<span class="token keyword">function</span> <span class="token operator">*</span><span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token keyword">try</span> <span class="token punctuation">{</span>
  	<span class="token keyword">let</span> text <span class="token operator">=</span> <span class="token keyword">yield</span> <span class="token function">foo</span><span class="token punctuation">(</span><span class="token string">&#39;http://xx.com&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>err<span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span> <span class="token keyword">catch</span><span class="token punctuation">(</span>err<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    console<span class="token punctuation">.</span><span class="token function">error</span><span class="token punctuation">(</span>err<span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span>
<span class="token punctuation">}</span>

<span class="token keyword">let</span> it <span class="token operator">=</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
it<span class="token punctuation">.</span><span class="token function">next</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre></div><h2 id="生成器-promise" tabindex="-1"><a class="header-anchor" href="#生成器-promise"><span>生成器 + promise</span></a></h2><p>同样地，先来回顾下之前promise的例子：</p><div class="language-javascript" data-ext="js" data-title="js"><pre class="language-javascript"><code><span class="token function">request</span><span class="token punctuation">(</span><span class="token string">&#39;http://xx.com&#39;</span><span class="token punctuation">)</span>
	<span class="token punctuation">.</span><span class="token function">then</span><span class="token punctuation">(</span>
  	<span class="token parameter">data</span> <span class="token operator">=&gt;</span> console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>data<span class="token punctuation">)</span><span class="token punctuation">,</span>
  	<span class="token parameter">err</span> <span class="token operator">=&gt;</span> console<span class="token punctuation">.</span><span class="token function">error</span><span class="token punctuation">(</span>err<span class="token punctuation">)</span>
	<span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre></div><p>生成器 + promise版本：</p><div class="language-javascript" data-ext="js" data-title="js"><pre class="language-javascript"><code><span class="token keyword">function</span> <span class="token operator">*</span><span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token keyword">try</span> <span class="token punctuation">{</span>
  	<span class="token keyword">let</span> text <span class="token operator">=</span> <span class="token keyword">yield</span> <span class="token function">request</span><span class="token punctuation">(</span><span class="token string">&#39;http://xx.com&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>err<span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span> <span class="token keyword">catch</span><span class="token punctuation">(</span>err<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    console<span class="token punctuation">.</span><span class="token function">error</span><span class="token punctuation">(</span>err<span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span>
<span class="token punctuation">}</span>

<span class="token keyword">let</span> it <span class="token operator">=</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token keyword">let</span> promise <span class="token operator">=</span> it<span class="token punctuation">.</span><span class="token function">next</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span>value<span class="token punctuation">;</span>
promise<span class="token punctuation">.</span><span class="token function">then</span><span class="token punctuation">(</span>
	<span class="token parameter">data</span> <span class="token operator">=&gt;</span>	it<span class="token punctuation">.</span><span class="token function">next</span><span class="token punctuation">(</span>data<span class="token punctuation">)</span><span class="token punctuation">,</span>
  <span class="token parameter">err</span> <span class="token operator">=&gt;</span> it<span class="token punctuation">.</span><span class="token function">throw</span><span class="token punctuation">(</span>err<span class="token punctuation">)</span>
<span class="token punctuation">)</span>
</code></pre></div><p>针对上面生成器 + promise版本的例子，可见我们需要每次小心地控制迭代器的运行，这不太方便且容易出错。</p><p>书中给了一个自动控制生成器执行的例子，这里仅供参考，因为在ES7中已经提供了标准化的<code>async / await</code>解决方法。</p><div class="language-javascript" data-ext="js" data-title="js"><pre class="language-javascript"><code><span class="token keyword">function</span> <span class="token function">run</span><span class="token punctuation">(</span><span class="token parameter">gen</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token keyword">var</span> args <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token function">slice</span><span class="token punctuation">.</span><span class="token function">call</span><span class="token punctuation">(</span> arguments<span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">,</span> it<span class="token punctuation">;</span>
  <span class="token comment">// 在当前上下文中初始化生成器</span>
  it <span class="token operator">=</span> <span class="token function">gen</span><span class="token punctuation">.</span><span class="token function">apply</span><span class="token punctuation">(</span> <span class="token keyword">this</span><span class="token punctuation">,</span> args <span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token comment">// 返回一个promise用于生成器完成</span>
  <span class="token keyword">return</span> Promise<span class="token punctuation">.</span><span class="token function">resolve</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
          <span class="token punctuation">.</span><span class="token function">then</span><span class="token punctuation">(</span> <span class="token keyword">function</span> <span class="token function">handleNext</span><span class="token punctuation">(</span><span class="token parameter">value</span><span class="token punctuation">)</span><span class="token punctuation">{</span> <span class="token comment">// 对下一个yield出的值运行</span>
            <span class="token keyword">var</span> next <span class="token operator">=</span> it<span class="token punctuation">.</span><span class="token function">next</span><span class="token punctuation">(</span> value <span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token keyword">return</span> <span class="token punctuation">(</span><span class="token keyword">function</span> <span class="token function">handleResult</span><span class="token punctuation">(</span><span class="token parameter">next</span><span class="token punctuation">)</span><span class="token punctuation">{</span> <span class="token comment">// 生成器运行完毕了吗?</span>
              <span class="token keyword">if</span> <span class="token punctuation">(</span>next<span class="token punctuation">.</span>done<span class="token punctuation">)</span> <span class="token punctuation">{</span>
                <span class="token keyword">return</span> next<span class="token punctuation">.</span>value<span class="token punctuation">;</span>
              <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>
                <span class="token keyword">return</span> Promise<span class="token punctuation">.</span><span class="token function">resolve</span><span class="token punctuation">(</span> next<span class="token punctuation">.</span>value <span class="token punctuation">)</span>
                   <span class="token punctuation">.</span><span class="token function">then</span><span class="token punctuation">(</span>
                    	<span class="token comment">// 成功就恢复异步循环，把决议的值发回生成器 handleNext,</span>
                    	<span class="token comment">// 如果value是被拒绝的 promise，就把错误传回生成器进行出错处理</span>
                   		<span class="token keyword">function</span> <span class="token function">handleErr</span><span class="token punctuation">(</span><span class="token parameter">err</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
                        <span class="token keyword">return</span> Promise<span class="token punctuation">.</span><span class="token function">resolve</span><span class="token punctuation">(</span>it<span class="token punctuation">.</span><span class="token function">throw</span><span class="token punctuation">(</span> err <span class="token punctuation">)</span><span class="token punctuation">)</span>
                          <span class="token punctuation">.</span><span class="token function">then</span><span class="token punctuation">(</span> handleResult <span class="token punctuation">)</span><span class="token punctuation">;</span>
                      <span class="token punctuation">}</span>
                    <span class="token punctuation">)</span><span class="token punctuation">;</span>
              <span class="token punctuation">}</span>
    <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">(</span>next<span class="token punctuation">)</span><span class="token punctuation">;</span>
	<span class="token punctuation">}</span> <span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>

<span class="token keyword">function</span> <span class="token operator">*</span><span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token comment">// ..</span>
<span class="token punctuation">}</span>
<span class="token function">run</span><span class="token punctuation">(</span> main <span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre></div><p>Async / await 版本：</p><p>如果你 await 了一个 Promise，async 函数就会自动获知要做什么，它会暂停这个函数(就像生成器一样)，直到 Promise 决议。</p><div class="language-javascript" data-ext="js" data-title="js"><pre class="language-javascript"><code><span class="token keyword">async</span> <span class="token keyword">function</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token keyword">try</span> <span class="token punctuation">{</span>
    <span class="token keyword">let</span> data <span class="token operator">=</span> <span class="token keyword">await</span> <span class="token function">request</span><span class="token punctuation">(</span><span class="token string">&#39;http://xx.com&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>data<span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span> <span class="token keyword">catch</span><span class="token punctuation">(</span>err<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    console<span class="token punctuation">.</span><span class="token function">error</span><span class="token punctuation">(</span>err<span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre></div><h2 id="生成器委托" tabindex="-1"><a class="header-anchor" href="#生成器委托"><span>生成器委托</span></a></h2><h2 id="形实转换程序" tabindex="-1"><a class="header-anchor" href="#形实转换程序"><span>形实转换程序</span></a></h2>`,64),i={href:"http://www.ruanyifeng.com/blog/2015/05/thunk.html",target:"_blank",rel:"noopener noreferrer"},r=n("h2",{id:"es6之前的生成器",tabindex:"-1"},[n("a",{class:"header-anchor",href:"#es6之前的生成器"},[n("span",null,"ES6之前的生成器")])],-1),d=n("h2",{id:"小结",tabindex:"-1"},[n("a",{class:"header-anchor",href:"#小结"},[n("span",null,"小结")])],-1),m=n("p",null,"生成器是 ES6 的一个新的函数类型，它并不像普通函数那样总是运行到结束。取而代之的是，生成器可以在运行当中(完全保持其状态)暂停，并且将来再从暂停的地方恢复运行。",-1),f=n("p",null,"这种交替的暂停和恢复是合作性的而不是抢占式的，这意味着生成器具有独一无二的能力来暂停自身，这是通过关键字 yield 实现的。不过，只有控制生成器的迭代器具有恢复生成器的能力(通过 next)。",-1),y=n("p",null,"yield/next这一对不只是一种控制机制，实际上也是一种双向消息传递机制。yield 表达式本质上是暂停下来等待某个值，接下来的 next 调用会向被暂停的 yield 表达式传回一个值(或者是隐式的 undefined)。",-1),v=n("p",null,"在异步控制流程方面，生成器的关键优点是:生成器内部的代码是以自然的同步 / 顺序方式表达任务的一系列步骤。其技巧在于，我们把可能的异步隐藏在了关键字 yield 的后面， 把异步移动到控制生成器的迭代器的代码部分。",-1),h=n("p",null,"换句话说，生成器为异步代码保持了顺序、同步、阻塞的代码模式，这使得大脑可以更自然地追踪代码，解决了基于回调的异步的两个关键缺陷之一。",-1);function g(w,x){const s=t("ExternalLinkIcon");return p(),o("div",null,[k,n("p",null,[n("a",i,[e("thunk函数"),c(s)])]),r,d,m,f,y,v,h])}const _=a(u,[["render",g],["__file","2-4 生成器.html.vue"]]),E=JSON.parse('{"path":"/YDKJS/YDKJS(%E4%B8%AD%E5%8D%B7)/2-4%20%E7%94%9F%E6%88%90%E5%99%A8.html","title":"生成器","lang":"zh-CN","frontmatter":{"description":"生成器 第 2 章，我们确定了用回调表达异步控制流程的两个关键缺陷： 基于回调的异步不符合大脑对任务步骤的规划方式 由于控制反转，回调并不是可信任或可组合的。 第 3 章，我们详细介绍了 Promise 如何把回调的控制反转反转回来，恢复了可信任性 / 可组合性。 第 4 章我们介绍一种顺序、看似同步的异步流程控制表达风格——生成器。 生成器的基本特点...","head":[["meta",{"property":"og:url","content":"https://yamsfeer.github.io/notes-fe/YDKJS/YDKJS(%E4%B8%AD%E5%8D%B7)/2-4%20%E7%94%9F%E6%88%90%E5%99%A8.html"}],["meta",{"property":"og:site_name","content":"yamsfeer"}],["meta",{"property":"og:title","content":"生成器"}],["meta",{"property":"og:description","content":"生成器 第 2 章，我们确定了用回调表达异步控制流程的两个关键缺陷： 基于回调的异步不符合大脑对任务步骤的规划方式 由于控制反转，回调并不是可信任或可组合的。 第 3 章，我们详细介绍了 Promise 如何把回调的控制反转反转回来，恢复了可信任性 / 可组合性。 第 4 章我们介绍一种顺序、看似同步的异步流程控制表达风格——生成器。 生成器的基本特点..."}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:locale","content":"zh-CN"}],["meta",{"property":"og:updated_time","content":"2024-04-12T16:21:32.000Z"}],["meta",{"property":"article:modified_time","content":"2024-04-12T16:21:32.000Z"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"生成器\\",\\"image\\":[\\"\\"],\\"dateModified\\":\\"2024-04-12T16:21:32.000Z\\",\\"author\\":[]}"]]},"headers":[{"level":2,"title":"生成器的基本特点","slug":"生成器的基本特点","link":"#生成器的基本特点","children":[{"level":3,"title":"输入和输出","slug":"输入和输出","link":"#输入和输出","children":[]},{"level":3,"title":"双向消息传递","slug":"双向消息传递","link":"#双向消息传递","children":[]},{"level":3,"title":"多个迭代器","slug":"多个迭代器","link":"#多个迭代器","children":[]}]},{"level":2,"title":"用生成器产生值","slug":"用生成器产生值","link":"#用生成器产生值","children":[{"level":3,"title":"什么是迭代器","slug":"什么是迭代器","link":"#什么是迭代器","children":[]},{"level":3,"title":"iterable可迭代的","slug":"iterable可迭代的","link":"#iterable可迭代的","children":[]},{"level":3,"title":"生成器与迭代器","slug":"生成器与迭代器","link":"#生成器与迭代器","children":[]}]},{"level":2,"title":"生成器重构回调例子","slug":"生成器重构回调例子","link":"#生成器重构回调例子","children":[]},{"level":2,"title":"生成器 + promise","slug":"生成器-promise","link":"#生成器-promise","children":[]},{"level":2,"title":"生成器委托","slug":"生成器委托","link":"#生成器委托","children":[]},{"level":2,"title":"形实转换程序","slug":"形实转换程序","link":"#形实转换程序","children":[]},{"level":2,"title":"ES6之前的生成器","slug":"es6之前的生成器","link":"#es6之前的生成器","children":[]},{"level":2,"title":"小结","slug":"小结","link":"#小结","children":[]}],"git":{"createdTime":1712938892000,"updatedTime":1712938892000,"contributors":[{"name":"yamsfeer","email":"feer.yams@gmail.com","commits":1}]},"readingTime":{"minutes":8.27,"words":2482},"filePathRelative":"YDKJS/YDKJS(中卷)/2-4 生成器.md","localizedDate":"2024年4月12日","autoDesc":true}');export{_ as comp,E as data};
