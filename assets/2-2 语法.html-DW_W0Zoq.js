import{_ as n}from"./plugin-vue_export-helper-DlAUqK2U.js";import{o as s,c as a,a as p}from"./app-BPFsuHku.js";const t={},o=p(`<h1 id="语法" tabindex="-1"><a class="header-anchor" href="#语法"><span>语法</span></a></h1><h2 id="块作用域声明" tabindex="-1"><a class="header-anchor" href="#块作用域声明"><span>块作用域声明</span></a></h2><p>你很可能已经了解，JavaScript 中变量作用域的基本单元一直是 function。如果需要创建一个块作用域，最普遍的方法除了普通的函数声明之外，就是立即调用函数表达式 (IIFE)。</p><div class="language-javascript" data-ext="js" data-title="js"><pre class="language-javascript"><code><span class="token punctuation">(</span><span class="token keyword">function</span> <span class="token constant">IIFE</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
  <span class="token keyword">var</span> a <span class="token operator">=</span> <span class="token number">3</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre></div><h3 id="let-声明" tabindex="-1"><a class="header-anchor" href="#let-声明"><span>let 声明</span></a></h3><div class="language-javascript" data-ext="js" data-title="js"><pre class="language-javascript"><code><span class="token keyword">var</span> a <span class="token operator">=</span> <span class="token number">2</span><span class="token punctuation">;</span>
<span class="token punctuation">{</span>
  <span class="token keyword">let</span> a <span class="token operator">=</span> <span class="token number">3</span><span class="token punctuation">;</span>
  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span> a <span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 3</span>
<span class="token punctuation">}</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span> a <span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 2</span>
</code></pre></div><p>过早访问 let / const 声明的引用导致的这个 ReferenceError 严格说叫作临时死亡区(Temporal Dead Zone，TDZ)错误，意味着你在访问一个已经声明但没有初始化的变量。</p><div class="language-javascript" data-ext="js" data-title="js"><pre class="language-javascript"><code><span class="token punctuation">{</span>
  <span class="token keyword">typeof</span> a<span class="token punctuation">;</span> <span class="token comment">// undefined</span>
  <span class="token comment">// b声明了，但还处于TDZ</span>
  <span class="token keyword">typeof</span> b<span class="token punctuation">;</span> <span class="token comment">// ReferenceError</span>
  <span class="token keyword">let</span> b<span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre></div><h3 id="const-声明" tabindex="-1"><a class="header-anchor" href="#const-声明"><span>const 声明</span></a></h3><p><code>const</code> 变量的值在声明时设定之后就不允许改变。const 声明必须要有显式的初始化。如果需要一个值为 undefined 的常量，就要声明 <code>const a = undefined</code>。</p><p>**常量不是对这个值本身的限制，而是对赋值的那个变量的限制。**换句话说，这个值并没有因为 const 被锁定或者不可变，只是赋值本身不可变。如果这个值是复杂值，比如对象或者数组，其内容仍然是可以修改的。</p><div class="language-javascript" data-ext="js" data-title="js"><pre class="language-javascript"><code><span class="token punctuation">{</span>
  <span class="token keyword">const</span> arr <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
  arr<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// [1, 2, 3]</span>
  arr <span class="token operator">=</span> <span class="token number">4</span><span class="token punctuation">;</span> <span class="token comment">// TypeError</span>
<span class="token punctuation">}</span>
</code></pre></div><p>关于“是否使用 const，什么时候使用const”的问题，这里建议<strong>只对你有意表明或强调不会改变的变量使用 const</strong>。</p><h3 id="块作用域函数" tabindex="-1"><a class="header-anchor" href="#块作用域函数"><span>块作用域函数</span></a></h3><p>从 ES6 开始，块内声明的函数，其作用域在这个块内。但是要注意函数声明提升的问题。</p><div class="language-javascript" data-ext="js" data-title="js"><pre class="language-javascript"><code><span class="token punctuation">{</span>
  <span class="token function">foo</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token keyword">function</span> <span class="token function">foo</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token punctuation">}</span> <span class="token comment">// 被提升到当前块作用域前部</span>
<span class="token punctuation">}</span>
<span class="token function">foo</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// ReferenceError</span>
</code></pre></div><p>考虑以下代码：</p><div class="language-javascript" data-ext="js" data-title="js"><pre class="language-javascript"><code><span class="token keyword">if</span><span class="token punctuation">(</span>something<span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token keyword">function</span> <span class="token function">foo</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span>
<span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>
  <span class="token keyword">function</span> <span class="token function">foo</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
<span class="token function">foo</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// ??</span>
</code></pre></div><p>在前 ES6 环境中，不管 something 的值是什么，foo() 都会打印出2，因为两个函数声明都被提升到了块外，第二个总是会胜出。 而在 ES6 中，最后一行会抛出一个 ReferenceError。</p><h2 id="spread-rest" tabindex="-1"><a class="header-anchor" href="#spread-rest"><span>spread / rest</span></a></h2><p>ES6引入了一个新的运算符<code>...</code>，称为 <em>spread / rest （展开 / 收集）</em> 运算符，它的作用取决于它的用法。</p><ul><li><p>spread展开</p><p>当 <code>...</code> 用在任何 iterable，它会把这个变量展开为各个独立的值。</p><div class="language-javascript" data-ext="js" data-title="js"><pre class="language-javascript"><code><span class="token keyword">function</span> <span class="token function">foo</span><span class="token punctuation">(</span><span class="token parameter">x<span class="token punctuation">,</span>y<span class="token punctuation">,</span>z</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span> x<span class="token punctuation">,</span> y<span class="token punctuation">,</span> z <span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
<span class="token function">foo</span><span class="token punctuation">(</span> <span class="token operator">...</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">]</span> <span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 1 2 3</span>
</code></pre></div></li><li><p>rest收集</p><p><code>...</code> 的另外一种常见用法基本上可以被看作反向的行为，与把一个值展开不同，<code>...</code> 把一系列值收集到一起成为一个数组。</p><div class="language-javascript" data-ext="js" data-title="js"><pre class="language-javascript"><code><span class="token keyword">function</span> <span class="token function">foo</span><span class="token punctuation">(</span><span class="token parameter">x<span class="token punctuation">,</span> y<span class="token punctuation">,</span> <span class="token operator">...</span>z</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span> x<span class="token punctuation">,</span> y<span class="token punctuation">,</span> z <span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
<span class="token function">foo</span><span class="token punctuation">(</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">,</span> <span class="token number">5</span> <span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 1 2 [3, 4, 5]</span>

<span class="token keyword">function</span> <span class="token function">foo</span><span class="token punctuation">(</span><span class="token parameter"><span class="token operator">...</span>args</span><span class="token punctuation">)</span> <span class="token punctuation">{</span> <span class="token comment">// arguments类数组的可靠用法</span>
  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span> args <span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
<span class="token function">foo</span><span class="token punctuation">(</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">,</span> <span class="token number">5</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// [1,2,3,4,5]</span>
</code></pre></div></li></ul><p><em><code>...</code> 运算符可以很好的运用到数组的展开、收集操作中，但是对对象的操作仍在提案阶段。</em></p><h2 id="默认参数值" tabindex="-1"><a class="header-anchor" href="#默认参数值"><span>默认参数值</span></a></h2><p>ES6之前的默认参数写法：</p><div class="language-javascript" data-ext="js" data-title="js"><pre class="language-javascript"><code><span class="token keyword">function</span> <span class="token function">foo</span><span class="token punctuation">(</span><span class="token parameter">x<span class="token punctuation">,</span> y</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  x <span class="token operator">=</span> x <span class="token operator">||</span> <span class="token number">11</span><span class="token punctuation">;</span>
  y <span class="token operator">=</span> y <span class="token operator">||</span> <span class="token number">31</span><span class="token punctuation">;</span>
  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span> x <span class="token operator">+</span> y <span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre></div><p>上面这种写法非常不可靠，特别是当参数值有0、null、false、undefined之类的“假值”时，很容易出错，当然可以在函数起始位置做大量的判断来容错，但是这样不方便而且容易遗漏。</p><div class="hint-container info"><p class="hint-container-title">相关信息</p><p>这里应用了一个很重要的需要记住的 JavaScrpt 设计原则：undefined 意味着缺失。也就是说，undefined 和缺失是无法区别的，至少对于函数参数来说是如此。</p></div><p>ES6默认参数：</p><div class="language-javascript" data-ext="js" data-title="js"><pre class="language-javascript"><code><span class="token keyword">function</span> <span class="token function">foo</span><span class="token punctuation">(</span><span class="token parameter">x <span class="token operator">=</span> <span class="token number">11</span><span class="token punctuation">,</span> y <span class="token operator">=</span> <span class="token number">31</span></span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span> x <span class="token operator">+</span> y <span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
<span class="token function">foo</span><span class="token punctuation">(</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">42</span> <span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 42</span>
<span class="token function">foo</span><span class="token punctuation">(</span> <span class="token number">5</span> <span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 36</span>
<span class="token function">foo</span><span class="token punctuation">(</span> <span class="token keyword">undefined</span><span class="token punctuation">,</span> <span class="token number">6</span> <span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 17 丢了undefined</span>
<span class="token function">foo</span><span class="token punctuation">(</span> <span class="token keyword">null</span><span class="token punctuation">,</span> <span class="token number">6</span> <span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 5 null被强制转换为0</span>
</code></pre></div><h3 id="默认值表达式" tabindex="-1"><a class="header-anchor" href="#默认值表达式"><span>默认值表达式</span></a></h3><p>函数默认值可以不只是简单值，它们可以是任意合法表达式，甚至是函数调用。</p><div class="language-javascript" data-ext="js" data-title="js"><pre class="language-javascript"><code><span class="token keyword">function</span> <span class="token function">bar</span><span class="token punctuation">(</span><span class="token parameter">val</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span> <span class="token string">&quot;bar called!&quot;</span> <span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token keyword">return</span> y <span class="token operator">+</span> val<span class="token punctuation">;</span>
<span class="token punctuation">}</span>
<span class="token keyword">function</span> <span class="token function">foo</span><span class="token punctuation">(</span><span class="token parameter">x <span class="token operator">=</span> y <span class="token operator">+</span> <span class="token number">3</span><span class="token punctuation">,</span> z <span class="token operator">=</span> <span class="token function">bar</span><span class="token punctuation">(</span> x <span class="token punctuation">)</span></span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span> x<span class="token punctuation">,</span> z <span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
<span class="token keyword">var</span> y <span class="token operator">=</span> <span class="token number">5</span><span class="token punctuation">;</span>
<span class="token function">foo</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// bar called 8 13</span>
<span class="token function">foo</span><span class="token punctuation">(</span> <span class="token number">10</span> <span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// bar called 10 15</span>

y <span class="token operator">=</span> <span class="token number">6</span><span class="token punctuation">;</span>
<span class="token function">foo</span><span class="token punctuation">(</span> <span class="token keyword">undefined</span><span class="token punctuation">,</span> <span class="token number">10</span> <span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 9 10</span>
</code></pre></div><p>可以看到，默认值表达式是惰性求值的，这意味着它们只在需要的时候运行——也就是说，是在参数的值省略或者为 undefined 的候。</p><p>这里有一个微妙的细节，<strong>注意函数声明中形式参数是在它们自己的作用域中(可以看作是函数声明的()的作用域中)，而不是在函数体作用域中</strong>。这意味着在默认值表达式中的标识符引用首先匹配到形式参数作用域，然后才会搜索外层作用域。</p><div class="language-javascript" data-ext="js" data-title="js"><pre class="language-javascript"><code><span class="token keyword">var</span> w <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">,</span> z <span class="token operator">=</span> <span class="token number">2</span><span class="token punctuation">;</span>
<span class="token comment">// 从左到右计算默认值，顺序为x、y、z</span>
<span class="token keyword">function</span> <span class="token function">foo</span><span class="token punctuation">(</span> <span class="token parameter">x <span class="token operator">=</span> w <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">,</span> y <span class="token operator">=</span> x <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">,</span> z <span class="token operator">=</span> z <span class="token operator">+</span> <span class="token number">1</span></span> <span class="token punctuation">)</span> <span class="token punctuation">{</span>
  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span> x<span class="token punctuation">,</span> y<span class="token punctuation">,</span> z <span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
<span class="token function">foo</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// ReferenceError</span>
</code></pre></div><p>w + 1 默认值表达式中的 w 在形式参数列表作用域中寻找 w，但是没有找到，所以就使用外层作用域的w。</p><p>接下来，x + 1默认值表达式中的x找到了形式参数作用域中的x，很幸运这里 x 已经初始化了，所以对 y 的赋值可以正常工作。</p><p>但是，z + 1中的z发现z是一个此刻还没初始化的参数变量，所以它<strong>永远不会试图从外层作用域寻找 z</strong>。</p><p>正如之前章节提到的，ES6 引入了 TDZ，它防止变量在未初始化的状态下被访问。<strong>ES6函数声明的括号范围内形成了TDZ</strong>， 因此，z + 1 会抛出一个 ReferenceError 。</p><h2 id="解构" tabindex="-1"><a class="header-anchor" href="#解构"><span>解构</span></a></h2><p>ES6 为解构新增了一个专门语法，专用于数组解构和对象解构。</p><p>在解构赋值中，等号左侧为 <em>模式</em>，右侧为 <em>被解构的对象</em>。</p><div class="language-javascript" data-ext="js" data-title="js"><pre class="language-javascript"><code><span class="token keyword">var</span> <span class="token punctuation">[</span> a<span class="token punctuation">,</span> b<span class="token punctuation">,</span> cAlias <span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
<span class="token keyword">var</span> <span class="token punctuation">{</span> x<span class="token punctuation">,</span> y<span class="token punctuation">,</span> <span class="token literal-property property">z</span><span class="token operator">:</span> zAlias <span class="token punctuation">}</span> <span class="token operator">=</span> <span class="token punctuation">{</span> <span class="token literal-property property">x</span><span class="token operator">:</span> <span class="token number">4</span><span class="token punctuation">,</span> <span class="token literal-property property">y</span><span class="token operator">:</span> <span class="token number">5</span><span class="token punctuation">,</span> <span class="token literal-property property">z</span><span class="token operator">:</span> <span class="token number">6</span> <span class="token punctuation">}</span><span class="token punctuation">;</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span> a<span class="token punctuation">,</span> b<span class="token punctuation">,</span> cAlias <span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 1 2 3</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span> x<span class="token punctuation">,</span> y<span class="token punctuation">,</span> zAlias <span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 4 5 6</span>
</code></pre></div><p>实际上，模式中并不必须是变量标识符。任何合法的赋值表达式都可以。</p><div class="language-javascript" data-ext="js" data-title="js"><pre class="language-javascript"><code><span class="token keyword">var</span> o <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">;</span>
<span class="token punctuation">[</span>o<span class="token punctuation">.</span>a<span class="token punctuation">,</span> o<span class="token punctuation">.</span>b<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
<span class="token punctuation">(</span> <span class="token punctuation">{</span> <span class="token literal-property property">x</span><span class="token operator">:</span> o<span class="token punctuation">.</span>x<span class="token punctuation">,</span> <span class="token literal-property property">y</span><span class="token operator">:</span> o<span class="token punctuation">.</span>y<span class="token punctuation">}</span> <span class="token operator">=</span> <span class="token punctuation">{</span> <span class="token literal-property property">x</span><span class="token operator">:</span> <span class="token number">4</span><span class="token punctuation">,</span> <span class="token literal-property property">y</span><span class="token operator">:</span> <span class="token number">5</span> <span class="token punctuation">}</span> <span class="token punctuation">)</span><span class="token punctuation">;</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span> o <span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// { a: 1, b: 2, x: 4, y: 5 }</span>
</code></pre></div><p>再举个稍微复杂的例子：</p><div class="language-javascript" data-ext="js" data-title="js"><pre class="language-javascript"><code><span class="token keyword">var</span> a1 <span class="token operator">=</span> <span class="token punctuation">[</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span> <span class="token punctuation">]</span><span class="token punctuation">,</span>
o2 <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">;</span>
<span class="token punctuation">[</span> o2<span class="token punctuation">.</span>a<span class="token punctuation">,</span> o2<span class="token punctuation">.</span>b<span class="token punctuation">,</span> o2<span class="token punctuation">.</span>c <span class="token punctuation">]</span> <span class="token operator">=</span> a1<span class="token punctuation">;</span> <span class="token comment">// 相当于 o2.a = a1[0]</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span> o2<span class="token punctuation">.</span>a<span class="token punctuation">,</span> o2<span class="token punctuation">.</span>b<span class="token punctuation">,</span> o2<span class="token punctuation">.</span>c <span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 1 2 3</span>
</code></pre></div><div class="language-javascript" data-ext="js" data-title="js"><pre class="language-javascript"><code><span class="token keyword">var</span> a1 <span class="token operator">=</span> <span class="token punctuation">[</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span> <span class="token punctuation">]</span><span class="token punctuation">,</span>
a2 <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
<span class="token punctuation">[</span> a2<span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">,</span> a2<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">,</span> a2<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span> <span class="token punctuation">]</span> <span class="token operator">=</span> a1<span class="token punctuation">;</span> <span class="token comment">// 相当于 a2[2] = a1[0]...</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span> a2 <span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// [2,3,1]</span>

<span class="token keyword">var</span> x <span class="token operator">=</span> <span class="token number">10</span><span class="token punctuation">,</span> y <span class="token operator">=</span> <span class="token number">20</span><span class="token punctuation">;</span>
<span class="token punctuation">[</span> y<span class="token punctuation">,</span> x <span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token punctuation">[</span> x<span class="token punctuation">,</span> y <span class="token punctuation">]</span><span class="token punctuation">;</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span> x<span class="token punctuation">,</span> y <span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 20 10</span>
</code></pre></div><h3 id="重复赋值" tabindex="-1"><a class="header-anchor" href="#重复赋值"><span>重复赋值</span></a></h3><p>对象解构形式允许多次列出同一个源属性(持有值类型任意)。</p><div class="language-javascript" data-ext="js" data-title="js"><pre class="language-javascript"><code><span class="token keyword">var</span> <span class="token punctuation">{</span> <span class="token literal-property property">a</span><span class="token operator">:</span> <span class="token punctuation">{</span> <span class="token literal-property property">x</span><span class="token operator">:</span> <span class="token constant">X</span><span class="token punctuation">,</span> <span class="token literal-property property">x</span><span class="token operator">:</span> <span class="token constant">Y</span> <span class="token punctuation">}</span><span class="token punctuation">,</span> a <span class="token punctuation">}</span> <span class="token operator">=</span> <span class="token punctuation">{</span> <span class="token literal-property property">a</span><span class="token operator">:</span> <span class="token punctuation">{</span> <span class="token literal-property property">x</span><span class="token operator">:</span> <span class="token number">1</span> <span class="token punctuation">}</span> <span class="token punctuation">}</span><span class="token punctuation">;</span>
<span class="token constant">X</span><span class="token punctuation">;</span>  <span class="token comment">// 1</span>
<span class="token constant">Y</span><span class="token punctuation">;</span>  <span class="token comment">// 1</span>
a<span class="token punctuation">;</span>  <span class="token comment">// { x: 1 }</span>

<span class="token punctuation">(</span> <span class="token punctuation">{</span> <span class="token literal-property property">a</span><span class="token operator">:</span> <span class="token constant">X</span><span class="token punctuation">,</span> <span class="token literal-property property">a</span><span class="token operator">:</span> <span class="token constant">Y</span><span class="token punctuation">,</span> <span class="token literal-property property">a</span><span class="token operator">:</span> <span class="token punctuation">[</span> <span class="token constant">Z</span> <span class="token punctuation">]</span> <span class="token punctuation">}</span> <span class="token operator">=</span> <span class="token punctuation">{</span> <span class="token literal-property property">a</span><span class="token operator">:</span> <span class="token punctuation">[</span> <span class="token number">1</span> <span class="token punctuation">]</span> <span class="token punctuation">}</span> <span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// X,Y指向同一数组[1]</span>
<span class="token constant">X</span><span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span> <span class="token number">2</span> <span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token constant">Y</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">10</span><span class="token punctuation">;</span>
<span class="token constant">X</span><span class="token punctuation">;</span>  <span class="token comment">// [10,2]</span>
<span class="token constant">Y</span><span class="token punctuation">;</span>  <span class="token comment">// [10,2]</span>
<span class="token constant">Z</span><span class="token punctuation">;</span>  <span class="token comment">// 1</span>
</code></pre></div><p>需要注意的一点是，对象或者数组解构的赋值表达式的完成值是所有右侧对象 / 数组的值。</p><div class="language-javascript" data-ext="js" data-title="js"><pre class="language-javascript"><code><span class="token keyword">var</span> o <span class="token operator">=</span> <span class="token punctuation">{</span> <span class="token literal-property property">a</span><span class="token operator">:</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token literal-property property">b</span><span class="token operator">:</span><span class="token number">2</span><span class="token punctuation">,</span> <span class="token literal-property property">c</span><span class="token operator">:</span><span class="token number">3</span> <span class="token punctuation">}</span><span class="token punctuation">,</span>
        a<span class="token punctuation">,</span> b<span class="token punctuation">,</span> c<span class="token punctuation">,</span> p<span class="token punctuation">;</span>
p <span class="token operator">=</span> <span class="token punctuation">{</span> a<span class="token punctuation">,</span> b<span class="token punctuation">,</span> c <span class="token punctuation">}</span> <span class="token operator">=</span> o<span class="token punctuation">;</span> <span class="token comment">// p 赋值为对象 o 的引用，而不是 a、b、c 的值之一</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span> a<span class="token punctuation">,</span> b<span class="token punctuation">,</span> c <span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 1 2 3</span>
p <span class="token operator">===</span> o<span class="token punctuation">;</span> <span class="token comment">// true</span>
</code></pre></div><p>##解构赋值的其他用法</p><p>对于数组解构赋值和对象解构赋值来说，你不需要把存在的所有值都用来赋值。</p><div class="language-javascript" data-ext="js" data-title="js"><pre class="language-javascript"><code><span class="token comment">// 不需要的值可以省略，多余的值被赋值为undefined</span>
<span class="token keyword">var</span> <span class="token punctuation">[</span><span class="token punctuation">,</span><span class="token punctuation">,</span>c<span class="token punctuation">,</span>d<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
<span class="token keyword">var</span> <span class="token punctuation">{</span> w<span class="token punctuation">,</span> z <span class="token punctuation">}</span> <span class="token operator">=</span> <span class="token punctuation">{</span> <span class="token literal-property property">x</span><span class="token operator">:</span><span class="token number">4</span><span class="token punctuation">,</span> <span class="token literal-property property">y</span><span class="token operator">:</span><span class="token number">5</span><span class="token punctuation">,</span> <span class="token literal-property property">z</span><span class="token operator">:</span><span class="token number">6</span> <span class="token punctuation">}</span><span class="token punctuation">;</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span> c<span class="token punctuation">,</span> z <span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 3 6</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span> d<span class="token punctuation">,</span> w <span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// undefined undefined</span>
</code></pre></div><p>除了在函数声明中的 gather/rest 用法，<code>...</code> 也可以执行解构赋值同样的动作。</p><div class="language-javascript" data-ext="js" data-title="js"><pre class="language-javascript"><code><span class="token keyword">var</span> <span class="token punctuation">[</span> a<span class="token punctuation">,</span> <span class="token operator">...</span>c <span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span> a<span class="token punctuation">,</span> c <span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 1 [2, 3]</span>
</code></pre></div><h3 id="默认值赋值" tabindex="-1"><a class="header-anchor" href="#默认值赋值"><span>默认值赋值</span></a></h3><p>使用与前面默认函数参数值类似的语法，解构也可以提供默认值。</p><div class="language-javascript" data-ext="js" data-title="js"><pre class="language-javascript"><code><span class="token keyword">var</span> <span class="token punctuation">{</span> x<span class="token punctuation">,</span> y<span class="token punctuation">,</span> <span class="token literal-property property">w</span><span class="token operator">:</span> <span class="token constant">WW</span> <span class="token operator">=</span> <span class="token number">20</span> <span class="token punctuation">}</span> <span class="token operator">=</span> <span class="token punctuation">{</span> <span class="token literal-property property">x</span><span class="token operator">:</span> <span class="token number">4</span><span class="token punctuation">,</span> <span class="token literal-property property">y</span><span class="token operator">:</span> <span class="token number">5</span> <span class="token punctuation">}</span><span class="token punctuation">;</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token constant">WW</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 20</span>

<span class="token keyword">var</span> <span class="token punctuation">{</span> x<span class="token punctuation">,</span> w <span class="token operator">=</span> <span class="token punctuation">{</span> <span class="token literal-property property">a</span><span class="token operator">:</span> <span class="token number">1</span> <span class="token punctuation">}</span><span class="token punctuation">}</span> <span class="token operator">=</span> <span class="token punctuation">{</span> <span class="token literal-property property">x</span><span class="token operator">:</span> <span class="token number">1</span> <span class="token punctuation">}</span><span class="token punctuation">;</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>w<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// { a: 1 }</span>
</code></pre></div><p><em>注意，如果使用对象作为默认值，代码上很可能绕晕（对象和解构都使用花括号），要谨慎使用。</em></p><h3 id="嵌套解构" tabindex="-1"><a class="header-anchor" href="#嵌套解构"><span>嵌套解构</span></a></h3><p>如果解构的值中有嵌套的对象或者数组，也可以解构这些嵌套的值。</p><div class="language-javascript" data-ext="js" data-title="js"><pre class="language-javascript"><code><span class="token keyword">var</span> App <span class="token operator">=</span> <span class="token punctuation">{</span>
  <span class="token literal-property property">model</span><span class="token operator">:</span> <span class="token punctuation">{</span>
    <span class="token function-variable function">User</span><span class="token operator">:</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span> <span class="token punctuation">.</span><span class="token punctuation">.</span> <span class="token punctuation">}</span>
  <span class="token punctuation">}</span>
<span class="token punctuation">}</span><span class="token punctuation">;</span>
<span class="token comment">// 不用: var User = App.model.User;</span>
<span class="token keyword">var</span> <span class="token punctuation">{</span> <span class="token literal-property property">model</span><span class="token operator">:</span> <span class="token punctuation">{</span> User <span class="token punctuation">}</span> <span class="token punctuation">}</span> <span class="token operator">=</span> App<span class="token punctuation">;</span>
</code></pre></div><h3 id="解构参数" tabindex="-1"><a class="header-anchor" href="#解构参数"><span>解构参数</span></a></h3><p>解构赋值也可以用在函数的参数上：</p><div class="language-javascript" data-ext="js" data-title="js"><pre class="language-javascript"><code><span class="token keyword">function</span> <span class="token function">f1</span><span class="token punctuation">(</span><span class="token parameter"><span class="token punctuation">[</span> x<span class="token operator">=</span><span class="token number">2</span><span class="token punctuation">,</span> y<span class="token operator">=</span><span class="token number">3</span><span class="token punctuation">,</span> z <span class="token punctuation">]</span></span><span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token punctuation">}</span>
<span class="token keyword">function</span> <span class="token function">f2</span><span class="token punctuation">(</span><span class="token parameter"><span class="token punctuation">[</span> x<span class="token punctuation">,</span> y<span class="token punctuation">,</span> <span class="token operator">...</span>z<span class="token punctuation">]</span><span class="token punctuation">,</span> w</span><span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token punctuation">}</span>
<span class="token keyword">function</span> <span class="token function">f3</span><span class="token punctuation">(</span><span class="token parameter"><span class="token punctuation">[</span> x<span class="token punctuation">,</span> y<span class="token punctuation">,</span> <span class="token operator">...</span>z<span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token operator">...</span>w</span><span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token punctuation">}</span>
<span class="token keyword">function</span> <span class="token function">f4</span><span class="token punctuation">(</span><span class="token parameter"><span class="token punctuation">{</span> <span class="token literal-property property">x</span><span class="token operator">:</span> <span class="token constant">X</span><span class="token punctuation">,</span> y <span class="token punctuation">}</span></span><span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token punctuation">}</span>
<span class="token keyword">function</span> <span class="token function">f5</span><span class="token punctuation">(</span><span class="token parameter"><span class="token punctuation">{</span> <span class="token literal-property property">x</span><span class="token operator">:</span> <span class="token constant">X</span> <span class="token operator">=</span> <span class="token number">10</span><span class="token punctuation">,</span> y <span class="token operator">=</span> <span class="token number">20</span> <span class="token punctuation">}</span></span><span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token punctuation">}</span>
<span class="token keyword">function</span> <span class="token function">f6</span><span class="token punctuation">(</span><span class="token parameter"><span class="token punctuation">{</span> x <span class="token operator">=</span> <span class="token number">10</span> <span class="token punctuation">}</span> <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">,</span> <span class="token punctuation">{</span> y <span class="token punctuation">}</span> <span class="token operator">=</span> <span class="token punctuation">{</span> <span class="token literal-property property">y</span><span class="token operator">:</span> <span class="token number">10</span> <span class="token punctuation">}</span></span><span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token punctuation">}</span>

<span class="token function">f3</span><span class="token punctuation">(</span> <span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// undefined undefined [] []</span>
<span class="token function">f3</span><span class="token punctuation">(</span> <span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">,</span><span class="token number">4</span><span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token number">5</span><span class="token punctuation">,</span> <span class="token number">6</span> <span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 1 2 [3,4] [5,6]</span>
</code></pre></div><h4 id="解构默认值-参数默认值" tabindex="-1"><a class="header-anchor" href="#解构默认值-参数默认值"><span>解构默认值+参数默认值</span></a></h4><div class="language-javascript" data-ext="js" data-title="js"><pre class="language-javascript"><code><span class="token keyword">function</span> <span class="token function">f6</span><span class="token punctuation">(</span><span class="token parameter"><span class="token punctuation">{</span> x <span class="token operator">=</span> <span class="token number">10</span> <span class="token punctuation">}</span> <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">,</span> <span class="token punctuation">{</span> y <span class="token punctuation">}</span> <span class="token operator">=</span> <span class="token punctuation">{</span> <span class="token literal-property property">y</span><span class="token operator">:</span> <span class="token number">10</span> <span class="token punctuation">}</span></span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span> x<span class="token punctuation">,</span> y <span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
<span class="token function">f6</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 10 10</span>
<span class="token function">f6</span><span class="token punctuation">(</span><span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">,</span> <span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 10 undefined</span>
</code></pre></div><h4 id="解构-重组-实现配置合并" tabindex="-1"><a class="header-anchor" href="#解构-重组-实现配置合并"><span>解构 + 重组 实现配置合并</span></a></h4><p>假设你有一个名为 config 的对象，已经有了一部分值，但可能不是全部，现在你想要把所有空槽的位置用默认值设定，但又不想覆盖已经存在的部分：</p><div class="language-javascript" data-ext="js" data-title="js"><pre class="language-javascript"><code><span class="token keyword">var</span> defaults <span class="token operator">=</span> <span class="token punctuation">{</span>
  <span class="token literal-property property">options</span><span class="token operator">:</span> <span class="token punctuation">{</span>
     <span class="token literal-property property">remove</span><span class="token operator">:</span> <span class="token boolean">true</span><span class="token punctuation">,</span>
     <span class="token literal-property property">enable</span><span class="token operator">:</span> <span class="token boolean">false</span><span class="token punctuation">,</span>
     <span class="token literal-property property">instance</span><span class="token operator">:</span> <span class="token punctuation">{</span><span class="token punctuation">}</span>
  <span class="token punctuation">}</span><span class="token punctuation">,</span>
  <span class="token literal-property property">log</span><span class="token operator">:</span> <span class="token punctuation">{</span>
    <span class="token literal-property property">warn</span><span class="token operator">:</span> <span class="token boolean">true</span><span class="token punctuation">,</span>
    <span class="token literal-property property">error</span><span class="token operator">:</span> <span class="token boolean">true</span>
  <span class="token punctuation">}</span>
<span class="token punctuation">}</span><span class="token punctuation">;</span>

<span class="token comment">// 用以下配置替换defaults的默认配置，不提供项的不替换</span>
<span class="token keyword">var</span> config <span class="token operator">=</span> <span class="token punctuation">{</span>
  <span class="token literal-property property">options</span><span class="token operator">:</span> <span class="token punctuation">{</span>
     <span class="token literal-property property">remove</span><span class="token operator">:</span> <span class="token boolean">false</span><span class="token punctuation">,</span>
     <span class="token literal-property property">instance</span><span class="token operator">:</span> <span class="token keyword">null</span>
  <span class="token punctuation">}</span>
<span class="token punctuation">}</span><span class="token punctuation">;</span>
</code></pre></div><p>不用解构默认值的做法：</p><div class="language-javascript" data-ext="js" data-title="js"><pre class="language-javascript"><code><span class="token comment">// 手动判断</span>
config<span class="token punctuation">.</span>options <span class="token operator">=</span> config<span class="token punctuation">.</span>options <span class="token operator">||</span> <span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">;</span>
config<span class="token punctuation">.</span>options<span class="token punctuation">.</span>remove <span class="token operator">=</span> <span class="token punctuation">(</span>config<span class="token punctuation">.</span>options<span class="token punctuation">.</span>remove <span class="token operator">!==</span> <span class="token keyword">undefined</span><span class="token punctuation">)</span> <span class="token operator">?</span>
  config<span class="token punctuation">.</span>options<span class="token punctuation">.</span>remove <span class="token operator">:</span> defaults<span class="token punctuation">.</span>options<span class="token punctuation">.</span>remove<span class="token punctuation">;</span>
config<span class="token punctuation">.</span>options<span class="token punctuation">.</span>enable <span class="token operator">=</span> <span class="token punctuation">(</span>config<span class="token punctuation">.</span>options<span class="token punctuation">.</span>enable <span class="token operator">!==</span> <span class="token keyword">undefined</span><span class="token punctuation">)</span> <span class="token operator">?</span>
  config<span class="token punctuation">.</span>options<span class="token punctuation">.</span>enable <span class="token operator">:</span> defaults<span class="token punctuation">.</span>options<span class="token punctuation">.</span>enable<span class="token punctuation">;</span>
<span class="token comment">// ...</span>

<span class="token comment">// Object.assign</span>
config <span class="token operator">=</span> Object<span class="token punctuation">.</span><span class="token function">assign</span><span class="token punctuation">(</span> <span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">,</span> defaults<span class="token punctuation">,</span> config <span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token comment">// 写一个常见的merge函数</span>
<span class="token keyword">let</span> mergeOption <span class="token operator">=</span> <span class="token function">merge</span><span class="token punctuation">(</span>defaults<span class="token punctuation">,</span> config<span class="token punctuation">)</span>
</code></pre></div><p><code>Object.assign</code> 存在一个严重问题！ <code>Object.assign</code> 是浅操作，也就是说在复制 defaults.options 的时候，只会复制对象引用，而不会深层复制这个对象的属性到 config.options 对象。需要在对象树的所有层次(某种“递归”)上应用 <code>Object. assign</code> 才能得到期望的深层克隆。</p><p>运用解构 + 重组：</p><div class="language-javascript" data-ext="js" data-title="js"><pre class="language-javascript"><code><span class="token comment">// 把defaults合并进config</span>
<span class="token punctuation">{</span> <span class="token comment">// 悬置的临时变量会污染作用域。所以，我们用一个{ }把这块包起来成为 一个块作用域</span>
  <span class="token comment">// (带默认值赋值的)解构</span>
  <span class="token keyword">let</span> <span class="token punctuation">{</span>
    <span class="token literal-property property">options</span><span class="token operator">:</span> <span class="token punctuation">{</span>
      remove <span class="token operator">=</span> defaults<span class="token punctuation">.</span>options<span class="token punctuation">.</span>remove<span class="token punctuation">,</span>
      enable <span class="token operator">=</span> defaults<span class="token punctuation">.</span>options<span class="token punctuation">.</span>enable<span class="token punctuation">,</span>
      instance <span class="token operator">=</span> defaults<span class="token punctuation">.</span>options<span class="token punctuation">.</span>instance
    <span class="token punctuation">}</span> <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">,</span>
    <span class="token literal-property property">log</span><span class="token operator">:</span> <span class="token punctuation">{</span>
      warn <span class="token operator">=</span> defaults<span class="token punctuation">.</span>log<span class="token punctuation">.</span>warn<span class="token punctuation">,</span>
      error <span class="token operator">=</span> defaults<span class="token punctuation">.</span>log<span class="token punctuation">.</span>error
    <span class="token punctuation">}</span> <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token punctuation">}</span>
  <span class="token punctuation">}</span> <span class="token operator">=</span> config<span class="token punctuation">;</span>
  <span class="token comment">// 重组</span>
  config <span class="token operator">=</span> <span class="token punctuation">{</span>
    <span class="token literal-property property">options</span><span class="token operator">:</span> <span class="token punctuation">{</span> remove<span class="token punctuation">,</span> enable<span class="token punctuation">,</span> instance <span class="token punctuation">}</span><span class="token punctuation">,</span>
    <span class="token literal-property property">log</span><span class="token operator">:</span> <span class="token punctuation">{</span> warn<span class="token punctuation">,</span> error <span class="token punctuation">}</span>
  <span class="token punctuation">}</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>

</code></pre></div><p><em>还可以用箭头 IIFE 代替一般的 { } 块和 let 声明来实现块封装。解构 赋值 / 默认值会被放在参数列表中，而重组的过程会被放在函数体的 return 语句中。</em></p><h2 id="对象字面量拓展" tabindex="-1"><a class="header-anchor" href="#对象字面量拓展"><span>对象字面量拓展</span></a></h2><h3 id="简洁属性、方法" tabindex="-1"><a class="header-anchor" href="#简洁属性、方法"><span>简洁属性、方法</span></a></h3><div class="language-javascript" data-ext="js" data-title="js"><pre class="language-javascript"><code><span class="token keyword">var</span> foo <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>
<span class="token keyword">var</span> obj <span class="token operator">=</span> <span class="token punctuation">{</span>
  foo<span class="token punctuation">,</span>
  <span class="token function">bar</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token punctuation">}</span> <span class="token comment">// 相当于 bar: function() {}</span>
  <span class="token operator">*</span><span class="token function">baz</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre></div><p>注意一下代码，something函数不能用简洁写法：</p><div class="language-javascript" data-ext="js" data-title="js"><pre class="language-javascript"><code><span class="token keyword">function</span> <span class="token function">runSomething</span><span class="token punctuation">(</span><span class="token parameter">o</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token keyword">var</span> x <span class="token operator">=</span> Math<span class="token punctuation">.</span><span class="token function">random</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span>
      y <span class="token operator">=</span> Math<span class="token punctuation">.</span><span class="token function">random</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token keyword">return</span> o<span class="token punctuation">.</span><span class="token function">something</span><span class="token punctuation">(</span> x<span class="token punctuation">,</span> y <span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
<span class="token function">runSomething</span><span class="token punctuation">(</span> <span class="token punctuation">{</span>
  <span class="token function-variable function">something</span><span class="token operator">:</span> <span class="token keyword">function</span> <span class="token function">something</span><span class="token punctuation">(</span><span class="token parameter">x<span class="token punctuation">,</span>y</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">return</span> x <span class="token operator">&gt;</span> y
      <span class="token operator">?</span> <span class="token function">something</span><span class="token punctuation">(</span> y<span class="token punctuation">,</span> x <span class="token punctuation">)</span> <span class="token comment">// 这里需要递归</span>
    	<span class="token operator">:</span> y <span class="token operator">-</span> x<span class="token punctuation">;</span>
  <span class="token punctuation">}</span>
<span class="token punctuation">}</span> <span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre></div><p>简洁方法很方便，但是应该只在<strong>不需要它们执行递归或者事件绑定/解绑定</strong>的时候使用。</p><p>否则的话，就按照老式的<code>something: function something()</code> 方法来定义吧。</p><h3 id="计算属性名" tabindex="-1"><a class="header-anchor" href="#计算属性名"><span>计算属性名</span></a></h3><div class="language-javascript" data-ext="js" data-title="js"><pre class="language-javascript"><code><span class="token keyword">var</span> prefix <span class="token operator">=</span> <span class="token string">&#39;pre&#39;</span>
<span class="token keyword">var</span> o <span class="token operator">=</span> <span class="token punctuation">{</span>
  <span class="token punctuation">[</span>prefix <span class="token operator">+</span> <span class="token string">&#39;foo&#39;</span><span class="token punctuation">]</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">,</span>
  <span class="token punctuation">[</span>Symbol<span class="token punctuation">.</span>toStringTag<span class="token punctuation">]</span><span class="token operator">:</span> <span class="token string">&quot;really cool thing&quot;</span><span class="token punctuation">,</span>
<span class="token punctuation">}</span>
</code></pre></div><h3 id="设定-prototype" tabindex="-1"><a class="header-anchor" href="#设定-prototype"><span>设定 [[Prototype]]</span></a></h3><p>有时候在声明对象字面量的时候设定这个对象的 [[Prototype]] 是有用的。下面的用法在很多 JavaScript 引擎中已经作为非标准扩展有一段时间了，而在 ES6 中这已经标准化了：</p><div class="language-javascript" data-ext="js" data-title="js"><pre class="language-javascript"><code><span class="token keyword">var</span> proto <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token punctuation">}</span>
<span class="token keyword">var</span> o <span class="token operator">=</span> <span class="token punctuation">{</span> <span class="token literal-property property">__proto__</span><span class="token operator">:</span> proto <span class="token punctuation">}</span>
</code></pre></div><p>不推荐使用上面的方法设置对象的原型，建议使用<code>Object.setPrototypeOf(obj, proto)</code>。</p><h3 id="super-对象" tabindex="-1"><a class="header-anchor" href="#super-对象"><span>super 对象</span></a></h3><p>通常把 super 看作只与类相关。但是，鉴于 JavaScript 的原型类而非类对象的本质，super对于普通对象的简洁方法也一样有效，特性也基本相同。</p><div class="language-javascript" data-ext="js" data-title="js"><pre class="language-javascript"><code><span class="token keyword">var</span> o1 <span class="token operator">=</span> <span class="token punctuation">{</span>
  <span class="token function">foo</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span> <span class="token string">&quot;o1:foo&quot;</span> <span class="token punctuation">)</span><span class="token punctuation">;</span>
   <span class="token punctuation">}</span>
<span class="token punctuation">}</span><span class="token punctuation">;</span>
<span class="token keyword">var</span> o2 <span class="token operator">=</span> <span class="token punctuation">{</span>
  <span class="token function">foo</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token comment">// super 只允许在简洁方法中出现，而不允许在普通函数表达式属性中出现。</span>
    <span class="token comment">// 也只允许以 super.XXX 的形式(用于属性 / 方法访问)出现，而不能以 super() 的形式出现。</span>
    <span class="token keyword">super</span><span class="token punctuation">.</span><span class="token function">foo</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span> <span class="token string">&quot;o2:foo&quot;</span> <span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span>
<span class="token punctuation">}</span><span class="token punctuation">;</span>
Object<span class="token punctuation">.</span><span class="token function">setPrototypeOf</span><span class="token punctuation">(</span> o2<span class="token punctuation">,</span> o1 <span class="token punctuation">)</span><span class="token punctuation">;</span>
o2<span class="token punctuation">.</span><span class="token function">foo</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>       <span class="token comment">// o1:foo o2:foo</span>
</code></pre></div><h2 id="模板字面量" tabindex="-1"><a class="header-anchor" href="#模板字面量"><span>模板字面量</span></a></h2><p>称之为 <em>模板</em> 或许不太准确，可以将其称为 <em>插入字符串字面量（interpoliteral）</em>。</p><div class="language-javascript" data-ext="js" data-title="js"><pre class="language-javascript"><code><span class="token keyword">function</span> <span class="token function">upper</span><span class="token punctuation">(</span><span class="token parameter">s</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token keyword">return</span> s<span class="token punctuation">.</span><span class="token function">toUppercase</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
<span class="token keyword">var</span> name <span class="token operator">=</span> <span class="token string">&quot;world&quot;</span><span class="token punctuation">;</span>
<span class="token keyword">var</span> greeting <span class="token operator">=</span> <span class="token template-string"><span class="token template-punctuation string">\`</span><span class="token string">hello </span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">\${</span><span class="token function">upper</span><span class="token punctuation">(</span>name<span class="token punctuation">)</span><span class="token interpolation-punctuation punctuation">}</span></span><span class="token template-punctuation string">\`</span></span><span class="token punctuation">;</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>greeting<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// hello WORLD</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token keyword">typeof</span> greeting<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// &quot;string&quot;</span>
<span class="token comment">// 模板字符串字面量更像是IIFE，它会自动展开求值。一个模板字符串字面量的结果就是一个字符串。</span>
</code></pre></div><div class="hint-container info"><p class="hint-container-title">相关信息</p><p>插入字符串字面量中的换行(新行)会在字符串值中被保留。</p><p>在字面量值中，除非作为明确的转义序列出现，\\r 回车符(码点 U+000D)的值或者回车换行符 \\r\\n (码点 U+000D 和 U+000A)都会被标准化为 \\n 换行符(码点 U+000A)。但是别担心，这种标准化非常少见，很可能只有在复制粘贴文本到 JavaScript 文件的时候才会出现。</p></div><p>###标签模板字面量</p><div class="language-javascript" data-ext="js" data-title="js"><pre class="language-javascript"><code><span class="token keyword">function</span> <span class="token function">foo</span><span class="token punctuation">(</span><span class="token parameter">strings<span class="token punctuation">,</span> <span class="token operator">...</span>values</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span> strings <span class="token punctuation">)</span><span class="token punctuation">;</span>
  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span> values <span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>

<span class="token keyword">var</span> desc <span class="token operator">=</span> <span class="token string">&quot;awesome&quot;</span><span class="token punctuation">;</span>
foo<span class="token template-string"><span class="token template-punctuation string">\`</span><span class="token string">Everything is </span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">\${</span>desc<span class="token interpolation-punctuation punctuation">}</span></span><span class="token string">!</span><span class="token template-punctuation string">\`</span></span><span class="token punctuation">;</span>
<span class="token comment">// [ &quot;Everything is &quot;, &quot;!&quot;]</span>
<span class="token comment">// [ &quot;awesome&quot; ]</span>
</code></pre></div><p>本质上说，这是一类不需要括号的特殊函数调用。标签(tag)部分是一个要调用的函数值。实际上，它可以是任意结果为函数的表达式。</p><div class="language-javascript" data-ext="js" data-title="js"><pre class="language-javascript"><code><span class="token keyword">function</span> <span class="token function">bar</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token keyword">return</span> foo<span class="token punctuation">;</span>
<span class="token punctuation">}</span>
<span class="token function">bar</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token template-string"><span class="token template-punctuation string">\`</span><span class="token string">Everything is </span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">\${</span>desc<span class="token interpolation-punctuation punctuation">}</span></span><span class="token string">!</span><span class="token template-punctuation string">\`</span></span><span class="token punctuation">;</span>
</code></pre></div><p>那么有哪些实际应用呢？有许多高级应用已经超出了本部分的讨论范围。但是，这里还是给出了一个简单的思路用来把数字格式化为美 元表示法。</p><div class="language-javascript" data-ext="js" data-title="js"><pre class="language-javascript"><code><span class="token keyword">function</span> <span class="token function">dollabillsyall</span><span class="token punctuation">(</span><span class="token parameter">strings<span class="token punctuation">,</span> <span class="token operator">...</span>values</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token keyword">return</span> strings<span class="token punctuation">.</span><span class="token function">reduce</span><span class="token punctuation">(</span> <span class="token punctuation">(</span><span class="token parameter">s<span class="token punctuation">,</span> v<span class="token punctuation">,</span> idx</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span>idx <span class="token operator">&gt;</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
      <span class="token keyword">var</span> cur <span class="token operator">=</span> values<span class="token punctuation">[</span>idx <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
      s <span class="token operator">+=</span> <span class="token keyword">typeof</span> cur <span class="token operator">==</span> <span class="token string">&quot;number&quot;</span> <span class="token comment">// 遇到number就加个&#39;$&#39;</span>
      	<span class="token operator">?</span> <span class="token template-string"><span class="token template-punctuation string">\`</span><span class="token string">$</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">\${</span>cur<span class="token punctuation">.</span><span class="token function">toFixed</span><span class="token punctuation">(</span> <span class="token number">2</span> <span class="token punctuation">)</span><span class="token interpolation-punctuation punctuation">}</span></span><span class="token template-punctuation string">\`</span></span>
        <span class="token operator">:</span> cur<span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
    <span class="token keyword">return</span> s <span class="token operator">+</span> v<span class="token punctuation">;</span>
  <span class="token punctuation">}</span><span class="token punctuation">,</span> <span class="token string">&#39;&#39;</span> <span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
<span class="token keyword">var</span> amt1 <span class="token operator">=</span> <span class="token number">11.99</span><span class="token punctuation">;</span>
<span class="token keyword">var</span> amt2 <span class="token operator">=</span> amt1 <span class="token operator">*</span> <span class="token number">1.08</span><span class="token punctuation">;</span>
dollabillsyall<span class="token template-string"><span class="token template-punctuation string">\`</span><span class="token string">amt1: </span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">\${</span>amt1<span class="token interpolation-punctuation punctuation">}</span></span><span class="token string">, amt2: </span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">\${</span>amt2<span class="token interpolation-punctuation punctuation">}</span></span><span class="token template-punctuation string">\`</span></span> <span class="token comment">// &quot;amt1: $11.99, amt2: $12.95&quot;</span>
</code></pre></div><h4 id="原始-raw-字符串" tabindex="-1"><a class="header-anchor" href="#原始-raw-字符串"><span>原始(raw)字符串</span></a></h4><p>在前面的代码中，标签函数接收第一个名为 strings 的参数，这是一个数组。还包括了一些额外的数据：所有字符串的原始未处理版本。</p><div class="language-javascript" data-ext="js" data-title="js"><pre class="language-javascript"><code><span class="token keyword">function</span> <span class="token function">showraw</span><span class="token punctuation">(</span><span class="token parameter">strings<span class="token punctuation">,</span> <span class="token operator">...</span>values</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span> strings <span class="token punctuation">)</span><span class="token punctuation">;</span>
  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span> strings<span class="token punctuation">.</span>raw <span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
showraw<span class="token template-string"><span class="token template-punctuation string">\`</span><span class="token string">Hello\\nWorld</span><span class="token template-punctuation string">\`</span></span><span class="token punctuation">;</span>
<span class="token comment">// [ &quot;Hello</span>
<span class="token comment">// World&quot; ]</span>
<span class="token comment">// [ &quot;Hello\\nWorld&quot; ]</span>
</code></pre></div><p>原始版本的值保留了原始的转义码 \\n 序列(\\ 和 n 是独立的字符)，而处理过的版本把它当作是一个单独的换行符。二者都会应用前面提到过的行结束标准化过程。</p><p>ES6 提供了一个内建函数可以用作字符串字面量标签：String.raw(..)。它就是传出 strings 的原始版本</p><div class="language-javascript" data-ext="js" data-title="js"><pre class="language-javascript"><code>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span> <span class="token template-string"><span class="token template-punctuation string">\`</span><span class="token string">Hello\\nWorld</span><span class="token template-punctuation string">\`</span></span> <span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token comment">// Hello</span>
<span class="token comment">// World</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span> String<span class="token punctuation">.</span>raw<span class="token template-string"><span class="token template-punctuation string">\`</span><span class="token string">Hello\\nWorld</span><span class="token template-punctuation string">\`</span></span> <span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token comment">// Hello\\nWorld</span>
String<span class="token punctuation">.</span>raw<span class="token template-string"><span class="token template-punctuation string">\`</span><span class="token string">Hello\\nWorld</span><span class="token template-punctuation string">\`</span></span><span class="token punctuation">.</span>length<span class="token punctuation">;</span>
<span class="token comment">// 12</span>
</code></pre></div><p>字符串字面量标签的其他应用包括全球化、本地化等的特殊处理。</p><h2 id="箭头函数" tabindex="-1"><a class="header-anchor" href="#箭头函数"><span>箭头函数</span></a></h2><p><strong>箭头函数总是函数表达式，并不存在箭头函数声明</strong>。我们还应清楚<strong>箭头函数是匿名函数表达式</strong>——它们没有用于递归或者事件绑定 / 解绑定的命名引用。</p><div class="language-javascript" data-ext="js" data-title="js"><pre class="language-javascript"><code><span class="token keyword">var</span> <span class="token function-variable function">f1</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token number">12</span><span class="token punctuation">;</span>
<span class="token keyword">var</span> <span class="token function-variable function">f2</span> <span class="token operator">=</span> <span class="token parameter">x</span> <span class="token operator">=&gt;</span> x <span class="token operator">*</span> <span class="token number">2</span><span class="token punctuation">;</span>
<span class="token keyword">var</span> <span class="token function-variable function">f3</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token parameter">x<span class="token punctuation">,</span>y</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
	<span class="token keyword">return</span> x <span class="token operator">+</span> y<span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre></div><div class="hint-container info"><p class="hint-container-title">相关信息</p><p>箭头函数支持普通函数参数的所有功能，包括默认值、解构、rest 参数，等等。</p></div><p>然而，使用箭头函数语法替代其他普通的多行函数，特别是那些通常会被自然表达为函数声明的情况，是不合理的。</p><p>虽然不是一条严格的规律，但我认为箭头函数转变带来的可读性提升与被转化函数的长度<strong>负相关</strong>。这个函数越长，箭头函数的好处就越小；函数越短，好处越大。</p><p>更合理的做法是<strong>只在确实需要简短的在线函数表达式的时候才采用箭头函数</strong>，而对于那些 一般长度的函数则无需改变。</p><h3 id="箭头函数的this绑定" tabindex="-1"><a class="header-anchor" href="#箭头函数的this绑定"><span>箭头函数的this绑定</span></a></h3><p>实际上，箭头函数的主要设计目的就是以特定的方式改变 this 的行为特性， 解决 this 相关编码的一个特殊而又常见的痛点。</p><p><strong>在箭头函数内部，this 绑定不是动态的，而是词法的。</strong></p><div class="language-javascript" data-ext="js" data-title="js"><pre class="language-javascript"><code><span class="token keyword">var</span> controller <span class="token operator">=</span> <span class="token punctuation">{</span>
  <span class="token function">makeRequest</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
     btn<span class="token punctuation">.</span><span class="token function">addEventListener</span><span class="token punctuation">(</span> <span class="token string">&quot;click&quot;</span><span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
       <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">makeRequest</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
   <span class="token punctuation">}</span><span class="token punctuation">,</span> <span class="token boolean">false</span> <span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span> <span class="token punctuation">}</span><span class="token punctuation">;</span>
</code></pre></div><h2 id="for-of循环" tabindex="-1"><a class="header-anchor" href="#for-of循环"><span>for-of循环</span></a></h2><p>ES6 在把 JavaScript 中我们熟悉的 for 和 for-in 循环组合起来的基础上，又新增了一个for-of 循环，在迭代器产生的一系列值上循环。</p><p>for-of 循环的值必须是一个 iterable（实现了[Symbol.iterator]方法的对象），或者说它必须是可以转换 / 封箱到一个 iterable 对象的值。</p><div class="language-javascript" data-ext="js" data-title="js"><pre class="language-javascript"><code><span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">var</span> c <span class="token keyword">of</span> <span class="token string">&quot;hello&quot;</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span> c <span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 原生字符串 &quot;hello&quot; 被强制类型转换 / 封箱到等价的 String 封装对象中</span>
<span class="token punctuation">}</span>
<span class="token comment">// &quot;h&quot; &quot;e&quot; &quot;l&quot; &quot;l&quot; &quot;o&quot;</span>
</code></pre></div><p>在 for (XYZ of ABC) 中，和for以及for-in循环中的语句一样，XYZ语句可以是赋值表达式也可以是声明。</p><div class="language-javascript" data-ext="js" data-title="js"><pre class="language-javascript"><code><span class="token keyword">var</span> o <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">;</span>
<span class="token keyword">for</span> <span class="token punctuation">(</span>o<span class="token punctuation">.</span>a <span class="token keyword">of</span> <span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span> o<span class="token punctuation">.</span>a <span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span> <span class="token comment">// 1 2 3</span>

<span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token punctuation">{</span><span class="token literal-property property">x</span><span class="token operator">:</span> o<span class="token punctuation">.</span>a<span class="token punctuation">}</span> <span class="token keyword">of</span> <span class="token punctuation">[</span> <span class="token punctuation">{</span><span class="token literal-property property">x</span><span class="token operator">:</span> <span class="token number">1</span><span class="token punctuation">}</span><span class="token punctuation">,</span> <span class="token punctuation">{</span><span class="token literal-property property">x</span><span class="token operator">:</span> <span class="token number">2</span><span class="token punctuation">}</span><span class="token punctuation">,</span> <span class="token punctuation">{</span><span class="token literal-property property">x</span><span class="token operator">:</span> <span class="token number">3</span><span class="token punctuation">}</span> <span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token punctuation">{</span> <span class="token comment">// 可以解构赋值</span>
  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span> o<span class="token punctuation">.</span>a <span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span> <span class="token comment">// 1 2 3</span>
</code></pre></div><h2 id="正则表达式、数字字面量扩展、symbol" tabindex="-1"><a class="header-anchor" href="#正则表达式、数字字面量扩展、symbol"><span>正则表达式、数字字面量扩展、symbol</span></a></h2><p>参考 <a href=""><strong>ECMAScript 6</strong> 入门</a></p><h2 id="unicode" tabindex="-1"><a class="header-anchor" href="#unicode"><span>Unicode</span></a></h2><p>Unicode 字符范围从 0x0000 到 0xFFFF，包含可能看到和接触到的所有标准打印字符。这组字符称为<strong>基本多语言平面(Basic Multilingual Plane，BMP)</strong>。BMP 甚至包含了像雪人这样的有趣的符号: (U+2603)。</p><p>在 BMP 集之外还有很多其他扩展 Unicode 字符，范围直到 <strong>0x10FFFF</strong>。这些符号通常是星形符号(astral symbol)。</p><h2 id="小结" tabindex="-1"><a class="header-anchor" href="#小结"><span>小结</span></a></h2><p>ES6 为 JavaScript 增加了很多新的语法形式，他们的设计目的都是消除常见编程技巧中的痛点，比如为函数参数设定默认值以及把参数的“其余”部分收集到数组中。解构是一个强有力的工具，用于更精确地表达从数组和嵌套对象中赋值。</p><p>扩展 Unicode 支持、新的正则表达式技巧，甚至新的基本类型 symbol 都使 ES6 的语法发展的更加完善。</p>`,138),e=[o];function c(l,u){return s(),a("div",null,e)}const r=n(t,[["render",c],["__file","2-2 语法.html.vue"]]),d=JSON.parse('{"path":"/YDKJS/YDKJS(%E4%B8%8B%E5%8D%B7)/2-2%20%E8%AF%AD%E6%B3%95.html","title":"语法","lang":"zh-CN","frontmatter":{"description":"语法 块作用域声明 你很可能已经了解，JavaScript 中变量作用域的基本单元一直是 function。如果需要创建一个块作用域，最普遍的方法除了普通的函数声明之外，就是立即调用函数表达式 (IIFE)。 let 声明 过早访问 let / const 声明的引用导致的这个 ReferenceError 严格说叫作临时死亡区(Temporal De...","head":[["meta",{"property":"og:url","content":"https://yamsfeer.github.io/notes-fe/YDKJS/YDKJS(%E4%B8%8B%E5%8D%B7)/2-2%20%E8%AF%AD%E6%B3%95.html"}],["meta",{"property":"og:site_name","content":"yamsfeer"}],["meta",{"property":"og:title","content":"语法"}],["meta",{"property":"og:description","content":"语法 块作用域声明 你很可能已经了解，JavaScript 中变量作用域的基本单元一直是 function。如果需要创建一个块作用域，最普遍的方法除了普通的函数声明之外，就是立即调用函数表达式 (IIFE)。 let 声明 过早访问 let / const 声明的引用导致的这个 ReferenceError 严格说叫作临时死亡区(Temporal De..."}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:locale","content":"zh-CN"}],["meta",{"property":"og:updated_time","content":"2024-04-12T16:21:32.000Z"}],["meta",{"property":"article:modified_time","content":"2024-04-12T16:21:32.000Z"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"语法\\",\\"image\\":[\\"\\"],\\"dateModified\\":\\"2024-04-12T16:21:32.000Z\\",\\"author\\":[]}"]]},"headers":[{"level":2,"title":"块作用域声明","slug":"块作用域声明","link":"#块作用域声明","children":[{"level":3,"title":"let 声明","slug":"let-声明","link":"#let-声明","children":[]},{"level":3,"title":"const 声明","slug":"const-声明","link":"#const-声明","children":[]},{"level":3,"title":"块作用域函数","slug":"块作用域函数","link":"#块作用域函数","children":[]}]},{"level":2,"title":"spread / rest","slug":"spread-rest","link":"#spread-rest","children":[]},{"level":2,"title":"默认参数值","slug":"默认参数值","link":"#默认参数值","children":[{"level":3,"title":"默认值表达式","slug":"默认值表达式","link":"#默认值表达式","children":[]}]},{"level":2,"title":"解构","slug":"解构","link":"#解构","children":[{"level":3,"title":"重复赋值","slug":"重复赋值","link":"#重复赋值","children":[]},{"level":3,"title":"默认值赋值","slug":"默认值赋值","link":"#默认值赋值","children":[]},{"level":3,"title":"嵌套解构","slug":"嵌套解构","link":"#嵌套解构","children":[]},{"level":3,"title":"解构参数","slug":"解构参数","link":"#解构参数","children":[]}]},{"level":2,"title":"对象字面量拓展","slug":"对象字面量拓展","link":"#对象字面量拓展","children":[{"level":3,"title":"简洁属性、方法","slug":"简洁属性、方法","link":"#简洁属性、方法","children":[]},{"level":3,"title":"计算属性名","slug":"计算属性名","link":"#计算属性名","children":[]},{"level":3,"title":"设定 [[Prototype]]","slug":"设定-prototype","link":"#设定-prototype","children":[]},{"level":3,"title":"super 对象","slug":"super-对象","link":"#super-对象","children":[]}]},{"level":2,"title":"模板字面量","slug":"模板字面量","link":"#模板字面量","children":[]},{"level":2,"title":"箭头函数","slug":"箭头函数","link":"#箭头函数","children":[{"level":3,"title":"箭头函数的this绑定","slug":"箭头函数的this绑定","link":"#箭头函数的this绑定","children":[]}]},{"level":2,"title":"for-of循环","slug":"for-of循环","link":"#for-of循环","children":[]},{"level":2,"title":"正则表达式、数字字面量扩展、symbol","slug":"正则表达式、数字字面量扩展、symbol","link":"#正则表达式、数字字面量扩展、symbol","children":[]},{"level":2,"title":"Unicode","slug":"unicode","link":"#unicode","children":[]},{"level":2,"title":"小结","slug":"小结","link":"#小结","children":[]}],"git":{"createdTime":1712938892000,"updatedTime":1712938892000,"contributors":[{"name":"yamsfeer","email":"feer.yams@gmail.com","commits":1}]},"readingTime":{"minutes":14.67,"words":4401},"filePathRelative":"YDKJS/YDKJS(下卷)/2-2 语法.md","localizedDate":"2024年4月12日","autoDesc":true}');export{r as comp,d as data};
