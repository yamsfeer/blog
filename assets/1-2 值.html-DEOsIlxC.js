import{_ as t}from"./plugin-vue_export-helper-DlAUqK2U.js";import{r as o,o as e,c,b as s,d as n,e as l,a}from"./app-BPFsuHku.js";const u={},i=a(`<h1 id="值" tabindex="-1"><a class="header-anchor" href="#值"><span>值</span></a></h1><h2 id="数组" tabindex="-1"><a class="header-anchor" href="#数组"><span>数组</span></a></h2><ul><li><p>与其他强类型语言不同，在 JavaScript 中，数组可以容纳任何类型的值。</p></li><li><p>未设置值的元素和设置为undefined是有区别的。</p></li><li><p>字符串键值能够被强制类型转换为十进制数字的话，它就会被当作数字索引来处理。</p></li><li><p>在数组中加入字符串键值 / 属性并不是一个好主意。建议使用对象来存放键值 / 属性值， 用数组来存放数字索引值。</p></li></ul><div class="language-javascript" data-ext="js" data-title="js"><pre class="language-javascript"><code><span class="token keyword">var</span> arr <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">12</span><span class="token punctuation">,</span> <span class="token string">&#39;str&#39;</span><span class="token punctuation">,</span> <span class="token boolean">false</span><span class="token punctuation">,</span> <span class="token punctuation">[</span><span class="token number">4</span><span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
arr<span class="token punctuation">[</span><span class="token number">5</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token string">&#39;arr5&#39;</span><span class="token punctuation">;</span> <span class="token comment">// 注意这里跳过了arr[4]</span>
arr<span class="token punctuation">[</span><span class="token string">&#39;6&#39;</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token string">&#39;arr6&#39;</span><span class="token punctuation">;</span> <span class="token comment">// 字符串键值能够被强制类型转换为十进制数字的话，它就会被当作数字索引来处理。</span>
arr<span class="token punctuation">[</span><span class="token string">&#39;不能转换为十进制数字的字符串&#39;</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token string">&#39;foo&#39;</span><span class="token punctuation">;</span> <span class="token comment">// 如果不能转为数字，则类似对象的键值对，此时lenth不增加</span>

arr<span class="token punctuation">[</span><span class="token number">4</span><span class="token punctuation">]</span> <span class="token comment">// undefined</span>
arr<span class="token punctuation">[</span><span class="token number">6</span><span class="token punctuation">]</span> <span class="token comment">// &#39;arr6&#39;</span>
arr<span class="token punctuation">[</span><span class="token string">&#39;不能转换为十进制数字的字符串&#39;</span><span class="token punctuation">]</span> <span class="token comment">// &#39;foo&#39;</span>
</code></pre></div><h3 id="类数组" tabindex="-1"><a class="header-anchor" href="#类数组"><span>类数组</span></a></h3><p><strong>类数组是拥有length属性，可通过下标访问元素的列表。</strong></p><p>但是类数组没有push、slice等数组方法，因为<strong>类数组的原型链上没有Array.prototype。</strong></p><p>常见的 <em>类数组</em> 的例子：</p><ul><li>DOM 查询操作返回的 DOM 元素列表</li><li>argument 对象（ES6 已废止）</li></ul><div class="language-javascript" data-ext="js" data-title="js"><pre class="language-javascript"><code><span class="token keyword">var</span> nodes <span class="token operator">=</span> document<span class="token punctuation">.</span><span class="token function">querySelectorAll</span><span class="token punctuation">(</span><span class="token string">&#39;.class&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

nodes<span class="token punctuation">;</span> <span class="token comment">// NodeList []</span>
Object<span class="token punctuation">.</span><span class="token function">getPrototypeOf</span><span class="token punctuation">(</span>nodes<span class="token punctuation">)</span> <span class="token operator">===</span> <span class="token class-name">NodeList</span><span class="token punctuation">.</span>prototype<span class="token punctuation">;</span> <span class="token comment">// true</span>
<span class="token keyword">typeof</span> NodeList<span class="token punctuation">;</span> <span class="token comment">// &#39;function&#39;</span>

<span class="token keyword">var</span> foo<span class="token punctuation">;</span>
<span class="token keyword">void</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  foo <span class="token operator">=</span> arguments<span class="token punctuation">;</span>
<span class="token punctuation">}</span><span class="token punctuation">(</span><span class="token punctuation">)</span>

foo<span class="token punctuation">;</span> <span class="token comment">// Arguments [callee: ƒ, Symbol(Symbol.iterator): ƒ]</span>
Object<span class="token punctuation">.</span><span class="token function">getPrototypeOf</span><span class="token punctuation">(</span>foo<span class="token punctuation">)</span> <span class="token operator">===</span> <span class="token class-name">Object</span><span class="token punctuation">.</span>prototype<span class="token punctuation">;</span> <span class="token comment">// true</span>
</code></pre></div><p>一些数组函数可以用于将类数组转为数组，比如：<code>Array.prototype.slice.call( arguments )</code>、<code>Array.from( arguments )</code>；</p><h2 id="字符串" tabindex="-1"><a class="header-anchor" href="#字符串"><span>字符串</span></a></h2><p>请记住一个重要结论：<strong>JavaScript 中字符串是不可变的</strong>。</p><ul><li><p>虽然看起来很相似，但<strong>字符串和字符数组不是一回事。</strong></p><div class="language-javascript" data-ext="js" data-title="js"><pre class="language-javascript"><code><span class="token keyword">var</span> a <span class="token operator">=</span> <span class="token string">&#39;foo&#39;</span>
<span class="token keyword">var</span> b <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token string">&#39;f&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;o&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;o&#39;</span><span class="token punctuation">]</span>
a<span class="token punctuation">.</span><span class="token function">indexOf</span><span class="token punctuation">(</span> <span class="token string">&quot;o&quot;</span> <span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 1</span>
b<span class="token punctuation">.</span><span class="token function">indexOf</span><span class="token punctuation">(</span> <span class="token string">&quot;o&quot;</span> <span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 1</span>
<span class="token keyword">var</span> c <span class="token operator">=</span> a<span class="token punctuation">.</span><span class="token function">concat</span><span class="token punctuation">(</span> <span class="token string">&quot;bar&quot;</span> <span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// &#39;foobar&#39;</span>
<span class="token keyword">var</span> d <span class="token operator">=</span> b<span class="token punctuation">.</span><span class="token function">concat</span><span class="token punctuation">(</span> <span class="token punctuation">[</span><span class="token string">&quot;b&quot;</span><span class="token punctuation">,</span><span class="token string">&quot;a&quot;</span><span class="token punctuation">,</span><span class="token string">&quot;r&quot;</span><span class="token punctuation">]</span> <span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment">// [&quot;f&quot;,&quot;o&quot;,&quot;o&quot;,&quot;b&quot;,&quot;a&quot;,&quot;r&quot;]</span>

<span class="token comment">// 一个是字符串，另一个是数组</span>
a <span class="token operator">===</span> c<span class="token punctuation">;</span> <span class="token comment">// false</span>
b <span class="token operator">===</span> d<span class="token punctuation">;</span> <span class="token comment">// false</span>
</code></pre></div></li><li><p><strong>JavaScript 中字符串是不可变的，而数组是可变的。</strong></p><p>字符串不可变是指字符串的成员函数不会改变其原始值，而是创建并返回一个新的字符串。</p><p>而数组的成员函数都是在其原始值上进行操作。</p><div class="language-javascript" data-ext="js" data-title="js"><pre class="language-javascript"><code><span class="token keyword">var</span> a <span class="token operator">=</span> <span class="token string">&#39;foo&#39;</span>
<span class="token keyword">var</span> b <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token string">&#39;f&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;o&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;o&#39;</span><span class="token punctuation">]</span>

a<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token string">&quot;x&quot;</span><span class="token punctuation">;</span> <span class="token comment">// 正确取法是 a.charAt(1)</span>
b<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token string">&quot;x&quot;</span><span class="token punctuation">;</span>
a<span class="token punctuation">;</span> <span class="token comment">// &quot;foo&quot; 字符串不可变</span>
b<span class="token punctuation">;</span> <span class="token comment">// [&quot;f&quot;,&quot;x&quot;,&quot;o&quot;]</span>

<span class="token keyword">var</span> c <span class="token operator">=</span> a<span class="token punctuation">.</span><span class="token function">toUpperCase</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 不改变其原始值，而是创建并返回一个新的字符串</span>
a <span class="token operator">===</span> c<span class="token punctuation">;</span> <span class="token comment">// false</span>
a<span class="token punctuation">;</span> <span class="token comment">// &quot;foo&quot;</span>
c<span class="token punctuation">;</span> <span class="token comment">// &quot;FOO&quot;</span>

b<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span> <span class="token string">&quot;!&quot;</span> <span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 在其原始值上进行操作</span>
b<span class="token punctuation">;</span> <span class="token comment">// [&quot;f&quot;,&quot;O&quot;,&quot;o&quot;,&quot;!&quot;]</span>
</code></pre></div></li><li><p>字符串可借用数组的一些函数</p><div class="language-javascript" data-ext="js" data-title="js"><pre class="language-javascript"><code><span class="token keyword">var</span> a <span class="token operator">=</span> <span class="token string">&#39;foo&#39;</span><span class="token punctuation">;</span>
<span class="token keyword">var</span> c <span class="token operator">=</span> <span class="token class-name">Array</span><span class="token punctuation">.</span>prototype<span class="token punctuation">.</span><span class="token function">join</span><span class="token punctuation">.</span><span class="token function">call</span><span class="token punctuation">(</span> a<span class="token punctuation">,</span> <span class="token string">&quot;-&quot;</span> <span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token keyword">var</span> d <span class="token operator">=</span> <span class="token class-name">Array</span><span class="token punctuation">.</span>prototype<span class="token punctuation">.</span><span class="token function">map</span><span class="token punctuation">.</span><span class="token function">call</span><span class="token punctuation">(</span> a<span class="token punctuation">,</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token parameter">v</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
  <span class="token keyword">return</span> v<span class="token punctuation">.</span><span class="token function">toUpperCase</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">&quot;.&quot;</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span> <span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">join</span><span class="token punctuation">(</span> <span class="token string">&quot;&quot;</span> <span class="token punctuation">)</span><span class="token punctuation">;</span>
c<span class="token punctuation">;</span> <span class="token comment">// &quot;f-o-o&quot;</span>
d<span class="token punctuation">;</span> <span class="token comment">// &quot;F.O.O.&quot;</span>

<span class="token comment">// 字符串没有reverse函数，数组有，但是不能直接借用</span>
<span class="token class-name">Array</span><span class="token punctuation">.</span>prototype<span class="token punctuation">.</span><span class="token function">reverse</span><span class="token punctuation">.</span><span class="token function">call</span><span class="token punctuation">(</span> a <span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 返回值仍然是字符串&quot;foo&quot;的一个封装对象(</span>
<span class="token comment">// 解决办法</span>
a<span class="token punctuation">.</span><span class="token function">split</span><span class="token punctuation">(</span><span class="token string">&#39;&#39;</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">reverse</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">join</span><span class="token punctuation">(</span><span class="token string">&#39;&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// &#39;oof&#39;</span>
</code></pre></div></li></ul><h2 id="数字" tabindex="-1"><a class="header-anchor" href="#数字"><span>数字</span></a></h2><p>**JavaScript 没有真正意义上的整数，只有数值类型number。**包括“整数”和带小数的十进制数。</p><p>JavaScript 中的“整数”就是没有小数的十进制数。所以 42.0 即等同于“整数”42。</p>`,17),k={href:"https://www.zhihu.com/question/21711083",target:"_blank",rel:"noopener noreferrer"},r=a(`<p>JavaScript 使用的是“双精度”格式(即 64 位二进制)。</p><h3 id="数字的语法" tabindex="-1"><a class="header-anchor" href="#数字的语法"><span>数字的语法</span></a></h3><ul><li><p>数字的一些写法</p><div class="language-javascript" data-ext="js" data-title="js"><pre class="language-javascript"><code><span class="token keyword">var</span> num <span class="token operator">=</span> <span class="token number">42.0</span>

<span class="token comment">// 前后的0可以省略，事实上，按平常写法即可</span>
<span class="token number">42.</span> <span class="token operator">===</span> <span class="token number">42.0</span> <span class="token comment">// true</span>
<span class="token number">.42</span> <span class="token operator">===</span> <span class="token number">0.42</span> <span class="token comment">// true</span>

<span class="token number">42.300</span> <span class="token operator">===</span> <span class="token number">42.3</span><span class="token punctuation">;</span> <span class="token comment">// true</span>
<span class="token number">42.0</span> <span class="token operator">===</span> <span class="token number">42</span><span class="token punctuation">;</span> <span class="token comment">// true</span>
</code></pre></div></li><li><p>数字的相关函数</p><div class="language-javascript" data-ext="js" data-title="js"><pre class="language-javascript"><code><span class="token comment">// Number.prototype.toExponential</span>
<span class="token keyword">var</span> a <span class="token operator">=</span> <span class="token number">5E10</span><span class="token punctuation">;</span>
a<span class="token punctuation">;</span>                  <span class="token comment">// 50000000000</span>
a<span class="token punctuation">.</span><span class="token function">toExponential</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment">// &quot;5e+10&quot;</span>

a <span class="token operator">*</span> a<span class="token punctuation">;</span> <span class="token comment">// 2.5e+21</span>
<span class="token number">1</span> <span class="token operator">/</span> a<span class="token punctuation">;</span> <span class="token comment">// 2e-11</span>
</code></pre></div><div class="language-javascript" data-ext="js" data-title="js"><pre class="language-javascript"><code><span class="token comment">// Number.prototype.toFixed</span>
<span class="token keyword">var</span> a <span class="token operator">=</span> <span class="token number">42.59</span><span class="token punctuation">;</span>
a<span class="token punctuation">.</span><span class="token function">toFixed</span><span class="token punctuation">(</span> <span class="token number">0</span> <span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// &quot;43&quot;</span>
a<span class="token punctuation">.</span><span class="token function">toFixed</span><span class="token punctuation">(</span> <span class="token number">1</span> <span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// &quot;42.6&quot;</span>
a<span class="token punctuation">.</span><span class="token function">toFixed</span><span class="token punctuation">(</span> <span class="token number">2</span> <span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// &quot;42.59&quot;</span>
a<span class="token punctuation">.</span><span class="token function">toFixed</span><span class="token punctuation">(</span> <span class="token number">3</span> <span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// &quot;42.590&quot;</span>
a<span class="token punctuation">.</span><span class="token function">toFixed</span><span class="token punctuation">(</span> <span class="token number">4</span> <span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// &quot;42.5900&quot;</span>
</code></pre></div></li><li><p>其他进制</p><div class="language-javascript" data-ext="js" data-title="js"><pre class="language-javascript"><code><span class="token number">243</span><span class="token punctuation">;</span> <span class="token comment">// 243的十进制</span>
<span class="token number">0xf3</span><span class="token punctuation">;</span> <span class="token comment">// 243的十六进制</span>
<span class="token number">0o363</span><span class="token punctuation">;</span> <span class="token comment">// 243的八进制</span>
<span class="token number">0b11110011</span><span class="token punctuation">;</span> <span class="token comment">// 243的二进制</span>
</code></pre></div></li></ul><h3 id="较小的数值" tabindex="-1"><a class="header-anchor" href="#较小的数值"><span>较小的数值</span></a></h3><p>二进制浮点数最大的问题(不仅 JavaScript，所有遵循 IEEE 754 规范的语言都是如此)，是会出现如下情况:</p><div class="language-javascript" data-ext="js" data-title="js"><pre class="language-javascript"><code><span class="token number">0.1</span> <span class="token operator">+</span> <span class="token number">0.2</span> <span class="token operator">===</span> <span class="token number">0.3</span> <span class="token comment">// false</span>
</code></pre></div><p>简单来说，<strong>二进制浮点数中的 0.1 和 0.2 并不是十分精确</strong>，它们相加的结果并非刚好等于 0.3，而是一个比较接近的数字 0.30000000000000004，所以条件判断结果为 false。</p><p>最常见的方法是<strong>设置一个误差范围值，通常称为“机器精度”(machine epsilon)</strong>，对JavaScript 的数字来说，这个值通常是 2^-52 (2.220446049250313e-16)。</p><div class="language-javascript" data-ext="js" data-title="js"><pre class="language-javascript"><code><span class="token comment">// ES6版本前的兼容</span>
<span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>Number<span class="token punctuation">.</span><span class="token constant">EPSILON</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  Number<span class="token punctuation">.</span><span class="token constant">EPSILON</span> <span class="token operator">=</span> Math<span class="token punctuation">.</span><span class="token function">pow</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">,</span> <span class="token operator">-</span><span class="token number">52</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>

<span class="token keyword">function</span> <span class="token function">numbersCloseEnoughToEqual</span><span class="token punctuation">(</span><span class="token parameter">n1<span class="token punctuation">,</span>n2</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token keyword">return</span> Math<span class="token punctuation">.</span><span class="token function">abs</span><span class="token punctuation">(</span> n1 <span class="token operator">-</span> n2 <span class="token punctuation">)</span> <span class="token operator">&lt;</span> Number<span class="token punctuation">.</span><span class="token constant">EPSILON</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>

<span class="token function">numbersCloseEnoughToEqual</span><span class="token punctuation">(</span> <span class="token number">0.1</span> <span class="token operator">+</span> <span class="token number">0.2</span><span class="token punctuation">,</span> <span class="token number">0.3</span> <span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// true</span>
<span class="token function">numbersCloseEnoughToEqual</span><span class="token punctuation">(</span> <span class="token number">0.0000001</span><span class="token punctuation">,</span> <span class="token number">0.0000002</span> <span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment">// false</span>
</code></pre></div><div class="language-javascript" data-ext="js" data-title="js"><pre class="language-javascript"><code><span class="token comment">// 最大浮点数</span>
Number<span class="token punctuation">.</span><span class="token constant">MAX_VALUE</span> <span class="token comment">// 1.7976931348623157e+308</span>

<span class="token comment">// 最小浮点数 无限接近于0</span>
Number<span class="token punctuation">.</span><span class="token constant">MIN_VALUE</span> <span class="token comment">// 5e-324</span>
</code></pre></div><h3 id="整数的安全范围" tabindex="-1"><a class="header-anchor" href="#整数的安全范围"><span>整数的安全范围</span></a></h3><p>数字的呈现方式决定了“整数”的安全值范围远远小于 Number.MAX_VALUE。</p><div class="language-javascript" data-ext="js" data-title="js"><pre class="language-javascript"><code>Number<span class="token punctuation">.</span><span class="token constant">MAX_SAFE_INTEGER</span> <span class="token comment">// 2^53 - 1</span>
Number<span class="token punctuation">.</span><span class="token constant">MIN_SAFE_INTEGER</span> <span class="token comment">// - 2^53 + 1</span>
</code></pre></div><p>在处理大数值整数时，可以将其转为字符串进行处理。将来 JavaScript 也许会加入对大数值的支持。</p><h3 id="整数检测" tabindex="-1"><a class="header-anchor" href="#整数检测"><span>整数检测</span></a></h3><div class="language-javascript" data-ext="js" data-title="js"><pre class="language-javascript"><code><span class="token comment">// ES6之前版本的polyfill</span>
<span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>Number<span class="token punctuation">.</span>isInteger<span class="token punctuation">)</span> <span class="token punctuation">{</span>
  Number<span class="token punctuation">.</span><span class="token function-variable function">isInteger</span> <span class="token operator">=</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token parameter">num</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
     <span class="token keyword">return</span> <span class="token keyword">typeof</span> num <span class="token operator">==</span> <span class="token string">&quot;number&quot;</span> <span class="token operator">&amp;&amp;</span> num <span class="token operator">%</span> <span class="token number">1</span> <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
Number<span class="token punctuation">.</span><span class="token function">isInteger</span><span class="token punctuation">(</span> <span class="token number">42</span> <span class="token punctuation">)</span><span class="token punctuation">;</span>     <span class="token comment">// true</span>
Number<span class="token punctuation">.</span><span class="token function">isInteger</span><span class="token punctuation">(</span> <span class="token number">42.000</span> <span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// true</span>
Number<span class="token punctuation">.</span><span class="token function">isInteger</span><span class="token punctuation">(</span> <span class="token number">42.3</span> <span class="token punctuation">)</span><span class="token punctuation">;</span>   <span class="token comment">// false</span>

<span class="token comment">// ES6之前版本的polyfill</span>
<span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>Number<span class="token punctuation">.</span>isSafeInteger<span class="token punctuation">)</span> <span class="token punctuation">{</span>
  Number<span class="token punctuation">.</span><span class="token function-variable function">isSafeInteger</span> <span class="token operator">=</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token parameter">num</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
     <span class="token keyword">return</span> Number<span class="token punctuation">.</span><span class="token function">isInteger</span><span class="token punctuation">(</span> num <span class="token punctuation">)</span> <span class="token operator">&amp;&amp;</span>
         Math<span class="token punctuation">.</span><span class="token function">abs</span><span class="token punctuation">(</span> num <span class="token punctuation">)</span> <span class="token operator">&lt;=</span> Number<span class="token punctuation">.</span><span class="token constant">MAX_SAFE_INTEGER</span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
<span class="token comment">// 检测是否为安全的整数</span>
Number<span class="token punctuation">.</span><span class="token function">isSafeInteger</span><span class="token punctuation">(</span> Number<span class="token punctuation">.</span><span class="token constant">MAX_SAFE_INTEGER</span> <span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// true</span>
Number<span class="token punctuation">.</span><span class="token function">isSafeInteger</span><span class="token punctuation">(</span> Math<span class="token punctuation">.</span><span class="token function">pow</span><span class="token punctuation">(</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">53</span> <span class="token punctuation">)</span> <span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// false</span>
Number<span class="token punctuation">.</span><span class="token function">isSafeInteger</span><span class="token punctuation">(</span> Math<span class="token punctuation">.</span><span class="token function">pow</span><span class="token punctuation">(</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">53</span> <span class="token punctuation">)</span> <span class="token operator">-</span> <span class="token number">1</span> <span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// true</span>
</code></pre></div><h2 id="特殊数值" tabindex="-1"><a class="header-anchor" href="#特殊数值"><span>特殊数值</span></a></h2><p>以下内容介绍几个特殊数值：<code>undefined</code>、<code>NaN</code>、<code>正负0</code>、<code>正负无穷</code>。</p><h3 id="undefined与null" tabindex="-1"><a class="header-anchor" href="#undefined与null"><span>undefined与null</span></a></h3><p>undefined 类型只有一个值，即 undefined。null 类型也只有一个值，即 null。它们的名称既是类型也是值。</p><p>undefined 和 null 常被用来表示“空的”值或“不是值”的值。二者之间有一些细微的差别。例如:</p><ul><li><p>null 指空值(empty value)</p></li><li><p>undefined 指没有值(missing value)</p><p>或者:</p></li><li><p>undefined 指从未赋值</p></li><li><p>null 指曾赋过值，但是目前没有值</p></li></ul><p>null 是一个特殊关键字，不是标识符，我们不能将其当作变量来使用和赋值。</p><p><strong>undefined 是一个内置标识符，可以被当作变量来使用和赋值。（糟糕的设计）</strong></p><h3 id="全局标识符undefined" tabindex="-1"><a class="header-anchor" href="#全局标识符undefined"><span>全局标识符undefined</span></a></h3><p>非严格模式下可以为全局标识符undefined赋值，也可定义一个局部变量叫undefined：</p><div class="language-javascript" data-ext="js" data-title="js"><pre class="language-javascript"><code><span class="token keyword">function</span> <span class="token function">foo</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token keyword">undefined</span> <span class="token operator">=</span> <span class="token number">2</span><span class="token punctuation">;</span> <span class="token comment">// 修改全局标识符undefined，非常糟糕的做法!</span>
<span class="token punctuation">}</span>
<span class="token keyword">function</span> <span class="token function">foo</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token string">&quot;use strict&quot;</span><span class="token punctuation">;</span>
  <span class="token keyword">undefined</span> <span class="token operator">=</span> <span class="token number">2</span><span class="token punctuation">;</span> <span class="token comment">// TypeError!</span>
<span class="token punctuation">}</span>
<span class="token keyword">function</span> <span class="token function">foo</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token string">&quot;use strict&quot;</span><span class="token punctuation">;</span>
  <span class="token keyword">var</span> <span class="token keyword">undefined</span> <span class="token operator">=</span> <span class="token number">2</span><span class="token punctuation">;</span> <span class="token comment">// 定义局部变量名叫undefined</span>
  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span> <span class="token keyword">undefined</span> <span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 2</span>
<span class="token punctuation">}</span>
</code></pre></div><p><strong>永远不要重新定义 undefined。</strong></p><p><em>我们可以通过 <code>void 0</code> 获得undefined的值，其他 void 表达式也可以，void 0、void 1 和 undefined 之间并没有实质上的区别。</em></p><h3 id="特殊的数字" tabindex="-1"><a class="header-anchor" href="#特殊的数字"><span>特殊的数字</span></a></h3><ul><li><p>NaN</p><p>NaN可以理解为“无效的数值”，但它是<strong>数字类型</strong>。</p><div class="language-javascript" data-ext="js" data-title="js"><pre class="language-javascript"><code><span class="token keyword">var</span> nan <span class="token operator">=</span> <span class="token number">1</span> <span class="token operator">/</span> <span class="token string">&#39;foo&#39;</span><span class="token punctuation">;</span> <span class="token comment">// NaN</span>
<span class="token keyword">typeof</span> nan<span class="token punctuation">;</span> <span class="token comment">// &#39;number&#39;</span>
</code></pre></div><p>NaN是一个特殊值，它和自身不相等，事实上，<strong>NaN不等于任何值</strong>。</p><div class="language-javascript" data-ext="js" data-title="js"><pre class="language-javascript"><code><span class="token number">NaN</span> <span class="token operator">===</span> <span class="token number">NaN</span><span class="token punctuation">;</span> <span class="token comment">// false</span>
</code></pre></div><p>可以通过ES6的 <code>Number.isNaN</code> 函数判断一个值是否是NaN。</p><div class="language-javascript" data-ext="js" data-title="js"><pre class="language-javascript"><code><span class="token comment">// polyfill</span>
<span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>Number<span class="token punctuation">.</span>isNaN<span class="token punctuation">)</span> <span class="token punctuation">{</span>
  Number<span class="token punctuation">.</span><span class="token function-variable function">isNaN</span> <span class="token operator">=</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token parameter">n</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">return</span> n <span class="token operator">!==</span> n<span class="token punctuation">;</span> <span class="token comment">// 利用NaN不等于自身的特性</span>
  <span class="token punctuation">}</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>

Number<span class="token punctuation">.</span><span class="token function">isNaN</span><span class="token punctuation">(</span> <span class="token number">NaN</span> <span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// true</span>
Number<span class="token punctuation">.</span><span class="token function">isNaN</span><span class="token punctuation">(</span> <span class="token string">&#39;foo&#39;</span> <span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// false</span>
</code></pre></div></li><li><p>无穷数</p><div class="language-javascript" data-ext="js" data-title="js"><pre class="language-javascript"><code><span class="token keyword">var</span> a <span class="token operator">=</span> <span class="token number">1</span> <span class="token operator">/</span> <span class="token number">0</span><span class="token punctuation">;</span>  <span class="token comment">// Infinity</span>
<span class="token keyword">var</span> b <span class="token operator">=</span> <span class="token operator">-</span><span class="token number">1</span> <span class="token operator">/</span> <span class="token number">0</span><span class="token punctuation">;</span> <span class="token comment">// -Infinity</span>

Number<span class="token punctuation">.</span><span class="token constant">POSITIVE_INFINITY</span> <span class="token comment">// Infinity</span>
Number<span class="token punctuation">.</span><span class="token constant">NEGATIVE_INFINITY</span> <span class="token comment">// -Infinity</span>
</code></pre></div><p>JavaScript 使用有限数字表示法(finite numeric representation，即之前介绍过的 IEEE 754 浮点数)，所以和纯粹的数学运算不同，JavaScript 的运算结果有可能溢出，此时结果为 Infinity 或者 -Infinity。</p><div class="language-javascript" data-ext="js" data-title="js"><pre class="language-javascript"><code><span class="token keyword">var</span> a <span class="token operator">=</span> Number<span class="token punctuation">.</span><span class="token constant">MAX_VALUE</span><span class="token punctuation">;</span> <span class="token comment">// 1.7976931348623157e+308</span>
a <span class="token operator">+</span> a<span class="token punctuation">;</span> <span class="token comment">// Infinity</span>
a <span class="token operator">+</span> Math<span class="token punctuation">.</span><span class="token function">pow</span><span class="token punctuation">(</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">970</span> <span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// Infinity</span>
a <span class="token operator">+</span> Math<span class="token punctuation">.</span><span class="token function">pow</span><span class="token punctuation">(</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">969</span> <span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 1.7976931348623157e+308</span>
</code></pre></div><p>规范规定，如果数学运算的结果超出处理范围，则由 IEEE 754 规范中的“就近取整”(round-to-nearest)模式来决定最后的结果。</p><p>例如，相对于 Infinity，Number.MAX_ VALUE + Math.pow(2, 969)与Number.MAX_VALUE更为接近，因此它被“向下取整”(round down);而 Number.MAX_VALUE + Math.pow(2, 970) 与 Infinity 更为接近，所以它被“向上取整”(round up)。</p><p><strong>计算结果一旦溢出为无穷数(infinity)就无法再得到有穷数。换句话说，就是你可以从有穷走向无穷，但无法从无穷回到有穷。</strong></p></li><li><p>零值</p><p>JavaScript 有一个常规的 0 (也叫作 +0)和一个 <code>-0</code>。</p><p>-0的情况很令人费解，这里仅简单介绍。</p><div class="language-javascript" data-ext="js" data-title="js"><pre class="language-javascript"><code><span class="token keyword">var</span> a <span class="token operator">=</span> <span class="token number">0</span> <span class="token operator">/</span> <span class="token operator">-</span><span class="token number">3</span><span class="token punctuation">;</span> <span class="token comment">// -0</span>
<span class="token keyword">var</span> b <span class="token operator">=</span> <span class="token number">0</span> <span class="token operator">*</span> <span class="token operator">-</span><span class="token number">3</span><span class="token punctuation">;</span> <span class="token comment">// -0</span>

<span class="token comment">// 加减法不会得到-0</span>
</code></pre></div><p>区分-0的方法：</p><div class="language-javascript" data-ext="js" data-title="js"><pre class="language-javascript"><code><span class="token keyword">function</span> <span class="token function">isNegZero</span><span class="token punctuation">(</span><span class="token parameter">n</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  n <span class="token operator">=</span> <span class="token function">Number</span><span class="token punctuation">(</span> n <span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token keyword">return</span> <span class="token punctuation">(</span>n <span class="token operator">===</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token operator">&amp;&amp;</span> <span class="token punctuation">(</span><span class="token number">1</span> <span class="token operator">/</span> n <span class="token operator">===</span> <span class="token operator">-</span><span class="token number">Infinity</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>

<span class="token function">isNegZero</span><span class="token punctuation">(</span> <span class="token operator">-</span><span class="token number">0</span> <span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// true</span>
<span class="token function">isNegZero</span><span class="token punctuation">(</span> <span class="token number">0</span> <span class="token operator">/</span> <span class="token operator">-</span><span class="token number">3</span> <span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// true</span>
<span class="token function">isNegZero</span><span class="token punctuation">(</span> <span class="token number">0</span> <span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// false</span>
</code></pre></div><p>为什么需要负0：</p><blockquote><p>有些应用程序中的数据需要以级数形式来表示(比如动画帧的移动速度)，数字的符号位 (sign)用来代表其他信息(比如移动的方向)。此时如果一个值为 0 的变量失去了它的符号位，它的方向信息就会丢失。所以保留 0 值的符号位可以防止这类情况发生。</p></blockquote></li></ul><h3 id="特殊等式" tabindex="-1"><a class="header-anchor" href="#特殊等式"><span>特殊等式</span></a></h3><p>NaN 和 -0 在相等比较时的表现有些特别，我们可以用ES6的<code>Object.is</code>函数来判断。</p><div class="language-javascript" data-ext="js" data-title="js"><pre class="language-javascript"><code><span class="token keyword">var</span> a <span class="token operator">=</span> <span class="token number">2</span> <span class="token operator">/</span> <span class="token string">&quot;foo&quot;</span><span class="token punctuation">;</span> <span class="token comment">// NaN</span>
<span class="token keyword">var</span> b <span class="token operator">=</span> <span class="token operator">-</span><span class="token number">3</span> <span class="token operator">*</span> <span class="token number">0</span><span class="token punctuation">;</span> <span class="token comment">// -0</span>

Object<span class="token punctuation">.</span><span class="token function">is</span><span class="token punctuation">(</span> a<span class="token punctuation">,</span> <span class="token number">NaN</span> <span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// true</span>
Object<span class="token punctuation">.</span><span class="token function">is</span><span class="token punctuation">(</span> b<span class="token punctuation">,</span> <span class="token operator">-</span><span class="token number">0</span> <span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// true</span>
Object<span class="token punctuation">.</span><span class="token function">is</span><span class="token punctuation">(</span> b<span class="token punctuation">,</span> <span class="token number">0</span> <span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// false</span>
</code></pre></div><p>能使用 == 和 ===时就尽量不要使用 Object.is，因为前者效率更高、更为通用。</p><p>Object.is主要用来处理那些特殊的相等比较。</p><h2 id="值和引用" tabindex="-1"><a class="header-anchor" href="#值和引用"><span>值和引用</span></a></h2><blockquote><p>在 C++ 中如果要向函数传递一个数字并在函数中更改它的值，就可以这样来声明参 数int&amp; myNum，即如果传递的变量是x，myNum就是指向x的引用。引用就像一种特殊的指针，是来指向变量的指针(别名)。如果参数不声明为引用的话，参数值总是通过值复制 的方式传递，即便对复杂的对象值也是如此。</p><p>（总结就是C++可以有引用的引用）</p></blockquote><ul><li><p><strong>JavaScript 中没有指针</strong>，引用的工作机制也不尽相同。在 JavaScript 中变量不可能成为指向另一个变量的引用。</p></li><li><p><strong>JavaScript 引用指向的是值</strong>。如果一个值有 10 个引用，这些引用指向的都是同一个值，它们相互之间没有引用 / 指向关系。</p></li><li><p>我们无法自行决定使用值复制还是引用复制，<strong>一切由值的类型来决定</strong>。</p><div class="language-javascript" data-ext="js" data-title="js"><pre class="language-javascript"><code><span class="token keyword">var</span> a <span class="token operator">=</span> <span class="token number">2</span><span class="token punctuation">;</span>
<span class="token keyword">var</span> b <span class="token operator">=</span> a<span class="token punctuation">;</span> <span class="token comment">// b是a的值的一个副本</span>
b<span class="token operator">++</span><span class="token punctuation">;</span>
a<span class="token punctuation">;</span> <span class="token comment">// 2</span>
b<span class="token punctuation">;</span> <span class="token comment">// 3</span>

<span class="token keyword">var</span> c <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
<span class="token keyword">var</span> d <span class="token operator">=</span> c<span class="token punctuation">;</span> <span class="token comment">// d是[1,2,3]的一个引用</span>
d<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span> <span class="token number">4</span> <span class="token punctuation">)</span><span class="token punctuation">;</span>
c<span class="token punctuation">;</span> <span class="token comment">// [1,2,3,4]</span>
d<span class="token punctuation">;</span> <span class="token comment">// [1,2,3,4]</span>

<span class="token comment">// 一个引用无法更改另一个引用的指向</span>
d <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
c<span class="token punctuation">;</span> <span class="token comment">// [1,2,3,4]</span>
d<span class="token punctuation">;</span> <span class="token comment">// []</span>
</code></pre></div></li><li><p>简单值总是通过<strong>值复制的方式</strong>来赋值 / 传递，包括 null、undefined、字符串、数字、布尔和 ES6 中的 symbol。</p></li><li><p>复合值对象和函数等，则总是通过<strong>引用复制</strong>的方式来赋值 / 传递。</p></li></ul><h2 id="小结" tabindex="-1"><a class="header-anchor" href="#小结"><span>小结</span></a></h2><p>字符串和字符数组类似，但是它们不是一个东西，在将字符串作为数组来处理时需要特别小心。</p><p>JavaScript中没有“整数”，只有“数字类型”，“整数”其实就是不带小数的浮点数。</p><p>基本类型中定义了几个特殊的值：</p><ul><li>null 类型只有一个值 null，undefined 类型也只有一个值 undefined。void 运算符返回 undefined。</li></ul><p>数字类型有几个特殊值：</p><ul><li>NaN</li><li>+Infinity、-Infinity</li><li>-0</li></ul><p>简单标量基本类型值(字符串和数字等)通过值复制来赋值 / 传递，而复合值(对象等) 通过引用复制来赋值 / 传递。</p><p>JavaScript 中的引用和其他语言中的引用 / 指针不同，它们不能指向别的变量 / 引用，<strong>只能指向值</strong>。</p>`,48);function m(d,g){const p=o("ExternalLinkIcon");return e(),c("div",null,[i,s("p",null,[n("与大部分现代编程语言(包括几乎所有的脚本语言)一样，JavaScript 中的数字类型是基于 "),s("a",k,[n("IEEE754"),l(p)]),n(" 标准来实现的，该标准通常也被称为“浮点数”。")]),r])}const v=t(u,[["render",m],["__file","1-2 值.html.vue"]]),h=JSON.parse('{"path":"/YDKJS/YDKJS(%E4%B8%AD%E5%8D%B7)/1-2%20%E5%80%BC.html","title":"值","lang":"zh-CN","frontmatter":{"description":"值 数组 与其他强类型语言不同，在 JavaScript 中，数组可以容纳任何类型的值。 未设置值的元素和设置为undefined是有区别的。 字符串键值能够被强制类型转换为十进制数字的话，它就会被当作数字索引来处理。 在数组中加入字符串键值 / 属性并不是一个好主意。建议使用对象来存放键值 / 属性值， 用数组来存放数字索引值。 类数组 类数组是拥有...","head":[["meta",{"property":"og:url","content":"https://yamsfeer.github.io/notes-fe/YDKJS/YDKJS(%E4%B8%AD%E5%8D%B7)/1-2%20%E5%80%BC.html"}],["meta",{"property":"og:site_name","content":"yamsfeer"}],["meta",{"property":"og:title","content":"值"}],["meta",{"property":"og:description","content":"值 数组 与其他强类型语言不同，在 JavaScript 中，数组可以容纳任何类型的值。 未设置值的元素和设置为undefined是有区别的。 字符串键值能够被强制类型转换为十进制数字的话，它就会被当作数字索引来处理。 在数组中加入字符串键值 / 属性并不是一个好主意。建议使用对象来存放键值 / 属性值， 用数组来存放数字索引值。 类数组 类数组是拥有..."}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:locale","content":"zh-CN"}],["meta",{"property":"og:updated_time","content":"2024-04-12T16:21:32.000Z"}],["meta",{"property":"article:modified_time","content":"2024-04-12T16:21:32.000Z"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"值\\",\\"image\\":[\\"\\"],\\"dateModified\\":\\"2024-04-12T16:21:32.000Z\\",\\"author\\":[]}"]]},"headers":[{"level":2,"title":"数组","slug":"数组","link":"#数组","children":[{"level":3,"title":"类数组","slug":"类数组","link":"#类数组","children":[]}]},{"level":2,"title":"字符串","slug":"字符串","link":"#字符串","children":[]},{"level":2,"title":"数字","slug":"数字","link":"#数字","children":[{"level":3,"title":"数字的语法","slug":"数字的语法","link":"#数字的语法","children":[]},{"level":3,"title":"较小的数值","slug":"较小的数值","link":"#较小的数值","children":[]},{"level":3,"title":"整数的安全范围","slug":"整数的安全范围","link":"#整数的安全范围","children":[]},{"level":3,"title":"整数检测","slug":"整数检测","link":"#整数检测","children":[]}]},{"level":2,"title":"特殊数值","slug":"特殊数值","link":"#特殊数值","children":[{"level":3,"title":"undefined与null","slug":"undefined与null","link":"#undefined与null","children":[]},{"level":3,"title":"全局标识符undefined","slug":"全局标识符undefined","link":"#全局标识符undefined","children":[]},{"level":3,"title":"特殊的数字","slug":"特殊的数字","link":"#特殊的数字","children":[]},{"level":3,"title":"特殊等式","slug":"特殊等式","link":"#特殊等式","children":[]}]},{"level":2,"title":"值和引用","slug":"值和引用","link":"#值和引用","children":[]},{"level":2,"title":"小结","slug":"小结","link":"#小结","children":[]}],"git":{"createdTime":1712938892000,"updatedTime":1712938892000,"contributors":[{"name":"yamsfeer","email":"feer.yams@gmail.com","commits":1}]},"readingTime":{"minutes":9.89,"words":2967},"filePathRelative":"YDKJS/YDKJS(中卷)/1-2 值.md","localizedDate":"2024年4月12日","autoDesc":true}');export{v as comp,h as data};
