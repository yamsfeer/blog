import{_ as n}from"./plugin-vue_export-helper-DlAUqK2U.js";import{o as s,c as a,a as t}from"./app-BPFsuHku.js";const p={},o=t(`<h1 id="component" tabindex="-1"><a class="header-anchor" href="#component"><span>component</span></a></h1><p>回顾之前的 patch 函数。</p><div class="language-javascript" data-ext="js" data-title="js"><pre class="language-javascript"><code><span class="token keyword">function</span> <span class="token function">patch</span><span class="token punctuation">(</span><span class="token parameter">n1<span class="token punctuation">,</span> n2<span class="token punctuation">,</span> container</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token comment">// ...</span>

  <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token keyword">typeof</span> n2<span class="token punctuation">.</span>type <span class="token operator">===</span> <span class="token string">&#39;string&#39;</span><span class="token punctuation">)</span> <span class="token punctuation">{</span> <span class="token comment">// 普通标签</span>
    n1 <span class="token operator">?</span> <span class="token function">patchElement</span><span class="token punctuation">(</span>n1<span class="token punctuation">,</span> n2<span class="token punctuation">,</span> container<span class="token punctuation">)</span> <span class="token operator">:</span> <span class="token function">mountElement</span><span class="token punctuation">(</span>n2<span class="token punctuation">,</span> container<span class="token punctuation">)</span>
  <span class="token punctuation">}</span>
  <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>n2<span class="token punctuation">.</span>type <span class="token operator">===</span> Fragment<span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token punctuation">}</span>
  <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token keyword">typeof</span> n2<span class="token punctuation">.</span>type <span class="token operator">===</span> <span class="token string">&#39;object&#39;</span><span class="token punctuation">)</span> <span class="token punctuation">{</span> <span class="token comment">/* 组件 */</span> <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre></div><p>在 patch 一个 vnode 时，会根据 vnode.type 做出相应的操作。当 vnode.type 是一个对象时，这个对象描述的是一个组件。</p><div class="language-javascript" data-ext="js" data-title="js"><pre class="language-javascript"><code><span class="token keyword">const</span> vnode <span class="token operator">=</span> <span class="token punctuation">{</span>
  <span class="token literal-property property">type</span><span class="token operator">:</span> MyComponent
<span class="token punctuation">}</span>
</code></pre></div><p>一个组件对象基本结构如下，其中 render 函数是必不可少的，且 render 函数返回的应该是 vnode。</p><div class="language-javascript" data-ext="js" data-title="js"><pre class="language-javascript"><code><span class="token keyword">const</span> MyComponent <span class="token operator">=</span> <span class="token punctuation">{</span>
  <span class="token literal-property property">name</span><span class="token operator">:</span> <span class="token string">&#39;MyComponent&#39;</span><span class="token punctuation">,</span>
  <span class="token function">render</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">return</span> <span class="token punctuation">{</span> <span class="token literal-property property">type</span><span class="token operator">:</span> <span class="token string">&#39;div&#39;</span><span class="token punctuation">,</span> <span class="token literal-property property">children</span><span class="token operator">:</span> <span class="token string">&#39;文本内容&#39;</span> <span class="token punctuation">}</span>
  <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre></div><p>对于一个组件类型的 vnode 而言，也有 mountComponent 和 patchComponent 两个操作。</p><div class="language-javascript" data-ext="js" data-title="js"><pre class="language-javascript"><code><span class="token keyword">function</span> <span class="token function">patch</span><span class="token punctuation">(</span><span class="token parameter">n1<span class="token punctuation">,</span> n2<span class="token punctuation">,</span> container</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token keyword">typeof</span> n2<span class="token punctuation">.</span>type <span class="token operator">===</span> <span class="token string">&#39;string&#39;</span><span class="token punctuation">)</span> <span class="token punctuation">{</span> <span class="token comment">// 普通标签</span>
    n1
      <span class="token operator">?</span> <span class="token function">patchElement</span><span class="token punctuation">(</span>n1<span class="token punctuation">,</span> n2<span class="token punctuation">,</span> container<span class="token punctuation">)</span>
      <span class="token operator">:</span> <span class="token function">mountElement</span><span class="token punctuation">(</span>n2<span class="token punctuation">,</span> container<span class="token punctuation">)</span>
  <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token keyword">typeof</span> n2<span class="token punctuation">.</span>type <span class="token operator">===</span> <span class="token string">&#39;object&#39;</span><span class="token punctuation">)</span> <span class="token punctuation">{</span> <span class="token comment">// 组件 vnode</span>
    n1
      <span class="token operator">?</span> <span class="token function">patchComponent</span><span class="token punctuation">(</span>n1<span class="token punctuation">,</span> n2<span class="token punctuation">,</span> container<span class="token punctuation">)</span>
      <span class="token operator">:</span> <span class="token function">mountComponent</span><span class="token punctuation">(</span>n2<span class="token punctuation">,</span> container<span class="token punctuation">)</span>
  <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>n2<span class="token punctuation">.</span>type <span class="token operator">===</span> Fragment<span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token punctuation">}</span> <span class="token comment">// Fragment</span>
<span class="token punctuation">}</span>
</code></pre></div><p>这里需要注意，组件类型 vnode 和组件 render 函数返回的 vnode 是两回事。</p><p>在上面的例子中，<code>type=MyComponent</code> 的 vnode 是组件类型 vnode，称为组件 vnode；而 MyComponent 的 render 函数返回的是 MyComponent 的内容，以下称为 subTree。</p><h2 id="mountcomponent" tabindex="-1"><a class="header-anchor" href="#mountcomponent"><span>mountComponent</span></a></h2><p>mountComponent 的基本实现如下。</p><div class="language-javascript" data-ext="js" data-title="js"><pre class="language-javascript"><code><span class="token keyword">function</span> <span class="token function">mountComponent</span><span class="token punctuation">(</span><span class="token parameter">vnode<span class="token punctuation">,</span> container</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token keyword">const</span> component <span class="token operator">=</span> vnode<span class="token punctuation">.</span>type
  <span class="token keyword">const</span> render <span class="token operator">=</span> component<span class="token punctuation">.</span>render
  <span class="token keyword">const</span> subTree <span class="token operator">=</span> <span class="token function">render</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token comment">// 执行 render 函数，得到组件的内容，它是一个 vnode</span>
  
  <span class="token function">patch</span><span class="token punctuation">(</span><span class="token keyword">null</span><span class="token punctuation">,</span> subTree<span class="token punctuation">,</span> container<span class="token punctuation">)</span> <span class="token comment">// patch subTree</span>
<span class="token punctuation">}</span>
</code></pre></div><h3 id="响应系统与组件" tabindex="-1"><a class="header-anchor" href="#响应系统与组件"><span>响应系统与组件</span></a></h3><p>一个组件内除了 render 函数，还有组件自身的状态。</p><div class="language-javascript" data-ext="js" data-title="js"><pre class="language-javascript"><code><span class="token keyword">const</span> MyComponent <span class="token operator">=</span> <span class="token punctuation">{</span>
  <span class="token function">data</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">return</span> <span class="token punctuation">{</span> <span class="token literal-property property">foo</span><span class="token operator">:</span> <span class="token string">&#39;hello&#39;</span> <span class="token punctuation">}</span>
  <span class="token punctuation">}</span><span class="token punctuation">,</span>
  <span class="token function">render</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">return</span> <span class="token punctuation">{</span> <span class="token literal-property property">type</span><span class="token operator">:</span> <span class="token string">&#39;div&#39;</span><span class="token punctuation">,</span> <span class="token literal-property property">children</span><span class="token operator">:</span> <span class="token template-string"><span class="token template-punctuation string">\`</span><span class="token string">状态：</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">\${</span> <span class="token keyword">this</span><span class="token punctuation">.</span>foo <span class="token interpolation-punctuation punctuation">}</span></span><span class="token template-punctuation string">\`</span></span> <span class="token punctuation">}</span>
  <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre></div><p>mountComponent 会使用响应系统实现组件状态的自更新。</p><div class="language-javascript" data-ext="js" data-title="js"><pre class="language-javascript"><code><span class="token keyword">function</span> <span class="token function">mountComponent</span><span class="token punctuation">(</span><span class="token parameter">vnode<span class="token punctuation">,</span> container</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token keyword">const</span> <span class="token punctuation">{</span> render<span class="token punctuation">,</span> data <span class="token punctuation">}</span> <span class="token operator">=</span> vnode<span class="token punctuation">.</span>type

  <span class="token keyword">const</span> state <span class="token operator">=</span> <span class="token function">reactive</span><span class="token punctuation">(</span><span class="token function">data</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token comment">// 将状态转为响应式对象</span>
 
  <span class="token function">effect</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
    <span class="token comment">// 以 state 为上下文，执行 render 函数</span>
    <span class="token keyword">const</span> subTree <span class="token operator">=</span> <span class="token function">render</span><span class="token punctuation">.</span><span class="token function">call</span><span class="token punctuation">(</span>state<span class="token punctuation">)</span>
    <span class="token function">patch</span><span class="token punctuation">(</span><span class="token keyword">null</span><span class="token punctuation">,</span> subTree<span class="token punctuation">,</span> container<span class="token punctuation">)</span>
  <span class="token punctuation">}</span><span class="token punctuation">)</span>
<span class="token punctuation">}</span>
</code></pre></div><p>由此可见：</p><ul><li>render 函数之所以可以通过 this 获取状态，是因为 render 函数的执行上下文为 state。</li><li>组件的 render 和 patch 都用 effect 函数包裹，使得状态改变时，组件重新渲染。</li></ul><h3 id="组件更新调度器" tabindex="-1"><a class="header-anchor" href="#组件更新调度器"><span>组件更新调度器</span></a></h3><p>虽然实现了组件随状态自动更新的功能，但每次修改状态的值，都会重新渲染一次。我们可以实现一个调度器，使得无论修改多少次，都只重新渲染一次。</p><p>在 reactivity 一节中介绍过这个调度器，它是利用微任务的异步执行机制，实现对任务的缓冲。</p><div class="language-javascript" data-ext="js" data-title="js"><pre class="language-javascript"><code><span class="token keyword">const</span> queue <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Set</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
<span class="token keyword">let</span> isFlushing <span class="token operator">=</span> <span class="token boolean">false</span>

<span class="token keyword">function</span> <span class="token function">queueJob</span><span class="token punctuation">(</span><span class="token parameter">job</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  queue<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span>job<span class="token punctuation">)</span>

  <span class="token keyword">if</span> <span class="token punctuation">(</span>isFlushing<span class="token punctuation">)</span> <span class="token comment">// 正在清空</span>
    <span class="token keyword">return</span>
  
  isFlushing <span class="token operator">=</span> <span class="token boolean">true</span>
  Promise<span class="token punctuation">.</span><span class="token function">resolve</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
    <span class="token punctuation">.</span><span class="token function">then</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> queue<span class="token punctuation">.</span><span class="token function">forEach</span><span class="token punctuation">(</span><span class="token parameter">job</span> <span class="token operator">=&gt;</span> <span class="token function">job</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token comment">// 在微任务中清空 queue</span>
  	<span class="token punctuation">.</span><span class="token function">finally</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
      isFlashing <span class="token operator">=</span> <span class="token boolean">false</span>
      queue<span class="token punctuation">.</span><span class="token function">clear</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
    <span class="token punctuation">}</span><span class="token punctuation">)</span>
  
<span class="token punctuation">}</span>
</code></pre></div><p>在 effect 中使用调度器。</p><div class="language-javascript" data-ext="js" data-title="js"><pre class="language-javascript"><code><span class="token keyword">function</span> <span class="token function">mountComponent</span><span class="token punctuation">(</span><span class="token parameter">vnode<span class="token punctuation">,</span> container</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token keyword">const</span> state <span class="token operator">=</span> <span class="token function">reactive</span><span class="token punctuation">(</span><span class="token function">data</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
 
  <span class="token function">effect</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
    <span class="token keyword">const</span> subTree <span class="token operator">=</span> <span class="token function">render</span><span class="token punctuation">.</span><span class="token function">call</span><span class="token punctuation">(</span>state<span class="token punctuation">)</span>
    <span class="token function">patch</span><span class="token punctuation">(</span><span class="token keyword">null</span><span class="token punctuation">,</span> subTree<span class="token punctuation">,</span> container<span class="token punctuation">)</span>
  <span class="token punctuation">}</span><span class="token punctuation">,</span> <span class="token punctuation">{</span>
    <span class="token literal-property property">scheduler</span><span class="token operator">:</span> queueJob <span class="token comment">// 响应数据变化时，执行 queueJob 函数</span>
  <span class="token punctuation">}</span><span class="token punctuation">)</span>
<span class="token punctuation">}</span>
</code></pre></div><p>目前 mountComponent 还有一个问题，调用 patch 函数时的第一个参数都是 null，这意味着每次都是全新的挂载，我们需要一个组件实例，记录上一次渲染的 subTree，然后进行打补丁操作。</p><h2 id="组件实例" tabindex="-1"><a class="header-anchor" href="#组件实例"><span>组件实例</span></a></h2><p>组件实例本质是一个对象，它维护着组件运行过程中的所有信息。它在 mountComponent 中创建。</p><div class="language-javascript" data-ext="js" data-title="js"><pre class="language-javascript"><code><span class="token keyword">function</span> <span class="token function">mountComponent</span><span class="token punctuation">(</span><span class="token parameter">vnode<span class="token punctuation">,</span> container</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token keyword">const</span> state <span class="token operator">=</span> <span class="token function">reactive</span><span class="token punctuation">(</span><span class="token function">data</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
  
  <span class="token keyword">const</span> instance <span class="token operator">=</span> <span class="token punctuation">{</span>
    state<span class="token punctuation">,</span> <span class="token comment">// 组件状态</span>
    <span class="token literal-property property">isMounted</span><span class="token operator">:</span> <span class="token boolean">false</span><span class="token punctuation">,</span> <span class="token comment">// 是否已被挂载</span>
    <span class="token literal-property property">subTree</span><span class="token operator">:</span> <span class="token keyword">null</span><span class="token punctuation">,</span> <span class="token comment">// 组件渲染的内容</span>
  <span class="token punctuation">}</span>
  
  vnode<span class="token punctuation">.</span>component <span class="token operator">=</span> instance <span class="token comment">// 保持一个引用，patchComponent 需要用到</span>
  <span class="token comment">// effect</span>
<span class="token punctuation">}</span>
</code></pre></div><p>有了组件实例，我们便可以在上面记录上一次的 subTree，从而判断组件是首次挂载或打补丁。</p><div class="language-javascript" data-ext="js" data-title="js"><pre class="language-javascript"><code><span class="token keyword">function</span> <span class="token function">mountComponent</span><span class="token punctuation">(</span><span class="token parameter">vnode<span class="token punctuation">,</span> container</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token comment">// ...</span>
  <span class="token function">effect</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
    <span class="token keyword">const</span> subTree <span class="token operator">=</span> <span class="token function">render</span><span class="token punctuation">.</span><span class="token function">call</span><span class="token punctuation">(</span>state<span class="token punctuation">)</span>

    <span class="token keyword">if</span> <span class="token punctuation">(</span>instance<span class="token punctuation">.</span>isMounted<span class="token punctuation">)</span> <span class="token punctuation">{</span> <span class="token comment">// 打补丁</span>
      <span class="token function">patch</span><span class="token punctuation">(</span>instance<span class="token punctuation">.</span>subTree<span class="token punctuation">,</span> subTree<span class="token punctuation">,</span> container<span class="token punctuation">)</span>
    <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span> <span class="token comment">// 首次挂载</span>
      <span class="token function">patch</span><span class="token punctuation">(</span><span class="token keyword">null</span><span class="token punctuation">,</span> subTree<span class="token punctuation">,</span> container<span class="token punctuation">)</span>
      instance<span class="token punctuation">.</span>isMounted <span class="token operator">=</span> <span class="token boolean">true</span>
    <span class="token punctuation">}</span>
    
    instance<span class="token punctuation">.</span>subTree <span class="token operator">=</span> subTree
  <span class="token punctuation">}</span><span class="token punctuation">,</span> <span class="token punctuation">{</span> <span class="token literal-property property">scheduler</span><span class="token operator">:</span> queueJob <span class="token punctuation">}</span><span class="token punctuation">)</span>
<span class="token punctuation">}</span>
</code></pre></div><h2 id="组件生命周期" tabindex="-1"><a class="header-anchor" href="#组件生命周期"><span>组件生命周期</span></a></h2><p>组件是在 mountComponent 中创建和更新的，组件的生命周期就在 mountComponent 的各个位置切入。</p><div class="language-javascript" data-ext="js" data-title="js"><pre class="language-javascript"><code><span class="token keyword">function</span> <span class="token function">mountComponent</span><span class="token punctuation">(</span><span class="token parameter">vnode<span class="token punctuation">,</span> container</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token keyword">const</span> <span class="token punctuation">{</span> beforeCreate<span class="token punctuation">,</span> created<span class="token punctuation">,</span> beforeMount<span class="token punctuation">,</span>
          mounted<span class="token punctuation">,</span> beforeUpdate<span class="token punctuation">,</span> updated <span class="token punctuation">}</span> <span class="token operator">=</span> vnode<span class="token punctuation">.</span>type
  
  <span class="token function">beforeCreate</span><span class="token punctuation">.</span><span class="token function">call</span><span class="token punctuation">(</span>state<span class="token punctuation">)</span> 
  <span class="token keyword">const</span> state <span class="token operator">=</span> <span class="token function">reactive</span><span class="token punctuation">(</span><span class="token function">data</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
  <span class="token keyword">const</span> instance <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token punctuation">}</span> <span class="token comment">// 创建组件</span>
  vnode<span class="token punctuation">.</span>component <span class="token operator">=</span> instance
  <span class="token function">created</span><span class="token punctuation">.</span><span class="token function">call</span><span class="token punctuation">(</span>state<span class="token punctuation">)</span>

  <span class="token function">effect</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
    <span class="token keyword">const</span> subTree <span class="token operator">=</span> <span class="token function">render</span><span class="token punctuation">.</span><span class="token function">call</span><span class="token punctuation">(</span>state<span class="token punctuation">)</span>

    <span class="token keyword">if</span> <span class="token punctuation">(</span>instance<span class="token punctuation">.</span>isMounted<span class="token punctuation">)</span> <span class="token punctuation">{</span>
      <span class="token function">beforeUpdate</span><span class="token punctuation">.</span><span class="token function">call</span><span class="token punctuation">(</span>state<span class="token punctuation">)</span>
      <span class="token function">patch</span><span class="token punctuation">(</span>instance<span class="token punctuation">.</span>subTree<span class="token punctuation">,</span> subTree<span class="token punctuation">,</span> container<span class="token punctuation">)</span> <span class="token comment">// 更新组件</span>
      <span class="token function">updated</span><span class="token punctuation">.</span><span class="token function">call</span><span class="token punctuation">(</span>state<span class="token punctuation">)</span>
    <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>
      <span class="token function">beforeMount</span><span class="token punctuation">.</span><span class="token function">call</span><span class="token punctuation">(</span>state<span class="token punctuation">)</span>
      <span class="token function">patch</span><span class="token punctuation">(</span><span class="token keyword">null</span><span class="token punctuation">,</span> subTree<span class="token punctuation">,</span> container<span class="token punctuation">)</span> <span class="token comment">// 挂载组件</span>
      instance<span class="token punctuation">.</span>isMounted <span class="token operator">=</span> <span class="token boolean">true</span>
      <span class="token function">mounted</span><span class="token punctuation">.</span><span class="token function">call</span><span class="token punctuation">(</span>state<span class="token punctuation">)</span>
    <span class="token punctuation">}</span>
    instance<span class="token punctuation">.</span>subTree <span class="token operator">=</span> subTree
  <span class="token punctuation">}</span><span class="token punctuation">,</span> <span class="token punctuation">{</span> <span class="token literal-property property">scheduler</span><span class="token operator">:</span> queueJob <span class="token punctuation">}</span><span class="token punctuation">)</span>
<span class="token punctuation">}</span>
</code></pre></div><p>需要注意的是，执行生命周期函数时需要指定执行上下文。</p><h2 id="组件的-props" tabindex="-1"><a class="header-anchor" href="#组件的-props"><span>组件的 props</span></a></h2><p>对于一个组件来说，关于 props 有两点：</p><ul><li>组件定义的 props 选项</li><li>使用组件时，为组件传递的 props 数据</li></ul><p>组件定义时会显式指定组件会接收哪些数据。</p><div class="language-javascript" data-ext="js" data-title="js"><pre class="language-javascript"><code><span class="token keyword">const</span> MyComponent <span class="token operator">=</span> <span class="token punctuation">{</span>
  <span class="token literal-property property">props</span><span class="token operator">:</span> <span class="token punctuation">{</span> <span class="token literal-property property">title</span><span class="token operator">:</span> String <span class="token punctuation">}</span><span class="token punctuation">,</span> <span class="token comment">// 接收名为 title 的字符串类型 prop</span>
  <span class="token function">render</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre></div><p>使用 MyComponent 时，大概会是这样的。</p><div class="language-html" data-ext="html" data-title="html"><pre class="language-html"><code><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>MyComponent</span> <span class="token attr-name">title</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>Vue<span class="token punctuation">&quot;</span></span> <span class="token attr-name">:other</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>val<span class="token punctuation">&quot;</span></span> <span class="token punctuation">/&gt;</span></span>
</code></pre></div><p>这段模板编译成 vnode 后：</p><div class="language-javascript" data-ext="js" data-title="js"><pre class="language-javascript"><code><span class="token keyword">const</span> vnode <span class="token operator">=</span> <span class="token punctuation">{</span>
  <span class="token literal-property property">type</span><span class="token operator">:</span> MyComponent<span class="token punctuation">,</span>
  <span class="token literal-property property">props</span><span class="token operator">:</span> <span class="token punctuation">{</span>
    <span class="token literal-property property">title</span><span class="token operator">:</span> <span class="token string">&#39;Vue&#39;</span><span class="token punctuation">,</span>
    <span class="token literal-property property">other</span><span class="token operator">:</span> <span class="token keyword">this</span><span class="token punctuation">.</span>val
  <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre></div><p>可见组件定义的 props 和传递过来的 props 并不是完全对应的，我们需要解析出渲染时需要的 props 数据。</p><div class="language-javascript" data-ext="js" data-title="js"><pre class="language-javascript"><code><span class="token keyword">function</span> <span class="token function">resolveProps</span><span class="token punctuation">(</span><span class="token parameter">defsData<span class="token punctuation">,</span> propsData</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token keyword">const</span> props <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">,</span> attrs <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span>
  <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">const</span> <span class="token punctuation">[</span>key<span class="token punctuation">,</span> value<span class="token punctuation">]</span> <span class="token keyword">of</span> Object<span class="token punctuation">.</span><span class="token function">entries</span><span class="token punctuation">(</span>propsData<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span>defsData<span class="token punctuation">.</span><span class="token function">hasOwnProperty</span><span class="token punctuation">(</span>key<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span> <span class="token comment">// 组件中有定义，作为 props</span>
      props<span class="token punctuation">[</span>key<span class="token punctuation">]</span> <span class="token operator">=</span> value
    <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span> <span class="token comment">// 组件中没有定义，作为 attrs</span>
      attrs<span class="token punctuation">[</span>ley<span class="token punctuation">]</span> <span class="token operator">=</span> value
    <span class="token punctuation">}</span>
  <span class="token punctuation">}</span>
  <span class="token keyword">return</span> <span class="token punctuation">[</span>props<span class="token punctuation">,</span> attrs<span class="token punctuation">]</span>
<span class="token punctuation">}</span>
</code></pre></div><p>resolveProps 将传递给组件的值分为 props 和 attrs 返回，在组件挂载时可以使用。</p><div class="language-javascript" data-ext="js" data-title="js"><pre class="language-javascript"><code><span class="token keyword">function</span> <span class="token function">mountComponent</span><span class="token punctuation">(</span><span class="token parameter">vnode<span class="token punctuation">,</span> container</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token keyword">const</span> defsData <span class="token operator">=</span> vnode<span class="token punctuation">.</span>type<span class="token punctuation">.</span>props <span class="token comment">// 组件定义的 props</span>
  <span class="token keyword">const</span> propsData <span class="token operator">=</span> vnode<span class="token punctuation">.</span>props <span class="token comment">// 传递给组件的 props</span>

  <span class="token keyword">const</span> <span class="token punctuation">[</span>props<span class="token punctuation">,</span> attrs<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token function">resolveProps</span><span class="token punctuation">(</span>defsData<span class="token punctuation">,</span> propsData<span class="token punctuation">)</span>
  <span class="token keyword">const</span> instance <span class="token operator">=</span> <span class="token punctuation">{</span>
    state<span class="token punctuation">,</span>
    <span class="token literal-property property">props</span><span class="token operator">:</span> <span class="token function">shallowReactive</span><span class="token punctuation">(</span>props<span class="token punctuation">)</span> <span class="token comment">// 包装成响应式对象</span>
  <span class="token punctuation">}</span>
  
  <span class="token function">effect</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
    <span class="token comment">// render 中会访问到 props，暂不处理</span>
    <span class="token keyword">const</span> subTree <span class="token operator">=</span> <span class="token function">render</span><span class="token punctuation">.</span><span class="token function">call</span><span class="token punctuation">(</span>state<span class="token punctuation">)</span>

    <span class="token keyword">if</span> <span class="token punctuation">(</span>instance<span class="token punctuation">.</span>isMounted<span class="token punctuation">)</span> <span class="token punctuation">{</span>
      <span class="token function">patch</span><span class="token punctuation">(</span>instance<span class="token punctuation">.</span>subTree<span class="token punctuation">,</span> subTree<span class="token punctuation">,</span> container<span class="token punctuation">)</span> <span class="token comment">// 更新组件</span>
    <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>
      <span class="token function">patch</span><span class="token punctuation">(</span><span class="token keyword">null</span><span class="token punctuation">,</span> subTree<span class="token punctuation">,</span> container<span class="token punctuation">)</span> <span class="token comment">// 挂载组件</span>
      instance<span class="token punctuation">.</span>isMounted <span class="token operator">=</span> <span class="token boolean">true</span>
    <span class="token punctuation">}</span>
    instance<span class="token punctuation">.</span>subTree <span class="token operator">=</span> subTree
  <span class="token punctuation">}</span><span class="token punctuation">,</span> <span class="token punctuation">{</span> <span class="token literal-property property">scheduler</span><span class="token operator">:</span> queueJob <span class="token punctuation">}</span><span class="token punctuation">)</span>
<span class="token punctuation">}</span>
</code></pre></div><p>解析出 props 后，使其成为响应式对象，当传递的 props 数据变化时，触发组件更新。</p><h3 id="渲染上下文-rendercontext" tabindex="-1"><a class="header-anchor" href="#渲染上下文-rendercontext"><span>渲染上下文 renderContext</span></a></h3><p>上面提到过，render 函数需要访问组件的 state 和 props 数据，我们可以用代理来处理这个访问，这个代理对象称为渲染上下文，其本质是组件实例的代理。</p><div class="language-javascript" data-ext="js" data-title="js"><pre class="language-javascript"><code><span class="token keyword">function</span> <span class="token function">mountComponent</span><span class="token punctuation">(</span><span class="token parameter">vnode<span class="token punctuation">,</span> container</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token keyword">const</span> instance <span class="token operator">=</span> <span class="token punctuation">{</span>
    state<span class="token punctuation">,</span>
    <span class="token literal-property property">props</span><span class="token operator">:</span> <span class="token function">shallowReactive</span><span class="token punctuation">(</span>props<span class="token punctuation">)</span>
  <span class="token punctuation">}</span>
  
  <span class="token keyword">const</span> renderContext <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Proxy</span><span class="token punctuation">(</span>instance<span class="token punctuation">,</span> <span class="token punctuation">{</span>
    <span class="token function">get</span><span class="token punctuation">(</span>target<span class="token punctuation">,</span> key<span class="token punctuation">,</span> receiver<span class="token punctuation">)</span> <span class="token punctuation">{</span> <span class="token comment">// target 是 instance</span>
      <span class="token keyword">const</span> <span class="token punctuation">{</span> state<span class="token punctuation">,</span> props <span class="token punctuation">}</span> <span class="token operator">=</span> target

      <span class="token keyword">if</span> <span class="token punctuation">(</span>key <span class="token keyword">in</span> state<span class="token punctuation">)</span> <span class="token keyword">return</span> state<span class="token punctuation">[</span>key<span class="token punctuation">]</span> <span class="token comment">// 从 state 中取</span>
      <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>key <span class="token keyword">in</span> props<span class="token punctuation">)</span> <span class="token keyword">return</span> props<span class="token punctuation">[</span>key<span class="token punctuation">]</span> <span class="token comment">// 从 props 中取</span>
      <span class="token comment">// computed、methods 等</span>
    <span class="token punctuation">}</span><span class="token punctuation">,</span>
    <span class="token function">set</span><span class="token punctuation">(</span>target<span class="token punctuation">,</span> key<span class="token punctuation">,</span> value<span class="token punctuation">,</span> receiver<span class="token punctuation">)</span> <span class="token punctuation">{</span>
      <span class="token comment">// 与 get 中的逻辑类似</span>
    <span class="token punctuation">}</span>
  <span class="token punctuation">}</span><span class="token punctuation">)</span>
  
  <span class="token function">render</span><span class="token punctuation">.</span><span class="token function">call</span><span class="token punctuation">(</span>renderContext<span class="token punctuation">)</span> <span class="token comment">// 绑定渲染上下文</span>
<span class="token punctuation">}</span>
</code></pre></div><p>renderContext 拦截了对 state 和 props 等数据的 get 和 set 操作，每当 render 函数或生命周期函数访问这些数据时，优先从 state 获取。</p><h2 id="patchcomponent" tabindex="-1"><a class="header-anchor" href="#patchcomponent"><span>patchComponent</span></a></h2><p>回顾 patch 函数，更新组件调用的是 patchComponent 函数。</p><div class="language-javascript" data-ext="js" data-title="js"><pre class="language-javascript"><code><span class="token keyword">function</span> <span class="token function">patch</span><span class="token punctuation">(</span><span class="token parameter">n1<span class="token punctuation">,</span> n2<span class="token punctuation">,</span> container</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token keyword">typeof</span> n2<span class="token punctuation">.</span>type <span class="token operator">===</span> <span class="token string">&#39;string&#39;</span><span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token punctuation">}</span> <span class="token comment">// 普通标签</span>
  <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token keyword">typeof</span> n2<span class="token punctuation">.</span>type <span class="token operator">===</span> <span class="token string">&#39;object&#39;</span><span class="token punctuation">)</span> <span class="token punctuation">{</span> <span class="token comment">// 组件 vnode</span>
    n1 <span class="token operator">?</span>
      <span class="token function">patchComponent</span><span class="token punctuation">(</span>n1<span class="token punctuation">,</span> n2<span class="token punctuation">,</span> container<span class="token punctuation">)</span>
      <span class="token operator">:</span> <span class="token function">mountComponent</span><span class="token punctuation">(</span>n2<span class="token punctuation">,</span> container<span class="token punctuation">)</span>
  <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre></div><p>当组件的 props 数据变化时，我们首先需要判断 props 是否真的有更新。</p><div class="language-javascript" data-ext="js" data-title="js"><pre class="language-javascript"><code><span class="token keyword">function</span> <span class="token function">hasPropsChanged</span><span class="token punctuation">(</span><span class="token parameter">prevProps<span class="token punctuation">,</span> nextProps</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token keyword">const</span> nextKeys <span class="token operator">=</span> Object<span class="token punctuation">.</span><span class="token function">keys</span><span class="token punctuation">(</span>nextProps<span class="token punctuation">)</span>
  <span class="token keyword">const</span> prevKeys <span class="token operator">=</span> Object<span class="token punctuation">.</span><span class="token function">keys</span><span class="token punctuation">(</span>prevProps<span class="token punctuation">)</span>
  
  <span class="token comment">// 数量不同或存在一项不同的值</span>
  <span class="token keyword">return</span> nextKeys<span class="token punctuation">.</span>length <span class="token operator">!==</span> prevKeys<span class="token punctuation">.</span>length
    <span class="token operator">||</span> nextKeys<span class="token punctuation">.</span><span class="token function">any</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token parameter">nextKey<span class="token punctuation">,</span> i</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> nextProps<span class="token punctuation">[</span>nextKey<span class="token punctuation">]</span> <span class="token operator">!==</span> prevProps<span class="token punctuation">[</span>prevKeys<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">)</span>
<span class="token punctuation">}</span>
</code></pre></div><p>如果有更新，则更新 props 并删除旧的 props。</p><div class="language-javascript" data-ext="js" data-title="js"><pre class="language-javascript"><code><span class="token keyword">function</span> <span class="token function">patchComponent</span><span class="token punctuation">(</span><span class="token parameter">n1<span class="token punctuation">,</span> n2<span class="token punctuation">,</span> container</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token keyword">const</span> instance <span class="token operator">=</span> n2<span class="token punctuation">.</span>component <span class="token operator">=</span> n1<span class="token punctuation">.</span>component
  <span class="token keyword">const</span> props <span class="token operator">=</span> instance<span class="token punctuation">.</span>props
  
  <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">hasPropsChanged</span><span class="token punctuation">(</span>n1<span class="token punctuation">.</span>props<span class="token punctuation">,</span> n2<span class="token punctuation">.</span>props<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token comment">// 重新 resolve</span>
    <span class="token keyword">const</span> <span class="token punctuation">[</span>nextProps<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token function">resolveProps</span><span class="token punctuation">(</span>n2<span class="token punctuation">.</span>type<span class="token punctuation">.</span>props<span class="token punctuation">,</span> n2<span class="token punctuation">.</span>props<span class="token punctuation">)</span>
    <span class="token comment">// 更新 props</span>
    Object<span class="token punctuation">.</span>keys<span class="token punctuation">.</span><span class="token function">forEach</span><span class="token punctuation">(</span><span class="token parameter">key</span> <span class="token operator">=&gt;</span> props<span class="token punctuation">[</span>key<span class="token punctuation">]</span> <span class="token operator">=</span> nextProps<span class="token punctuation">[</span>key<span class="token punctuation">]</span><span class="token punctuation">)</span>
    <span class="token comment">// 删除不存在的 props</span>
    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">const</span> k <span class="token keyword">in</span> props<span class="token punctuation">)</span> <span class="token punctuation">{</span>
      <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>k <span class="token keyword">in</span> nextProps<span class="token punctuation">)</span> <span class="token keyword">delete</span> props<span class="token punctuation">[</span>k<span class="token punctuation">]</span>
    <span class="token punctuation">}</span>
  <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre></div>`,62),e=[o];function c(u,l){return s(),a("div",null,e)}const r=n(p,[["render",c],["__file","4.component.html.vue"]]),d=JSON.parse('{"path":"/vue3/4.component.html","title":"component","lang":"zh-CN","frontmatter":{"description":"component 回顾之前的 patch 函数。 在 patch 一个 vnode 时，会根据 vnode.type 做出相应的操作。当 vnode.type 是一个对象时，这个对象描述的是一个组件。 一个组件对象基本结构如下，其中 render 函数是必不可少的，且 render 函数返回的应该是 vnode。 对于一个组件类型的 vnode 而言...","head":[["meta",{"property":"og:url","content":"https://yamsfeer.github.io/notes-fe/vue3/4.component.html"}],["meta",{"property":"og:site_name","content":"yamsfeer"}],["meta",{"property":"og:title","content":"component"}],["meta",{"property":"og:description","content":"component 回顾之前的 patch 函数。 在 patch 一个 vnode 时，会根据 vnode.type 做出相应的操作。当 vnode.type 是一个对象时，这个对象描述的是一个组件。 一个组件对象基本结构如下，其中 render 函数是必不可少的，且 render 函数返回的应该是 vnode。 对于一个组件类型的 vnode 而言..."}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:locale","content":"zh-CN"}],["meta",{"property":"og:updated_time","content":"2024-04-12T16:21:32.000Z"}],["meta",{"property":"article:modified_time","content":"2024-04-12T16:21:32.000Z"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"component\\",\\"image\\":[\\"\\"],\\"dateModified\\":\\"2024-04-12T16:21:32.000Z\\",\\"author\\":[]}"]]},"headers":[{"level":2,"title":"mountComponent","slug":"mountcomponent","link":"#mountcomponent","children":[{"level":3,"title":"响应系统与组件","slug":"响应系统与组件","link":"#响应系统与组件","children":[]},{"level":3,"title":"组件更新调度器","slug":"组件更新调度器","link":"#组件更新调度器","children":[]}]},{"level":2,"title":"组件实例","slug":"组件实例","link":"#组件实例","children":[]},{"level":2,"title":"组件生命周期","slug":"组件生命周期","link":"#组件生命周期","children":[]},{"level":2,"title":"组件的 props","slug":"组件的-props","link":"#组件的-props","children":[{"level":3,"title":"渲染上下文 renderContext","slug":"渲染上下文-rendercontext","link":"#渲染上下文-rendercontext","children":[]}]},{"level":2,"title":"patchComponent","slug":"patchcomponent","link":"#patchcomponent","children":[]}],"git":{"createdTime":1712938892000,"updatedTime":1712938892000,"contributors":[{"name":"yamsfeer","email":"feer.yams@gmail.com","commits":1}]},"readingTime":{"minutes":5.82,"words":1746},"filePathRelative":"vue3/4.component.md","localizedDate":"2024年4月12日","autoDesc":true}');export{r as comp,d as data};
