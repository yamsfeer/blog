import{_ as n}from"./plugin-vue_export-helper-DlAUqK2U.js";import{o as s,c as a,a as t}from"./app-BPFsuHku.js";const p={},o=t(`<h1 id="transform" tabindex="-1"><a class="header-anchor" href="#transform"><span>transform</span></a></h1><p>通过 parse 函数，我们已经将模板转换为 AST。transform 函数要做的事将模板 AST 转换为 JavaScript AST。</p><h2 id="遍历-ast" tabindex="-1"><a class="header-anchor" href="#遍历-ast"><span>遍历 AST</span></a></h2><p>为了转换 AST，我们需要遍历 AST 的每个节点，并对特定节点进行修改、删除等操作。</p><div class="language-javascript" data-ext="js" data-title="js"><pre class="language-javascript"><code><span class="token keyword">function</span> <span class="token function">traverse</span><span class="token punctuation">(</span><span class="token parameter">node</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>node<span class="token punctuation">)</span> <span class="token keyword">return</span>

  <span class="token comment">// process node</span>

  node<span class="token punctuation">.</span>children<span class="token punctuation">.</span><span class="token function">forEach</span><span class="token punctuation">(</span><span class="token parameter">child</span> <span class="token operator">=&gt;</span> <span class="token function">traverse</span><span class="token punctuation">(</span>child<span class="token punctuation">)</span><span class="token punctuation">)</span>
<span class="token punctuation">}</span>
</code></pre></div><p>traverse 函数是一个先序遍历 AST 的函数，在 process node 的位置可以对当前节点进行转换操作。</p><p>我们再写一个打印 AST 所有节点的函数 print，它和 traverse 函数一样，先序遍历所有节点并打印信息。</p><div class="language-javascript" data-ext="js" data-title="js"><pre class="language-javascript"><code><span class="token keyword">function</span> <span class="token function">print</span><span class="token punctuation">(</span><span class="token parameter">node<span class="token punctuation">,</span> indent <span class="token operator">=</span> <span class="token number">0</span></span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>node<span class="token punctuation">)</span> <span class="token keyword">return</span>

  <span class="token keyword">const</span> desc <span class="token operator">=</span> node<span class="token punctuation">.</span>type <span class="token operator">===</span> <span class="token string">&#39;Root&#39;</span>
    <span class="token operator">?</span> <span class="token string">&#39;&#39;</span>
    <span class="token operator">:</span> node<span class="token punctuation">.</span>type <span class="token operator">===</span> <span class="token string">&#39;Element&#39;</span>
      <span class="token operator">?</span> node<span class="token punctuation">.</span>tag
      <span class="token operator">:</span> node<span class="token punctuation">.</span>content
  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token template-string"><span class="token template-punctuation string">\`</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">\${</span><span class="token string">&#39;-&#39;</span><span class="token punctuation">.</span><span class="token function">repeat</span><span class="token punctuation">(</span>indent<span class="token punctuation">)</span><span class="token interpolation-punctuation punctuation">}</span></span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">\${</span>node<span class="token punctuation">.</span>type<span class="token interpolation-punctuation punctuation">}</span></span><span class="token string">:</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">\${</span>desc<span class="token interpolation-punctuation punctuation">}</span></span><span class="token template-punctuation string">\`</span></span><span class="token punctuation">)</span>
  
  node<span class="token punctuation">.</span>children<span class="token punctuation">.</span><span class="token function">forEach</span><span class="token punctuation">(</span><span class="token parameter">child</span> <span class="token operator">=&gt;</span> <span class="token function">print</span><span class="token punctuation">(</span>child<span class="token punctuation">,</span> index <span class="token operator">+</span> <span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
<span class="token punctuation">}</span>
</code></pre></div><p>将模板 AST 转换为 JavaScript AST 的 transform 函数是这样的。</p><div class="language-javascript" data-ext="js" data-title="js"><pre class="language-javascript"><code><span class="token keyword">function</span> <span class="token function">transform</span><span class="token punctuation">(</span><span class="token parameter">ast</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token function">traverse</span><span class="token punctuation">(</span>ast<span class="token punctuation">)</span>
  <span class="token function">print</span><span class="token punctuation">(</span>ast<span class="token punctuation">)</span>
<span class="token punctuation">}</span>
</code></pre></div><h2 id="转换上下文-transformcontext" tabindex="-1"><a class="header-anchor" href="#转换上下文-transformcontext"><span>转换上下文 transformContext</span></a></h2><p>所谓上下文 ( context ) 就相当于某个范围内的全局变量。</p><p>在 transform 某个节点时，我们需要知道当前节点的父节点、在父节点的 children 的索引位置等信息。</p><div class="language-javascript" data-ext="js" data-title="js"><pre class="language-javascript"><code><span class="token keyword">const</span> context <span class="token operator">=</span> <span class="token punctuation">{</span>
  <span class="token literal-property property">currentNode</span><span class="token operator">:</span> <span class="token keyword">null</span><span class="token punctuation">,</span>
  <span class="token literal-property property">childIndex</span><span class="token operator">:</span> <span class="token number">0</span><span class="token punctuation">,</span>
  <span class="token literal-property property">parent</span><span class="token operator">:</span> <span class="token keyword">null</span><span class="token punctuation">,</span>
  <span class="token literal-property property">nodeTransforms</span><span class="token operator">:</span> <span class="token punctuation">[</span> <span class="token comment">// 转换节点，后面介绍</span>
    transformRoot<span class="token punctuation">,</span>
    transformElement<span class="token punctuation">,</span>
    transformText
  <span class="token punctuation">]</span>
<span class="token punctuation">}</span>
</code></pre></div><p>transformContext 就是 transform 过程的全局变量，它会在整个遍历过程中被修改和传递。</p><div class="language-javascript" data-ext="js" data-title="js"><pre class="language-javascript"><code><span class="token keyword">function</span> <span class="token function">traverse</span><span class="token punctuation">(</span><span class="token parameter">node<span class="token punctuation">,</span> context</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token keyword">if</span> <span class="token punctuation">(</span>node <span class="token operator">===</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token keyword">return</span>
  
  context<span class="token punctuation">.</span>currentNode <span class="token operator">=</span> node
  context<span class="token punctuation">.</span>nodeTransforms<span class="token punctuation">.</span><span class="token function">forEach</span><span class="token punctuation">(</span><span class="token parameter">transform</span> <span class="token operator">=&gt;</span> <span class="token function">transform</span><span class="token punctuation">(</span>node<span class="token punctuation">,</span> context<span class="token punctuation">)</span><span class="token punctuation">)</span>
  
  node<span class="token punctuation">.</span>children<span class="token punctuation">.</span><span class="token function">forEach</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token parameter">child<span class="token punctuation">,</span> i</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
    context<span class="token punctuation">.</span>parent <span class="token operator">=</span> context<span class="token punctuation">.</span>currentNode
    context<span class="token punctuation">.</span>childIndex <span class="token operator">=</span> i
    <span class="token function">traverse</span><span class="token punctuation">(</span>child<span class="token punctuation">,</span> context<span class="token punctuation">)</span>
  <span class="token punctuation">}</span><span class="token punctuation">)</span>
<span class="token punctuation">}</span>
</code></pre></div><p>可以看到，transformContext 的 currentNode、childIndex 等属性在 traverse 过程中不断更新，并传递给子过程，因此每次转换节点时都能在 context 对象中找到需要的信息。</p><h3 id="节点操作" tabindex="-1"><a class="header-anchor" href="#节点操作"><span>节点操作</span></a></h3><p>transform 过程中，我们可能需要替换或删除当前节点。</p><div class="language-javascript" data-ext="js" data-title="js"><pre class="language-javascript"><code><span class="token keyword">const</span> context <span class="token operator">=</span> <span class="token punctuation">{</span>
  <span class="token literal-property property">currentNode</span><span class="token operator">:</span> <span class="token keyword">null</span><span class="token punctuation">,</span>
  <span class="token literal-property property">parent</span><span class="token operator">:</span> <span class="token keyword">null</span><span class="token punctuation">,</span>
  <span class="token function">replaceNode</span><span class="token punctuation">(</span><span class="token parameter">newNode</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    context<span class="token punctuation">.</span>currentNode <span class="token operator">=</span> newNode <span class="token comment">// 更新当前节点</span>
    context<span class="token punctuation">.</span>parent<span class="token punctuation">.</span>children<span class="token punctuation">[</span>context<span class="token punctuation">.</span>childIndex<span class="token punctuation">]</span> <span class="token operator">=</span> newNode <span class="token comment">// 更新父子关系</span>
  <span class="token punctuation">}</span><span class="token punctuation">,</span>
  <span class="token function">removeNode</span><span class="token punctuation">(</span><span class="token parameter">node</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>context<span class="token punctuation">.</span>parent<span class="token punctuation">)</span> <span class="token keyword">return</span>
    <span class="token comment">// 从父节点的 children 中删除</span>
    context<span class="token punctuation">.</span>parent<span class="token punctuation">.</span>children<span class="token punctuation">.</span><span class="token function">splice</span><span class="token punctuation">(</span>context<span class="token punctuation">.</span>childInex<span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">)</span>
    context<span class="token punctuation">.</span>currentNode <span class="token operator">=</span> <span class="token keyword">null</span>
  <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre></div><p>有一点需要注意，删除节点后，后续的转换便不再需要处理该节点，所以，traverse 函数需要做些调整。</p><div class="language-javascript" data-ext="js" data-title="js"><pre class="language-javascript"><code><span class="token keyword">function</span> <span class="token function">traverse</span><span class="token punctuation">(</span><span class="token parameter">node<span class="token punctuation">,</span> context</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  context<span class="token punctuation">.</span>currentNode <span class="token operator">=</span> node

  <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">const</span> transform <span class="token keyword">of</span> context<span class="token punctuation">.</span>nodeTransforms<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token function">transform</span><span class="token punctuation">(</span>node<span class="token punctuation">,</span> context<span class="token punctuation">)</span> <span class="token comment">// 每个转换函数都可能删除节点</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>context<span class="token punctuation">.</span>currentNode<span class="token punctuation">)</span> <span class="token comment">// 删除后，该节点的后序转换及其子树节点都不需要处理</span>
      <span class="token keyword">return</span>
  <span class="token punctuation">}</span>
  
  <span class="token comment">// node.children.forEach(...)</span>
<span class="token punctuation">}</span>
</code></pre></div><h3 id="进入与退出" tabindex="-1"><a class="header-anchor" href="#进入与退出"><span>进入与退出</span></a></h3><p>在转化节点过程中，往往需要根据子节点的情况来决定如何对当前节点进行转换。这就要求转换父节点时，子节点已全部转换完毕。</p><p>对树节点的访问分为两个阶段：进入阶段和退出阶段，在退出阶段时，该节点的子节点已经访问完成。对此，我们可以对 traverse 函数做些修改。</p><div class="language-javascript" data-ext="js" data-title="js"><pre class="language-javascript"><code><span class="token keyword">function</span> <span class="token function">traverse</span><span class="token punctuation">(</span><span class="token parameter">node<span class="token punctuation">,</span> context</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  context<span class="token punctuation">.</span>currentNode <span class="token operator">=</span> node
  <span class="token keyword">const</span> exitFns <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span>

  <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">const</span> transform <span class="token keyword">of</span> context<span class="token punctuation">.</span>nodeTransforms<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">const</span> onExit <span class="token operator">=</span> <span class="token function">transforms</span><span class="token punctuation">(</span>node<span class="token punctuation">,</span> context<span class="token punctuation">)</span>
    onExit <span class="token operator">&amp;&amp;</span> exitFns<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span>onExit<span class="token punctuation">)</span> <span class="token comment">// 退出阶段的回调函数存起来</span>

    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>context<span class="token punctuation">.</span>currentNode<span class="token punctuation">)</span> <span class="token keyword">return</span>
  <span class="token punctuation">}</span>
  
  <span class="token comment">// node.children.forEach(...)</span>
  
  <span class="token keyword">while</span><span class="token punctuation">(</span>exitFns<span class="token punctuation">.</span>length<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    exitFns<span class="token punctuation">.</span><span class="token function">pop</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token comment">// 执行缓存的 onExit 函数</span>
  <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre></div><p>这样一来，凡是需要子节点处理完成时，转换函数只需要返回一个回调即可。</p><div class="language-javascript" data-ext="js" data-title="js"><pre class="language-javascript"><code><span class="token keyword">function</span> <span class="token function">transformElement</span><span class="token punctuation">(</span><span class="token parameter">node<span class="token punctuation">,</span> context</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token comment">// 进入节点</span>
  
  <span class="token keyword">return</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span> <span class="token comment">/* onExit */</span><span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre></div><h2 id="transform-1" tabindex="-1"><a class="header-anchor" href="#transform-1"><span>transform</span></a></h2><p>以上都是为转换做的准备工作，我们可以遍历 AST，也提供了替换、删除 AST 节点的 transformContext，</p><h3 id="javascript-ast-的数据结构" tabindex="-1"><a class="header-anchor" href="#javascript-ast-的数据结构"><span>JavaScript AST 的数据结构</span></a></h3><p>下面是一段 vue 模板代码。</p><div class="language-html" data-ext="html" data-title="html"><pre class="language-html"><code><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>p</span><span class="token punctuation">&gt;</span></span>vue<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>p</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">&gt;</span></span>
</code></pre></div><p>我们的最终目标是得到以下 render 函数代码。</p><div class="language-javascript" data-ext="js" data-title="js"><pre class="language-javascript"><code><span class="token keyword">function</span> <span class="token function">render</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token keyword">return</span> <span class="token function">h</span><span class="token punctuation">(</span><span class="token string">&#39;div&#39;</span><span class="token punctuation">,</span> <span class="token punctuation">[</span>
    <span class="token function">h</span><span class="token punctuation">(</span><span class="token string">&#39;p&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;vue&#39;</span><span class="token punctuation">)</span>
  <span class="token punctuation">]</span><span class="token punctuation">)</span>
<span class="token punctuation">}</span>
</code></pre></div><p>也就是说，模板 AST 需要转换以上代码对应的 AST。观察这段代码，它首先是一个<strong>函数定义</strong>，函数体的<strong>返回值</strong>是一个<strong>函数调用</strong>。接下来分别定义这些代码对应的数据结构。</p><p>函数定义的数据结构如下，函数有函数名、参数、函数体等元素。</p><div class="language-javascript" data-ext="js" data-title="js"><pre class="language-javascript"><code><span class="token keyword">const</span> FunctionDecl <span class="token operator">=</span> <span class="token punctuation">{</span>
  <span class="token literal-property property">type</span><span class="token operator">:</span> <span class="token string">&#39;FunctionDecl&#39;</span><span class="token punctuation">,</span>
  <span class="token literal-property property">id</span><span class="token operator">:</span> <span class="token punctuation">{</span> <span class="token literal-property property">type</span><span class="token operator">:</span> <span class="token string">&#39;Identifier&#39;</span><span class="token punctuation">,</span> <span class="token literal-property property">name</span><span class="token operator">:</span> <span class="token string">&#39;render&#39;</span> <span class="token punctuation">}</span><span class="token punctuation">,</span>
  <span class="token literal-property property">params</span><span class="token operator">:</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">,</span>
  <span class="token literal-property property">body</span><span class="token operator">:</span> <span class="token punctuation">[</span>
    <span class="token punctuation">{</span> <span class="token literal-property property">type</span><span class="token operator">:</span> <span class="token string">&#39;ReturnStatement&#39;</span><span class="token punctuation">,</span> <span class="token keyword">return</span><span class="token operator">:</span> <span class="token keyword">null</span> <span class="token punctuation">}</span>
  <span class="token punctuation">]</span>
<span class="token punctuation">}</span>
</code></pre></div><p>函数调用有被调用的函数名、参数这两个元素。</p><div class="language-javascript" data-ext="js" data-title="js"><pre class="language-javascript"><code><span class="token keyword">const</span> CallExp <span class="token operator">=</span> <span class="token punctuation">{</span>
  <span class="token literal-property property">type</span><span class="token operator">:</span> <span class="token string">&#39;CallExpression&#39;</span><span class="token punctuation">,</span>
  <span class="token literal-property property">callee</span><span class="token operator">:</span> <span class="token punctuation">{</span> <span class="token literal-property property">type</span><span class="token operator">:</span> <span class="token string">&#39;Identifier&#39;</span><span class="token punctuation">,</span> <span class="token literal-property property">name</span><span class="token operator">:</span> <span class="token string">&#39;h&#39;</span> <span class="token punctuation">}</span><span class="token punctuation">,</span>
  <span class="token literal-property property">arguments</span><span class="token operator">:</span> <span class="token punctuation">[</span><span class="token punctuation">]</span>
<span class="token punctuation">}</span>
</code></pre></div><p>此外，调用 h 函数时，参数有字符串和数组类型，它们也要分别定义。</p><div class="language-javascript" data-ext="js" data-title="js"><pre class="language-javascript"><code><span class="token keyword">const</span> StrLiteral <span class="token operator">=</span> <span class="token punctuation">{</span> <span class="token literal-property property">type</span><span class="token operator">:</span> <span class="token string">&#39;StringLiteral&#39;</span><span class="token punctuation">,</span> <span class="token literal-property property">value</span><span class="token operator">:</span> <span class="token string">&#39;div&#39;</span> <span class="token punctuation">}</span>
<span class="token keyword">const</span> Arr <span class="token operator">=</span> <span class="token punctuation">{</span> <span class="token literal-property property">type</span><span class="token operator">:</span> <span class="token string">&#39;ArrayExpression&#39;</span><span class="token punctuation">,</span> <span class="token literal-property property">elements</span><span class="token operator">:</span> <span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token punctuation">}</span>
</code></pre></div><p>基于以上数据结构，结合 render 函数代码，我们可以得到 render 函数的 AST 大概如下。</p><div class="language-javascript" data-ext="js" data-title="js"><pre class="language-javascript"><code><span class="token keyword">function</span> <span class="token function">render</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token keyword">return</span> <span class="token function">h</span><span class="token punctuation">(</span><span class="token string">&#39;div&#39;</span><span class="token punctuation">,</span> <span class="token punctuation">[</span>
    <span class="token function">h</span><span class="token punctuation">(</span><span class="token string">&#39;p&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;vue&#39;</span><span class="token punctuation">)</span>
  <span class="token punctuation">]</span><span class="token punctuation">)</span>
<span class="token punctuation">}</span>
</code></pre></div><div class="language-javascript" data-ext="js" data-title="js"><pre class="language-javascript"><code><span class="token keyword">const</span> FunctionDecl <span class="token operator">=</span> <span class="token punctuation">{</span>
  <span class="token literal-property property">type</span><span class="token operator">:</span> <span class="token string">&#39;FunctionDecl&#39;</span><span class="token punctuation">,</span>
  <span class="token literal-property property">id</span><span class="token operator">:</span> <span class="token punctuation">{</span> <span class="token literal-property property">type</span><span class="token operator">:</span> <span class="token string">&#39;Identifier&#39;</span><span class="token punctuation">,</span> <span class="token literal-property property">name</span><span class="token operator">:</span> <span class="token string">&#39;render&#39;</span> <span class="token punctuation">}</span><span class="token punctuation">,</span>
  <span class="token literal-property property">params</span><span class="token operator">:</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">,</span>
  <span class="token literal-property property">body</span><span class="token operator">:</span> <span class="token punctuation">[</span><span class="token punctuation">{</span>
    <span class="token literal-property property">type</span><span class="token operator">:</span> <span class="token string">&#39;ReturnStatement&#39;</span><span class="token punctuation">,</span> <span class="token comment">// 返回值</span>
    <span class="token keyword">return</span><span class="token operator">:</span> <span class="token punctuation">{</span>
      <span class="token literal-property property">type</span><span class="token operator">:</span> <span class="token string">&#39;CallExpression&#39;</span><span class="token punctuation">,</span> <span class="token comment">// 第一个 h</span>
      <span class="token literal-property property">callee</span><span class="token operator">:</span> <span class="token punctuation">{</span> <span class="token literal-property property">type</span><span class="token operator">:</span> <span class="token string">&#39;Identifier&#39;</span><span class="token punctuation">,</span> <span class="token literal-property property">name</span><span class="token operator">:</span> <span class="token string">&#39;h&#39;</span> <span class="token punctuation">}</span><span class="token punctuation">,</span>
      <span class="token literal-property property">arguments</span><span class="token operator">:</span> <span class="token punctuation">[</span> <span class="token comment">// 第一个 h 的参数</span>
        <span class="token punctuation">{</span> <span class="token literal-property property">type</span><span class="token operator">:</span> <span class="token string">&#39;StringLiteral&#39;</span><span class="token punctuation">,</span> <span class="token literal-property property">value</span><span class="token operator">:</span> <span class="token string">&#39;div&#39;</span> <span class="token punctuation">}</span><span class="token punctuation">,</span>
        <span class="token punctuation">{</span> <span class="token literal-property property">type</span><span class="token operator">:</span> <span class="token string">&#39;ArrayExpression&#39;</span><span class="token punctuation">,</span>
          <span class="token literal-property property">elemetns</span><span class="token operator">:</span> <span class="token punctuation">[</span><span class="token punctuation">{</span>
            <span class="token literal-property property">type</span><span class="token operator">:</span> <span class="token string">&#39;CallExpression&#39;</span><span class="token punctuation">,</span> <span class="token comment">// 第二个 h</span>
            <span class="token literal-property property">callee</span><span class="token operator">:</span> <span class="token punctuation">{</span> <span class="token literal-property property">type</span><span class="token operator">:</span> <span class="token string">&#39;Identifier&#39;</span><span class="token punctuation">,</span> <span class="token literal-property property">name</span><span class="token operator">:</span> <span class="token string">&#39;h&#39;</span> <span class="token punctuation">}</span><span class="token punctuation">,</span>
            <span class="token literal-property property">arguments</span><span class="token operator">:</span> <span class="token punctuation">[</span> <span class="token comment">// 第二个 h 的参数</span>
              <span class="token punctuation">{</span> <span class="token literal-property property">type</span><span class="token operator">:</span> <span class="token string">&#39;StringLiteral&#39;</span><span class="token punctuation">,</span> <span class="token literal-property property">value</span><span class="token operator">:</span> <span class="token string">&#39;p&#39;</span> <span class="token punctuation">}</span><span class="token punctuation">,</span>
              <span class="token punctuation">{</span> <span class="token literal-property property">type</span><span class="token operator">:</span> <span class="token string">&#39;StringLiteral&#39;</span><span class="token punctuation">,</span> <span class="token literal-property property">value</span><span class="token operator">:</span> <span class="token string">&#39;vue&#39;</span> <span class="token punctuation">}</span><span class="token punctuation">,</span>
            <span class="token punctuation">]</span>
          <span class="token punctuation">}</span><span class="token punctuation">]</span>
        <span class="token punctuation">}</span><span class="token punctuation">,</span>
      <span class="token punctuation">]</span>
    <span class="token punctuation">}</span>
  <span class="token punctuation">}</span><span class="token punctuation">]</span>
<span class="token punctuation">}</span>
</code></pre></div><p>我们再写几个创建这些节点的工具函数。</p><div class="language-javascript" data-ext="js" data-title="js"><pre class="language-javascript"><code><span class="token keyword">const</span> <span class="token function-variable function">createStringLiteral</span> <span class="token operator">=</span> <span class="token parameter">value</span> <span class="token operator">=&gt;</span> <span class="token punctuation">(</span><span class="token punctuation">{</span> <span class="token literal-property property">type</span><span class="token operator">:</span> <span class="token string">&#39;StringLiteral&#39;</span><span class="token punctuation">,</span> value <span class="token punctuation">}</span><span class="token punctuation">)</span>
<span class="token keyword">const</span> <span class="token function-variable function">createArrayExpression</span> <span class="token operator">=</span> <span class="token parameter">elements</span> <span class="token operator">=&gt;</span> <span class="token punctuation">(</span><span class="token punctuation">{</span> <span class="token literal-property property">type</span><span class="token operator">:</span> <span class="token string">&#39;ArrayExpression&#39;</span><span class="token punctuation">,</span> elements <span class="token punctuation">}</span><span class="token punctuation">)</span>
<span class="token keyword">const</span> <span class="token function-variable function">createCallExpression</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token parameter">callee<span class="token punctuation">,</span> arguments</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">(</span><span class="token punctuation">{</span>
  <span class="token literal-property property">type</span><span class="token operator">:</span> <span class="token string">&#39;CallExpression&#39;</span><span class="token punctuation">,</span>
  <span class="token literal-property property">callee</span><span class="token operator">:</span> <span class="token function">createIdentifier</span><span class="token punctuation">(</span>callee<span class="token punctuation">)</span><span class="token punctuation">,</span>
  arguments
<span class="token punctuation">}</span><span class="token punctuation">)</span>
</code></pre></div><h3 id="转换函数" tabindex="-1"><a class="header-anchor" href="#转换函数"><span>转换函数</span></a></h3><p>回顾一下 transformContext 的内容，它有一个 nodeTransforms 数组，里面存放的是转换节点的函数。</p><div class="language-javascript" data-ext="js" data-title="js"><pre class="language-javascript"><code><span class="token keyword">const</span> context <span class="token operator">=</span> <span class="token punctuation">{</span>
  <span class="token literal-property property">nodeTransforms</span><span class="token operator">:</span> <span class="token punctuation">[</span> <span class="token comment">// 转换节点</span>
    transformRoot<span class="token punctuation">,</span>
    transformElement<span class="token punctuation">,</span>
    transformText
  <span class="token punctuation">]</span>
<span class="token punctuation">}</span>
</code></pre></div><p>在 traverse 过程中，会对当前节点依次调用转换函数。</p><div class="language-javascript" data-ext="js" data-title="js"><pre class="language-javascript"><code><span class="token keyword">function</span> <span class="token function">traverse</span><span class="token punctuation">(</span><span class="token parameter">node<span class="token punctuation">,</span> context</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token keyword">if</span> <span class="token punctuation">(</span>node <span class="token operator">===</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token keyword">return</span>
  
  context<span class="token punctuation">.</span>currentNode <span class="token operator">=</span> node
  <span class="token comment">// 转换函数</span>
  context<span class="token punctuation">.</span>nodeTransforms<span class="token punctuation">.</span><span class="token function">forEach</span><span class="token punctuation">(</span><span class="token parameter">transform</span> <span class="token operator">=&gt;</span> <span class="token function">transform</span><span class="token punctuation">(</span>node<span class="token punctuation">,</span> context<span class="token punctuation">)</span><span class="token punctuation">)</span>
  
  <span class="token comment">// node.children.forEach(...)</span>
<span class="token punctuation">}</span>
</code></pre></div><p>转换会将模板 AST 的节点转换成 JavaScript AST 的节点并挂载到当前节点的 jSNode 属性上 ( 注意，只是挂载，并没有 replace )。</p><p>transformText 相对简单，只需创建一个对应的 StrLiteral 节点即可。</p><div class="language-javascript" data-ext="js" data-title="js"><pre class="language-javascript"><code><span class="token keyword">function</span> <span class="token function">transformText</span><span class="token punctuation">(</span><span class="token parameter">node</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>node<span class="token punctuation">.</span>type <span class="token operator">===</span> <span class="token string">&#39;Text&#39;</span><span class="token punctuation">)</span> <span class="token keyword">return</span>
  
  <span class="token comment">// 计算 JS AST 节点，挂载到当前节点的 jsNode 属性上</span>
  node<span class="token punctuation">.</span>jsNode <span class="token operator">=</span> <span class="token function">createStringLiteral</span><span class="token punctuation">(</span>node<span class="token punctuation">.</span>content<span class="token punctuation">)</span>
<span class="token punctuation">}</span>
</code></pre></div><p>一个 element 节点要转换成 <code>h(tag, children)</code> 的形式，其中 tag 是 StringLiteral 类型，element 的每个子节点都对应一个 h 函数调用。</p><div class="language-javascript" data-ext="js" data-title="js"><pre class="language-javascript"><code><span class="token keyword">function</span> <span class="token function">transformElement</span><span class="token punctuation">(</span><span class="token parameter">node</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token keyword">return</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span>node<span class="token punctuation">.</span>type <span class="token operator">!==</span> <span class="token string">&#39;Element&#39;</span><span class="token punctuation">)</span> <span class="token keyword">return</span>
    
    <span class="token keyword">const</span> callExp <span class="token operator">=</span> <span class="token function">createCallExpression</span><span class="token punctuation">(</span><span class="token string">&#39;h&#39;</span><span class="token punctuation">,</span> <span class="token punctuation">[</span><span class="token function">createStringLiteral</span><span class="token punctuation">(</span>node<span class="token punctuation">.</span>tag<span class="token punctuation">)</span><span class="token punctuation">]</span><span class="token punctuation">)</span>
    callExp<span class="token punctuation">.</span>arguments<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span>
      <span class="token function">createArrayExpression</span><span class="token punctuation">(</span>node<span class="token punctuation">.</span>children<span class="token punctuation">.</span><span class="token function">map</span><span class="token punctuation">(</span><span class="token parameter">c</span> <span class="token operator">=&gt;</span> c<span class="token punctuation">.</span>jsNode<span class="token punctuation">)</span><span class="token punctuation">)</span>
    <span class="token punctuation">)</span>
    
    node<span class="token punctuation">.</span>jsNode <span class="token operator">=</span> callExp
  <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre></div><p>前面提到过，每个模板 AST 都有一个逻辑上的根节点 Root，transformText 和 transformElement 只能得到 render 函数的返回值，Root 节点的转换函数可以得到 render 函数声明本身。</p><div class="language-javascript" data-ext="js" data-title="js"><pre class="language-javascript"><code><span class="token keyword">function</span> <span class="token function">transformRoot</span><span class="token punctuation">(</span><span class="token parameter">node</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token keyword">return</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span>node<span class="token punctuation">.</span>type <span class="token operator">!==</span> <span class="token string">&#39;Root&#39;</span><span class="token punctuation">)</span> <span class="token keyword">return</span>
    
    node<span class="token punctuation">.</span>jsNode <span class="token operator">=</span> <span class="token punctuation">{</span>
      <span class="token literal-property property">type</span><span class="token operator">:</span> <span class="token string">&#39;FunctionDecl&#39;</span><span class="token punctuation">,</span>
      <span class="token literal-property property">id</span><span class="token operator">:</span> <span class="token punctuation">{</span> <span class="token literal-property property">type</span><span class="token operator">:</span> <span class="token string">&#39;Identifier&#39;</span><span class="token punctuation">,</span> <span class="token literal-property property">name</span><span class="token operator">:</span> <span class="token string">&#39;render&#39;</span> <span class="token punctuation">}</span><span class="token punctuation">,</span>
      <span class="token literal-property property">params</span><span class="token operator">:</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">,</span>
      <span class="token literal-property property">body</span><span class="token operator">:</span> <span class="token punctuation">[</span><span class="token punctuation">{</span> <span class="token literal-property property">type</span><span class="token operator">:</span> <span class="token string">&#39;ReturnStatement&#39;</span><span class="token punctuation">,</span> <span class="token keyword">return</span><span class="token operator">:</span> node<span class="token punctuation">.</span>children<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">.</span>jsNode <span class="token punctuation">}</span><span class="token punctuation">]</span>
    <span class="token punctuation">}</span>
  <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre></div>`,59),e=[o];function c(r,l){return s(),a("div",null,e)}const k=n(p,[["render",c],["__file","5.2.transform.html.vue"]]),d=JSON.parse('{"path":"/vue3/5.2.transform.html","title":"transform","lang":"zh-CN","frontmatter":{"description":"transform 通过 parse 函数，我们已经将模板转换为 AST。transform 函数要做的事将模板 AST 转换为 JavaScript AST。 遍历 AST 为了转换 AST，我们需要遍历 AST 的每个节点，并对特定节点进行修改、删除等操作。 traverse 函数是一个先序遍历 AST 的函数，在 process node 的位置...","head":[["meta",{"property":"og:url","content":"https://yamsfeer.github.io/notes-fe/vue3/5.2.transform.html"}],["meta",{"property":"og:site_name","content":"yamsfeer"}],["meta",{"property":"og:title","content":"transform"}],["meta",{"property":"og:description","content":"transform 通过 parse 函数，我们已经将模板转换为 AST。transform 函数要做的事将模板 AST 转换为 JavaScript AST。 遍历 AST 为了转换 AST，我们需要遍历 AST 的每个节点，并对特定节点进行修改、删除等操作。 traverse 函数是一个先序遍历 AST 的函数，在 process node 的位置..."}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:locale","content":"zh-CN"}],["meta",{"property":"og:updated_time","content":"2024-04-12T16:21:32.000Z"}],["meta",{"property":"article:modified_time","content":"2024-04-12T16:21:32.000Z"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"transform\\",\\"image\\":[\\"\\"],\\"dateModified\\":\\"2024-04-12T16:21:32.000Z\\",\\"author\\":[]}"]]},"headers":[{"level":2,"title":"遍历 AST","slug":"遍历-ast","link":"#遍历-ast","children":[]},{"level":2,"title":"转换上下文 transformContext","slug":"转换上下文-transformcontext","link":"#转换上下文-transformcontext","children":[{"level":3,"title":"节点操作","slug":"节点操作","link":"#节点操作","children":[]},{"level":3,"title":"进入与退出","slug":"进入与退出","link":"#进入与退出","children":[]}]},{"level":2,"title":"transform","slug":"transform-1","link":"#transform-1","children":[{"level":3,"title":"JavaScript AST 的数据结构","slug":"javascript-ast-的数据结构","link":"#javascript-ast-的数据结构","children":[]},{"level":3,"title":"转换函数","slug":"转换函数","link":"#转换函数","children":[]}]}],"git":{"createdTime":1712938892000,"updatedTime":1712938892000,"contributors":[{"name":"yamsfeer","email":"feer.yams@gmail.com","commits":1}]},"readingTime":{"minutes":5.01,"words":1504},"filePathRelative":"vue3/5.2.transform.md","localizedDate":"2024年4月12日","autoDesc":true}');export{k as comp,d as data};
