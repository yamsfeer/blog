import{_ as p}from"./plugin-vue_export-helper-DlAUqK2U.js";import{r as o,o as c,c as r,b as n,d as s,e as t,a as e}from"./app-BPFsuHku.js";const i={},l=n("h1",{id:"性能标准api",tabindex:"-1"},[n("a",{class:"header-anchor",href:"#性能标准api"},[n("span",null,"性能标准API")])],-1),u=n("p",null,"有时候，我们需要自定义指标，比如：",-1),k=n("li",null,"单页应用程序 ( SPA ) 页面切换需要多长时间",-1),d=n("li",null,"页面针对登录用户显示从数据库获取的数据需要多长时间",-1),g={href:"https://addyosmani.com/blog/rehydration/",target:"_blank",rel:"noopener noreferrer"},m=n("li",null,"回访者加载资源的缓存命中率",-1),h=n("li",null,"游戏中点击或键盘事件的事件延迟",-1),f=e(`<p>Web 性能工作组推出了一系列较底层的标准化 API，用于实现自定义指标。</p><h2 id="performanceobserver" tabindex="-1"><a class="header-anchor" href="#performanceobserver"><span>PerformanceObserver</span></a></h2><p>PerformanceObserver 是获取性能 API 数据的方法。它接受一个回调函数，并通过 observe 函数观察某类型的性能数据。</p><div class="language-javascript" data-ext="js" data-title="js"><pre class="language-javascript"><code><span class="token keyword">const</span> observer <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">PerformanceObserver</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token parameter">list<span class="token punctuation">,</span> observer</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
  list<span class="token punctuation">.</span><span class="token function">getEntries</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">forEach</span><span class="token punctuation">(</span><span class="token parameter">entry</span> <span class="token operator">=&gt;</span> entry<span class="token punctuation">.</span><span class="token function">toJSON</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span>

observer<span class="token punctuation">.</span><span class="token function">observe</span><span class="token punctuation">(</span><span class="token punctuation">{</span> <span class="token literal-property property">type</span><span class="token operator">:</span> <span class="token string">&#39;entry-type&#39;</span> <span class="token punctuation">}</span><span class="token punctuation">)</span>
</code></pre></div>`,4),v={href:"https://w3c.github.io/requestidlecallback/#idle-periods",target:"_blank",rel:"noopener noreferrer"},y=e(`<p>检查浏览器支持哪些性能类型。</p><div class="language-javascript" data-ext="js" data-title="js"><pre class="language-javascript"><code>PerformanceObserver<span class="token punctuation">.</span>supportedEntryTypes
</code></pre></div><div class="language-javascript" data-ext="js" data-title="js"><pre class="language-javascript"><code><span class="token punctuation">[</span>
  <span class="token string">&#39;element&#39;</span><span class="token punctuation">,</span>
  <span class="token string">&#39;event&#39;</span><span class="token punctuation">,</span>
  <span class="token string">&#39;first-input&#39;</span><span class="token punctuation">,</span>
  <span class="token string">&#39;largest-contentful-paint&#39;</span><span class="token punctuation">,</span>
  <span class="token string">&#39;layout-shift&#39;</span><span class="token punctuation">,</span>
  <span class="token string">&#39;longtask&#39;</span><span class="token punctuation">,</span>
  <span class="token string">&#39;mark&#39;</span><span class="token punctuation">,</span>
  <span class="token string">&#39;measure&#39;</span><span class="token punctuation">,</span>
  <span class="token string">&#39;navigation&#39;</span><span class="token punctuation">,</span>
  <span class="token string">&#39;paint&#39;</span><span class="token punctuation">,</span>
  <span class="token string">&#39;resource&#39;</span>
<span class="token punctuation">]</span>
</code></pre></div><p>observe 函数接受的 options 有三个选项：</p><div class="language-typescript" data-ext="ts" data-title="ts"><pre class="language-typescript"><code><span class="token keyword">interface</span> <span class="token class-name">PerformanceObserverInit</span> <span class="token punctuation">{</span>
  buffered<span class="token operator">?</span><span class="token operator">:</span> <span class="token builtin">boolean</span><span class="token punctuation">;</span>
  entryTypes<span class="token operator">?</span><span class="token operator">:</span> <span class="token builtin">string</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
  type<span class="token operator">?</span><span class="token operator">:</span> <span class="token builtin">string</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre></div><p>type 可以是 supportedEntryTypes 里的值，entryTypes 则可以一次传多个 type 值。</p><p>默认情况下， PerformanceObserver 只能获取 observe 之后发生的事件。要获取历史事件，可以将 buffered 设置为 true，浏览器将在第一次回调中提供缓冲区中的数据。</p><div class="language-javascript" data-ext="js" data-title="js"><pre class="language-javascript"><code>observer<span class="token punctuation">.</span><span class="token function">observe</span><span class="token punctuation">(</span><span class="token punctuation">{</span>
  <span class="token literal-property property">type</span><span class="token operator">:</span> <span class="token string">&#39;entry-type&#39;</span><span class="token punctuation">,</span>
  <span class="token literal-property property">buffered</span><span class="token operator">:</span> <span class="token boolean">true</span><span class="token punctuation">,</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span>
</code></pre></div><p>使用 performance Observer 测量指标通常有几点需要注意：</p><ul><li>后台 tab 页面也会报告，但实际上应忽略这些页面</li><li>页面通过前进后退按钮恢复时，不会报告，但实际应该报告，因为这是不同的页面访问方式。</li><li>不考虑 iframe 中的元素</li></ul>`,10),b={href:"https://developer.mozilla.org/zh-CN/docs/Web/API/PerformanceObserver",target:"_blank",rel:"noopener noreferrer"},_={href:"https://w3c.github.io/performance-timeline/",target:"_blank",rel:"noopener noreferrer"},P=n("h3",{id:"旧版性能-api",tabindex:"-1"},[n("a",{class:"header-anchor",href:"#旧版性能-api"},[n("span",null,"旧版性能 API")])],-1),T={href:"https://developer.mozilla.org/zh-CN/docs/Web/API/Performance",target:"_blank",rel:"noopener noreferrer"},I=e('<ul><li>getEntries</li><li>getEntriesByName</li><li>getEntriesByType</li></ul><p>这些是旧的 API，它们无法监听何时发出新 entry，也无法获取新类型 entry，因此不建议使用。</p><p><strong>除非需要兼容 IE，否则建议统一使用 PerformanceObserver</strong>。</p><h2 id="性能标准-api" tabindex="-1"><a class="header-anchor" href="#性能标准-api"><span>性能标准 API</span></a></h2><h3 id="user-timing-api" tabindex="-1"><a class="header-anchor" href="#user-timing-api"><span>User Timing API</span></a></h3>',5),A={href:"https://w3c.github.io/user-timing/",target:"_blank",rel:"noopener noreferrer"},E=e(`<div class="language-javascript" data-ext="js" data-title="js"><pre class="language-javascript"><code><span class="token comment">// Record the time immediately before running a task.</span>
performance<span class="token punctuation">.</span><span class="token function">mark</span><span class="token punctuation">(</span><span class="token string">&#39;myTask:start&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token keyword">await</span> <span class="token function">doMyTask</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token comment">// Record the time immediately after running a task.</span>
performance<span class="token punctuation">.</span><span class="token function">mark</span><span class="token punctuation">(</span><span class="token string">&#39;myTask:end&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token comment">// Measure the delta between the start and end of the task</span>
performance<span class="token punctuation">.</span><span class="token function">measure</span><span class="token punctuation">(</span><span class="token string">&#39;myTask&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;myTask:start&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;myTask:end&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre></div>`,1),j=n("code",null,"Date.now()",-1),w=n("code",null,"performance.now()",-1),x={href:"https://developers.google.com/web/updates/2018/04/devtools#tabs",target:"_blank",rel:"noopener noreferrer"},S=e(`<p>PerformanceObserver 观察 measure 类型 entry。</p><div class="language-javascript" data-ext="js" data-title="js"><pre class="language-javascript"><code><span class="token keyword">new</span> <span class="token class-name">PerformanceObserver</span><span class="token punctuation">(</span><span class="token parameter">list</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
  <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">const</span> entry <span class="token keyword">of</span> list<span class="token punctuation">.</span><span class="token function">getEntries</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>entry<span class="token punctuation">.</span><span class="token function">toJSON</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
  <span class="token punctuation">}</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span>
<span class="token punctuation">.</span><span class="token function">observe</span><span class="token punctuation">(</span><span class="token punctuation">{</span><span class="token literal-property property">type</span><span class="token operator">:</span> <span class="token string">&#39;measure&#39;</span><span class="token punctuation">,</span> <span class="token literal-property property">buffered</span><span class="token operator">:</span> <span class="token boolean">true</span><span class="token punctuation">}</span><span class="token punctuation">)</span>
</code></pre></div><h3 id="long-tasks-api" tabindex="-1"><a class="header-anchor" href="#long-tasks-api"><span>Long Tasks API</span></a></h3>`,3),O={href:"https://w3c.github.io/longtasks/",target:"_blank",rel:"noopener noreferrer"},B=e(`<p>每当运行开销大的代码，跟踪是否阻塞主线程都是很有用的。事实上，许多高级指标如 TTI 和 TBT，都是建立在 Long Tasks API 上的。</p><p>PerformanceObserver 观察 longtask 类型 entry：</p><div class="language-javascript" data-ext="js" data-title="js"><pre class="language-javascript"><code>observer<span class="token punctuation">.</span><span class="token function">observe</span><span class="token punctuation">(</span><span class="token punctuation">{</span><span class="token literal-property property">type</span><span class="token operator">:</span> <span class="token string">&#39;longtask&#39;</span><span class="token punctuation">,</span> <span class="token literal-property property">buffered</span><span class="token operator">:</span> <span class="token boolean">true</span><span class="token punctuation">}</span><span class="token punctuation">)</span>
</code></pre></div><h3 id="element-timing-api" tabindex="-1"><a class="header-anchor" href="#element-timing-api"><span>Element Timing API</span></a></h3>`,4),N={href:"https://wicg.github.io/element-timing/",target:"_blank",rel:"noopener noreferrer"},C=e(`<p>为元素添加 elementtiming 属性。</p><div class="language-html" data-ext="html" data-title="html"><pre class="language-html"><code><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>img</span> <span class="token attr-name">elementtiming</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>hero-image<span class="token punctuation">&quot;</span></span> <span class="token punctuation">/&gt;</span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>p</span> <span class="token attr-name">elementtiming</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>important-paragraph<span class="token punctuation">&quot;</span></span><span class="token punctuation">&gt;</span></span>This is text I care about.<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>p</span><span class="token punctuation">&gt;</span></span>
</code></pre></div><p>然后 PerformanceObserver 观察这些元素。</p><div class="language-javascript" data-ext="js" data-title="js"><pre class="language-javascript"><code>observer<span class="token punctuation">.</span><span class="token function">observe</span><span class="token punctuation">(</span><span class="token punctuation">{</span><span class="token literal-property property">type</span><span class="token operator">:</span> <span class="token string">&#39;element&#39;</span><span class="token punctuation">,</span> <span class="token literal-property property">buffered</span><span class="token operator">:</span> <span class="token boolean">true</span><span class="token punctuation">}</span><span class="token punctuation">)</span>
</code></pre></div><p>LCP 支持的元素类型与 Element Timing API 相同，将 <code>elementtiming</code> 添加到不属于这些类型的元素将被忽略。</p><h3 id="event-timing-api" tabindex="-1"><a class="header-anchor" href="#event-timing-api"><span>Event Timing API</span></a></h3>`,6),z={href:"https://wicg.github.io/event-timing/",target:"_blank",rel:"noopener noreferrer"},D=e(`<ul><li>startTime：接收到事件时间。</li><li>processingStart：能够开始处理事件时间。</li><li>processingEnd：完成事件处理时间。</li><li>duration：事件持续时间，出于安全原因，四舍五入到 8ms。</li></ul><p>以下示例显示了如何使用这些值来创建自定义测量：</p><div class="language-javascript" data-ext="js" data-title="js"><pre class="language-javascript"><code><span class="token keyword">new</span> <span class="token class-name">PerformanceObserver</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token parameter">entryList</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
  <span class="token keyword">const</span> firstInput <span class="token operator">=</span> entryList<span class="token punctuation">.</span><span class="token function">getEntries</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span>

  <span class="token comment">// FID</span>
  <span class="token keyword">const</span> firstInputDelay <span class="token operator">=</span> firstInput<span class="token punctuation">.</span>processingStart <span class="token operator">-</span> firstInput<span class="token punctuation">.</span>startTime<span class="token punctuation">;</span>

  <span class="token comment">// 完成所有事件处理器所用时间</span>
  <span class="token comment">// 不包含异步任务，如 requestAnimationFrame setTimeout.</span>
  <span class="token keyword">const</span> firstInputProcessingTime <span class="token operator">=</span> firstInput<span class="token punctuation">.</span>processingEnd <span class="token operator">-</span> firstInput<span class="token punctuation">.</span>processingStart<span class="token punctuation">;</span>

  <span class="token comment">// 不包含异步任务</span>
  <span class="token keyword">const</span> firstInputDuration <span class="token operator">=</span> firstInput<span class="token punctuation">.</span>duration
<span class="token punctuation">}</span><span class="token punctuation">)</span>
  <span class="token punctuation">.</span><span class="token function">observe</span><span class="token punctuation">(</span><span class="token punctuation">{</span><span class="token literal-property property">type</span><span class="token operator">:</span> <span class="token string">&#39;first-input&#39;</span><span class="token punctuation">,</span> <span class="token literal-property property">buffered</span><span class="token operator">:</span> <span class="token boolean">true</span><span class="token punctuation">}</span><span class="token punctuation">)</span>
</code></pre></div><h3 id="resource-timing-api" tabindex="-1"><a class="header-anchor" href="#resource-timing-api"><span>Resource Timing API</span></a></h3>`,4),L={href:"https://w3c.github.io/resource-timing/",target:"_blank",rel:"noopener noreferrer"},R=e(`<ul><li>initiatorType：资源获取方式。如 script、link 标签，或者 fetch 函数获取</li><li>nextHopProtocol：获取资源的协议，如 http2</li><li>encodedBodySize / decodedBodySize：资源大小</li><li>transferSize：通过网络传输的资源的大小。当资源通过缓存获取时，该值为 0。</li></ul><p>通过 <code>transferSize</code> 可以计算缓存命中率，总缓存资源大小，这对优化资源缓存策略很有用。</p><p>以下示例检查资源是否通过缓存实现。</p><div class="language-javascript" data-ext="js" data-title="js"><pre class="language-javascript"><code><span class="token keyword">new</span> <span class="token class-name">PerformanceObserver</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token parameter">list</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
  <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">const</span> entry <span class="token keyword">of</span> list<span class="token punctuation">.</span><span class="token function">getEntries</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token comment">// If transferSize is 0, the resource was fulfilled via the cache.</span>
    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>entry<span class="token punctuation">.</span>name<span class="token punctuation">,</span> entry<span class="token punctuation">.</span>transferSize <span class="token operator">===</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span>
<span class="token punctuation">.</span><span class="token function">observe</span><span class="token punctuation">(</span><span class="token punctuation">{</span><span class="token literal-property property">type</span><span class="token operator">:</span> <span class="token string">&#39;resource&#39;</span><span class="token punctuation">,</span> <span class="token literal-property property">buffered</span><span class="token operator">:</span> <span class="token boolean">true</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre></div><h3 id="navigation-timing-api" tabindex="-1"><a class="header-anchor" href="#navigation-timing-api"><span>Navigation Timing API</span></a></h3>`,5),q={href:"https://w3c.github.io/navigation-timing/",target:"_blank",rel:"noopener noreferrer"},M=e(`<p>TTFB ( Time to First Byte ) 其实就是 Navigation Timing 中的 responseStart 时间点。</p><div class="language-javascript" data-ext="js" data-title="js"><pre class="language-javascript"><code><span class="token keyword">new</span> <span class="token class-name">PerformanceObserver</span><span class="token punctuation">(</span><span class="token parameter">list</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
  <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">const</span> entry <span class="token keyword">of</span> list<span class="token punctuation">.</span><span class="token function">getEntries</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
		console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">&#39;Time to first byte&#39;</span><span class="token punctuation">,</span> entry<span class="token punctuation">.</span>responseStart<span class="token punctuation">)</span>
  <span class="token punctuation">}</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span>
<span class="token punctuation">.</span><span class="token function">observe</span><span class="token punctuation">(</span><span class="token punctuation">{</span><span class="token literal-property property">type</span><span class="token operator">:</span> <span class="token string">&#39;navigation&#39;</span><span class="token punctuation">,</span> <span class="token literal-property property">buffered</span><span class="token operator">:</span> <span class="token boolean">true</span><span class="token punctuation">}</span><span class="token punctuation">)</span>
</code></pre></div><h3 id="server-timing-api" tabindex="-1"><a class="header-anchor" href="#server-timing-api"><span>Server Timing API</span></a></h3>`,3),U={href:"https://w3c.github.io/server-timing/",target:"_blank",rel:"noopener noreferrer"},W=e(`<p>以下示例中，服务器使用 <code>Server-Timing</code> 传递计时数据。</p><div class="language-http" data-ext="http" data-title="http"><pre class="language-http"><code><span class="token response-status"><span class="token http-version property">HTTP/1.1</span> <span class="token status-code number">200</span> <span class="token reason-phrase string">OK</span></span>

<span class="token header"><span class="token header-name keyword">Server-Timing</span><span class="token punctuation">:</span> <span class="token header-value">miss, db;dur=53, app;dur=47.2</span></span>
</code></pre></div><p>客户端可以通过 resource 或 navigation 类型 entry 读取此数据。</p><div class="language-javascript" data-ext="js" data-title="js"><pre class="language-javascript"><code><span class="token keyword">new</span> <span class="token class-name">PerformanceObserver</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token parameter">list</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
  <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">const</span> entry <span class="token keyword">of</span> list<span class="token punctuation">.</span><span class="token function">getEntries</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token comment">// Logs all server timing data for this response</span>
    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">&#39;Server Timing&#39;</span><span class="token punctuation">,</span> entry<span class="token punctuation">.</span>serverTiming<span class="token punctuation">)</span>
  <span class="token punctuation">}</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span>
<span class="token punctuation">.</span><span class="token function">observe</span><span class="token punctuation">(</span><span class="token punctuation">{</span><span class="token literal-property property">type</span><span class="token operator">:</span> <span class="token string">&#39;navigation&#39;</span><span class="token punctuation">,</span> <span class="token literal-property property">buffered</span><span class="token operator">:</span> <span class="token boolean">true</span><span class="token punctuation">}</span><span class="token punctuation">)</span>
</code></pre></div>`,4);function F(V,J){const a=o("ExternalLinkIcon");return c(),r("div",null,[l,u,n("ul",null,[k,d,n("li",null,[s("服务器端渲染 ( SSR ) 需要多长时间才能"),n("a",g,[s("注水"),t(a)])]),m,h]),f,n("p",null,[s("PerformanceObserver 的回调通常在"),n("a",v,[s("空闲期间"),t(a)]),s("触发，因此不会干扰页面的性能。")]),y,n("p",null,[s("值得一提的是，MDN 文档中关于 "),n("a",b,[s("PerformanceObserver"),t(a)]),s(" 的文档有些过时，建议通过 w3c 的文档查看 "),n("a",_,[s("Performance Observer API"),t(a)]),s("。")]),P,n("p",null,[s("在 PerformanceObserver 之前，开发者通过 "),n("a",T,[s("Performance"),t(a)]),s(" 对象的方法测量性能。")]),I,n("p",null,[n("a",A,[s("User Timing API"),t(a)]),s(" 单纯用于计时，它可以标记时间点，然后测量标记之间的时长。")]),E,n("p",null,[s("虽然 "),j,s(" 或 "),w,s(" 可以提供相似功能，但 User Timing API 可以与性能工具很好地集成。例如，Chrome DevTools 可以使 "),n("a",x,[s("Performance 面板中的 User Timing 测量值"),t(a)]),s("可视化。")]),S,n("p",null,[n("a",O,[s("Long Tasks API"),t(a)]),s(" 报告执行时间超过 50ms 的任务。")]),B,n("p",null,[s("LCP 测量的是最大图像或文本的绘制时间。如果需要测量其他元素，可以使用 "),n("a",N,[s("Element Timing API"),t(a)]),s("。实际上，LCP 就是在 Element Timing API 的基础上，添加了对最大元素的自动报告。")]),C,n("p",null,[n("a",z,[s("Event Timing API"),t(a)]),s(" 提供了事件生命周期中的许多时间戳，包括：")]),D,n("p",null,[n("a",L,[s("Resource Timing API"),t(a)]),s(" 可以获取页面的资源是如何加载的，除了计时数据，还包括：")]),R,n("p",null,[n("a",q,[s("Navigation Timing API"),t(a)]),s(" 可以获取 navigation 过程中的信息，比如 DOMContentLoaded 和 load 事件触发时间。")]),M,n("p",null,[n("a",U,[s("Server Timing API"),t(a)]),s(" 可以获取请求响应中，服务器传过来的计时数据。例如数据库查询花费的时间 。")]),W])}const K=p(i,[["render",F],["__file","2.1.性能标准API.html.vue"]]),G=JSON.parse('{"path":"/%E5%B7%A5%E7%A8%8B%E6%9E%B6%E6%9E%84/%E6%80%A7%E8%83%BD%E4%BC%98%E5%8C%96/2.1.%E6%80%A7%E8%83%BD%E6%A0%87%E5%87%86API.html","title":"性能标准API","lang":"zh-CN","frontmatter":{"description":"性能标准API 有时候，我们需要自定义指标，比如： 单页应用程序 ( SPA ) 页面切换需要多长时间 页面针对登录用户显示从数据库获取的数据需要多长时间 服务器端渲染 ( SSR ) 需要多长时间才能注水 回访者加载资源的缓存命中率 游戏中点击或键盘事件的事件延迟 Web 性能工作组推出了一系列较底层的标准化 API，用于实现自定义指标。 Perfo...","head":[["meta",{"property":"og:url","content":"https://yamsfeer.github.io/notes-fe/%E5%B7%A5%E7%A8%8B%E6%9E%B6%E6%9E%84/%E6%80%A7%E8%83%BD%E4%BC%98%E5%8C%96/2.1.%E6%80%A7%E8%83%BD%E6%A0%87%E5%87%86API.html"}],["meta",{"property":"og:site_name","content":"yamsfeer"}],["meta",{"property":"og:title","content":"性能标准API"}],["meta",{"property":"og:description","content":"性能标准API 有时候，我们需要自定义指标，比如： 单页应用程序 ( SPA ) 页面切换需要多长时间 页面针对登录用户显示从数据库获取的数据需要多长时间 服务器端渲染 ( SSR ) 需要多长时间才能注水 回访者加载资源的缓存命中率 游戏中点击或键盘事件的事件延迟 Web 性能工作组推出了一系列较底层的标准化 API，用于实现自定义指标。 Perfo..."}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:locale","content":"zh-CN"}],["meta",{"property":"og:updated_time","content":"2024-04-12T16:21:32.000Z"}],["meta",{"property":"article:modified_time","content":"2024-04-12T16:21:32.000Z"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"性能标准API\\",\\"image\\":[\\"\\"],\\"dateModified\\":\\"2024-04-12T16:21:32.000Z\\",\\"author\\":[]}"]]},"headers":[{"level":2,"title":"PerformanceObserver","slug":"performanceobserver","link":"#performanceobserver","children":[{"level":3,"title":"旧版性能 API","slug":"旧版性能-api","link":"#旧版性能-api","children":[]}]},{"level":2,"title":"性能标准 API","slug":"性能标准-api","link":"#性能标准-api","children":[{"level":3,"title":"User Timing API","slug":"user-timing-api","link":"#user-timing-api","children":[]},{"level":3,"title":"Long Tasks API","slug":"long-tasks-api","link":"#long-tasks-api","children":[]},{"level":3,"title":"Element Timing API","slug":"element-timing-api","link":"#element-timing-api","children":[]},{"level":3,"title":"Event Timing API","slug":"event-timing-api","link":"#event-timing-api","children":[]},{"level":3,"title":"Resource Timing API","slug":"resource-timing-api","link":"#resource-timing-api","children":[]},{"level":3,"title":"Navigation Timing API","slug":"navigation-timing-api","link":"#navigation-timing-api","children":[]},{"level":3,"title":"Server Timing API","slug":"server-timing-api","link":"#server-timing-api","children":[]}]}],"git":{"createdTime":1712938892000,"updatedTime":1712938892000,"contributors":[{"name":"yamsfeer","email":"feer.yams@gmail.com","commits":1}]},"readingTime":{"minutes":4.82,"words":1445},"filePathRelative":"工程架构/性能优化/2.1.性能标准API.md","localizedDate":"2024年4月12日","autoDesc":true}');export{K as comp,G as data};
