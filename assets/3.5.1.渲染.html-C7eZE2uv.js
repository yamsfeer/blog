import{_ as o}from"./plugin-vue_export-helper-DlAUqK2U.js";import{r as p,o as r,c,b as a,d as t,e,a as s}from"./app-BPFsuHku.js";const l={},i=s('<h1 id="对渲染的性能优化" tabindex="-1"><a class="header-anchor" href="#对渲染的性能优化"><span>对渲染的性能优化</span></a></h1><h2 id="布局" tabindex="-1"><a class="header-anchor" href="#布局"><span>布局</span></a></h2><p>所谓布局 ( layout ) 就是浏览器计算元素几何信息，即页面中元素的大小和位置。</p><p>布局是非常耗时的，因为布局几乎总是针对整个文档，文档的元素越多，所需时间越长。因此，我们需要减少不必要的 layout 操作。</p><p>下面是几种不必要的 layout 操作，应尽量避免。</p><h3 id="强制同步布局" tabindex="-1"><a class="header-anchor" href="#强制同步布局"><span>强制同步布局</span></a></h3><p>在获取 offsetLeft、offsetTop、offsetWidth、offsetHeight 等几何属性时，浏览器为了返回正确的值，会立即进行一次 layout。</p>',7),u={href:"https://gist.github.com/paulirish/5d52fb081b3570c81e3a",target:"_blank",rel:"noopener noreferrer"},d=s(`<h3 id="layout-trashing" tabindex="-1"><a class="header-anchor" href="#layout-trashing"><span>layout trashing</span></a></h3><p>比同步布局更糟的是<strong>大量连续的同步布局</strong>。</p><div class="language-javascript" data-ext="js" data-title="js"><pre class="language-javascript"><code><span class="token keyword">function</span> <span class="token function">resizeParagraphs</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  paragraphs<span class="token punctuation">.</span><span class="token function">forEach</span><span class="token punctuation">(</span><span class="token parameter">p</span> <span class="token operator">=&gt;</span> p<span class="token punctuation">.</span>style<span class="token punctuation">.</span>width <span class="token operator">=</span> box<span class="token punctuation">.</span>offsetWidth<span class="token punctuation">)</span>
<span class="token punctuation">}</span>
</code></pre></div><p>上面代码中，既读取 offsetWidth，又更新元素的宽度，触发了大量的 layout 操作。</p><p>解决方法如下：</p><div class="language-javascript" data-ext="js" data-title="js"><pre class="language-javascript"><code><span class="token keyword">const</span> width <span class="token operator">=</span> box<span class="token punctuation">.</span>offsetWidth<span class="token punctuation">;</span>

<span class="token keyword">function</span> <span class="token function">resizeAllParagraphsToMatchBlockWidth</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  paragraphs<span class="token punctuation">.</span><span class="token function">forEach</span><span class="token punctuation">(</span><span class="token parameter">p</span> <span class="token operator">=&gt;</span> p<span class="token punctuation">.</span>style<span class="token punctuation">.</span>width <span class="token operator">=</span> width<span class="token punctuation">)</span>
<span class="token punctuation">}</span>
</code></pre></div><h2 id="参考" tabindex="-1"><a class="header-anchor" href="#参考"><span>参考</span></a></h2>`,7),h={href:"https://web.dev/avoid-large-complex-layouts-and-layout-thrashing/",target:"_blank",rel:"noopener noreferrer"},f={href:"https://web.dev/dom-size-and-interactivity/",target:"_blank",rel:"noopener noreferrer"};function g(k,m){const n=p("ExternalLinkIcon");return r(),c("div",null,[i,a("p",null,[a("a",u,[t("更多会触发 layout 的属性"),e(n)]),t("。")]),d,a("p",null,[a("a",h,[t("Avoid large, complex layouts and layout thrashing"),e(n)])]),a("p",null,[a("a",f,[t("dom-size-and-interactivity"),e(n)])])])}const E=o(l,[["render",g],["__file","3.5.1.渲染.html.vue"]]),v=JSON.parse('{"path":"/%E5%B7%A5%E7%A8%8B%E6%9E%B6%E6%9E%84/%E6%80%A7%E8%83%BD%E4%BC%98%E5%8C%96/3.5.1.%E6%B8%B2%E6%9F%93.html","title":"对渲染的性能优化","lang":"zh-CN","frontmatter":{"description":"对渲染的性能优化 布局 所谓布局 ( layout ) 就是浏览器计算元素几何信息，即页面中元素的大小和位置。 布局是非常耗时的，因为布局几乎总是针对整个文档，文档的元素越多，所需时间越长。因此，我们需要减少不必要的 layout 操作。 下面是几种不必要的 layout 操作，应尽量避免。 强制同步布局 在获取 offsetLeft、offsetTo...","head":[["meta",{"property":"og:url","content":"https://yamsfeer.github.io/notes-fe/%E5%B7%A5%E7%A8%8B%E6%9E%B6%E6%9E%84/%E6%80%A7%E8%83%BD%E4%BC%98%E5%8C%96/3.5.1.%E6%B8%B2%E6%9F%93.html"}],["meta",{"property":"og:site_name","content":"yamsfeer"}],["meta",{"property":"og:title","content":"对渲染的性能优化"}],["meta",{"property":"og:description","content":"对渲染的性能优化 布局 所谓布局 ( layout ) 就是浏览器计算元素几何信息，即页面中元素的大小和位置。 布局是非常耗时的，因为布局几乎总是针对整个文档，文档的元素越多，所需时间越长。因此，我们需要减少不必要的 layout 操作。 下面是几种不必要的 layout 操作，应尽量避免。 强制同步布局 在获取 offsetLeft、offsetTo..."}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:locale","content":"zh-CN"}],["meta",{"property":"og:updated_time","content":"2024-04-12T16:21:32.000Z"}],["meta",{"property":"article:modified_time","content":"2024-04-12T16:21:32.000Z"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"对渲染的性能优化\\",\\"image\\":[\\"\\"],\\"dateModified\\":\\"2024-04-12T16:21:32.000Z\\",\\"author\\":[]}"]]},"headers":[{"level":2,"title":"布局","slug":"布局","link":"#布局","children":[{"level":3,"title":"强制同步布局","slug":"强制同步布局","link":"#强制同步布局","children":[]},{"level":3,"title":"layout trashing","slug":"layout-trashing","link":"#layout-trashing","children":[]}]},{"level":2,"title":"参考","slug":"参考","link":"#参考","children":[]}],"git":{"createdTime":1712938892000,"updatedTime":1712938892000,"contributors":[{"name":"yamsfeer","email":"feer.yams@gmail.com","commits":1}]},"readingTime":{"minutes":0.84,"words":251},"filePathRelative":"工程架构/性能优化/3.5.1.渲染.md","localizedDate":"2024年4月12日","autoDesc":true}');export{E as comp,v as data};
