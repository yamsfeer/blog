import{_ as n}from"./plugin-vue_export-helper-DlAUqK2U.js";import{r as o,o as s,c as l,b as e,d as t,e as r,a as i}from"./app-BPFsuHku.js";const p={},c=i('<h1 id="对交互的性能优化" tabindex="-1"><a class="header-anchor" href="#对交互的性能优化"><span>对交互的性能优化</span></a></h1><h2 id="输入延迟" tabindex="-1"><a class="header-anchor" href="#输入延迟"><span>输入延迟</span></a></h2><p>输入延迟 ( Input delay ) 是指从交互 ( 如 click、tap、keypress ) 开始，到事件回调开始运行的时间。</p><p>交互总会有一定的输入延迟，因为操作系统需要时间识别输入事件并传递给浏览器，这是不可避免的。我们可以优化的是页面其他部分对输入延迟的影响。</p><h3 id="避免重复的计时器" tabindex="-1"><a class="header-anchor" href="#避免重复的计时器"><span>避免重复的计时器</span></a></h3><p>setTimeout 和 setInterval 会导致输入延迟。尤其是 setInterval，它会周期性注册回调事件，这增大了输入延迟增大的概率。</p><p>下图显示了 setInterval 是如何导致输入延迟的。</p><p><img src="https://raw.githubusercontent.com/yamsfeer/pic-bed/master/tjzVtS9wFXxd06gaPHNY.png" alt=""></p><h3 id="避免长任务" tabindex="-1"><a class="header-anchor" href="#避免长任务"><span>避免长任务</span></a></h3><p>浏览器处理交互是在主线程完成的，而 JavaScript 的长任务会阻塞主线程，因此减少长任务可以减少输入延迟。具体做法参考《JS长任务》的内容。</p><h3 id="交互重叠" tabindex="-1"><a class="header-anchor" href="#交互重叠"><span>交互重叠</span></a></h3><p>交互重叠 ( interaction overlap ) 是指与一个元素交互后，渲染下一帧之前，又进行了交互。其实就是用户在短时间内进行了多次交互，常见于用户键盘输入、鼠标拖拽等。</p><p>解决办法如下：</p>',13),d=e("li",null,"用 debounce 限制执行次数",-1),h={href:"https://developer.mozilla.org/docs/Web/API/AbortController/abort",target:"_blank",rel:"noopener noreferrer"},m=e("li",null,"尽量使用 CSS 动画，尽量不直接操作动画帧。",-1),u=e("h2",{id:"参考",tabindex:"-1"},[e("a",{class:"header-anchor",href:"#参考"},[e("span",null,"参考")])],-1),_={href:"https://web.dev/optimize-input-delay",target:"_blank",rel:"noopener noreferrer"};function g(f,y){const a=o("ExternalLinkIcon");return s(),l("div",null,[c,e("ul",null,[d,e("li",null,[t("如果事件会触发网络请求，可以使用 "),e("a",h,[t("AbortController"),r(a)]),t(" 取消 fetch")]),m]),u,e("p",null,[e("a",_,[t("optimize-input-delay"),r(a)])])])}const k=n(p,[["render",g],["__file","3.6.交互.html.vue"]]),B=JSON.parse('{"path":"/%E5%B7%A5%E7%A8%8B%E6%9E%B6%E6%9E%84/%E6%80%A7%E8%83%BD%E4%BC%98%E5%8C%96/3.6.%E4%BA%A4%E4%BA%92.html","title":"对交互的性能优化","lang":"zh-CN","frontmatter":{"description":"对交互的性能优化 输入延迟 输入延迟 ( Input delay ) 是指从交互 ( 如 click、tap、keypress ) 开始，到事件回调开始运行的时间。 交互总会有一定的输入延迟，因为操作系统需要时间识别输入事件并传递给浏览器，这是不可避免的。我们可以优化的是页面其他部分对输入延迟的影响。 避免重复的计时器 setTimeout 和 set...","head":[["meta",{"property":"og:url","content":"https://yamsfeer.github.io/notes-fe/%E5%B7%A5%E7%A8%8B%E6%9E%B6%E6%9E%84/%E6%80%A7%E8%83%BD%E4%BC%98%E5%8C%96/3.6.%E4%BA%A4%E4%BA%92.html"}],["meta",{"property":"og:site_name","content":"yamsfeer"}],["meta",{"property":"og:title","content":"对交互的性能优化"}],["meta",{"property":"og:description","content":"对交互的性能优化 输入延迟 输入延迟 ( Input delay ) 是指从交互 ( 如 click、tap、keypress ) 开始，到事件回调开始运行的时间。 交互总会有一定的输入延迟，因为操作系统需要时间识别输入事件并传递给浏览器，这是不可避免的。我们可以优化的是页面其他部分对输入延迟的影响。 避免重复的计时器 setTimeout 和 set..."}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:image","content":"https://raw.githubusercontent.com/yamsfeer/pic-bed/master/tjzVtS9wFXxd06gaPHNY.png"}],["meta",{"property":"og:locale","content":"zh-CN"}],["meta",{"property":"og:updated_time","content":"2024-04-12T16:21:32.000Z"}],["meta",{"property":"article:modified_time","content":"2024-04-12T16:21:32.000Z"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"对交互的性能优化\\",\\"image\\":[\\"https://raw.githubusercontent.com/yamsfeer/pic-bed/master/tjzVtS9wFXxd06gaPHNY.png\\"],\\"dateModified\\":\\"2024-04-12T16:21:32.000Z\\",\\"author\\":[]}"]]},"headers":[{"level":2,"title":"输入延迟","slug":"输入延迟","link":"#输入延迟","children":[{"level":3,"title":"避免重复的计时器","slug":"避免重复的计时器","link":"#避免重复的计时器","children":[]},{"level":3,"title":"避免长任务","slug":"避免长任务","link":"#避免长任务","children":[]},{"level":3,"title":"交互重叠","slug":"交互重叠","link":"#交互重叠","children":[]}]},{"level":2,"title":"参考","slug":"参考","link":"#参考","children":[]}],"git":{"createdTime":1712938892000,"updatedTime":1712938892000,"contributors":[{"name":"yamsfeer","email":"feer.yams@gmail.com","commits":1}]},"readingTime":{"minutes":1.19,"words":356},"filePathRelative":"工程架构/性能优化/3.6.交互.md","localizedDate":"2024年4月12日","autoDesc":true}');export{k as comp,B as data};
