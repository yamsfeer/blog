import{_ as o}from"./plugin-vue_export-helper-DlAUqK2U.js";import{r as p,o as l,c,b as e,d as t,e as s,a as n}from"./app-BPFsuHku.js";const r={},i=n(`<h1 id="source-map" tabindex="-1"><a class="header-anchor" href="#source-map"><span>source map</span></a></h1><p>由于打包后的代码通常难以阅读和调试，我们可以通过 source map 来构建源代码和打包后代码间的联系。</p><p>在 webpack 中加入配置启用 source map：</p><div class="language-javascript" data-ext="js" data-title="js"><pre class="language-javascript"><code>module<span class="token punctuation">.</span>exports <span class="token operator">=</span> <span class="token punctuation">{</span>
  <span class="token literal-property property">devtool</span><span class="token operator">:</span> <span class="token string">&#39;source-map&#39;</span>
<span class="token punctuation">}</span>
</code></pre></div><p>可以看到打包后 dist 目录多出一个 main.js.map 文件，里面存储的是代码映射的内容。</p><div class="language-json" data-ext="json" data-title="json"><pre class="language-json"><code><span class="token punctuation">{</span>
  <span class="token property">&quot;version&quot;</span><span class="token operator">:</span> <span class="token number">3</span><span class="token punctuation">,</span>
  <span class="token property">&quot;file&quot;</span><span class="token operator">:</span> <span class="token string">&quot;main.js&quot;</span><span class="token punctuation">,</span>
  <span class="token property">&quot;mappings&quot;</span><span class="token operator">:</span> <span class="token string">&quot;;;;;;;;;;;;AAAA,iEAAe;;;;;UCAf;...&quot;</span><span class="token punctuation">,</span>
  <span class="token property">&quot;sources&quot;</span><span class="token operator">:</span> <span class="token punctuation">[</span>
    <span class="token string">&quot;webpack://usewebpack/./src/test.md&quot;</span><span class="token punctuation">,</span>
    <span class="token string">&quot;webpack://usewebpack/webpack/bootstrap&quot;</span><span class="token punctuation">,</span>
    <span class="token string">&quot;...&quot;</span><span class="token punctuation">,</span>
    <span class="token string">&quot;webpack://usewebpack/./src/index.js&quot;</span>
  <span class="token punctuation">]</span><span class="token punctuation">,</span>
  <span class="token property">&quot;sourcesContent&quot;</span><span class="token operator">:</span> <span class="token punctuation">[</span>
    <span class="token string">&quot;export default \\&quot;&lt;h1 id=\\\\\\&quot;title1\\\\\\&quot;&gt;title1&lt;/h1&gt;\\\\n&lt;h2 id=\\\\\\&quot;title2\\\\\\&quot;&gt;title2&lt;/h2&gt;\\\\n\\&quot;&quot;</span><span class="token punctuation">,</span>
    <span class="token string">&quot;// The module cache\\nvar __webpack_module_cache__ = {};\\n\\n// The require function\\nfunction __webpack_require__(moduleId) ...&quot;</span><span class="token punctuation">,</span>
    <span class="token string">&quot;...&quot;</span>
  <span class="token punctuation">]</span><span class="token punctuation">,</span>
  <span class="token property">&quot;names&quot;</span><span class="token operator">:</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">,</span>
  <span class="token property">&quot;sourceRoot&quot;</span><span class="token operator">:</span> <span class="token string">&quot;&quot;</span>
<span class="token punctuation">}</span>
</code></pre></div><p>在 main.js 中，最后一行也通过注释的方式指定了 source map 的地址。</p><div class="language-javascript" data-ext="js" data-title="js"><pre class="language-javascript"><code><span class="token comment">/* bundle content */</span>
<span class="token comment">//# sourceMappingURL=main.js.map</span>
</code></pre></div><p>有了 soure map 的地址，浏览器的开发者工具就可以知道当前运行的代码和源代码的对应关系。</p>`,9),u={href:"https://webpack.docschina.org/configuration/devtool/#devtool",target:"_blank",rel:"noopener noreferrer"},d=n(`<table><thead><tr><th style="text-align:left;">devtool</th><th style="text-align:left;">performance</th><th style="text-align:left;">production</th><th style="text-align:left;">quality</th><th style="text-align:left;">comment</th></tr></thead><tbody><tr><td style="text-align:left;">(none)</td><td style="text-align:left;"><strong>build</strong>: fastest <strong>rebuild</strong>: fastest</td><td style="text-align:left;">yes</td><td style="text-align:left;">bundle</td><td style="text-align:left;">Recommended choice for production builds with maximum performance.</td></tr><tr><td style="text-align:left;"><strong><code>eval</code></strong></td><td style="text-align:left;"><strong>build</strong>: fast <strong>rebuild</strong>: fastest</td><td style="text-align:left;">no</td><td style="text-align:left;">generated</td><td style="text-align:left;">Recommended choice for development builds with maximum performance.</td></tr><tr><td style="text-align:left;"><code>eval-cheap-source-map</code></td><td style="text-align:left;"><strong>build</strong>: ok <strong>rebuild</strong>: fast</td><td style="text-align:left;">no</td><td style="text-align:left;">transformed</td><td style="text-align:left;">Tradeoff choice for development builds.</td></tr><tr><td style="text-align:left;"><code>eval-cheap-module-source-map</code></td><td style="text-align:left;"><strong>build</strong>: slow <strong>rebuild</strong>: fast</td><td style="text-align:left;">no</td><td style="text-align:left;">original lines</td><td style="text-align:left;">Tradeoff choice for development builds.</td></tr><tr><td style="text-align:left;">...</td><td style="text-align:left;">...</td><td style="text-align:left;">...</td><td style="text-align:left;">...</td><td style="text-align:left;">...</td></tr></tbody></table><p>其实，这二十多种模式是由 <code>eval,cheap,module,inline...</code> 等几个关键字组合而来的。</p><p>下面介绍这些关键字代表的含义。</p><ul><li><p>eval</p><p>eval 模式下，webpack 会将各个模块代码用 <code>eval()</code> 包裹起来，并在最后添加 <code>sourceURL</code> 标注当前代码对应的源文件地址。</p><p>eval 模式的打包结果：</p><div class="language-javascript" data-ext="js" data-title="js"><pre class="language-javascript"><code><span class="token function">eval</span><span class="token punctuation">(</span><span class="token string">&quot;__webpack_require__.r(__webpack_exports__);\\n/* harmony import */ var _test_md__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(1);\\n\\n\\n\\n//# sourceURL=webpack://usewebpack/./src/index.js?&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre></div><p>事实上，eval 模式并没有真正生成 source map 文件，调试时也只能定位到发生错误的文件。</p><p>webpack 还有一个 eval-source-map 模式，这个模式同样是用 eval 函数包裹代码并标注 sourceURL，但不同的是，这个模式生成了 source map 文件，这使得客户端可以定位到错误具体的行和列。</p><p>eval-source-map 模式的打包结果：</p><div class="language-javascript" data-ext="js" data-title="js"><pre class="language-javascript"><code><span class="token function">eval</span><span class="token punctuation">(</span><span class="token string">&quot;__webpack_require__.r(__webpack_exports__);\\n/* harmony import */ var _test_md__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(1);\\n\\n//# sourceURL=[module]\\n//# sourceURL=webpack-internal:///0\\n&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre></div><p>可以看出，含有 eval 关键字的 source map 模式，都是用 eval 函数将代码包裹并指定 sourceURL。</p></li><li><p>cheap：含有 cheap 关键字的 source map 模式只能定位到行而不能定位到列。</p></li><li><p>module：包含 module 的模式会保留原来 es6 的代码。</p></li><li><p>inline：将 source map 转换为 DataUrl 后添加到 bundle 中。</p></li><li><p>nosource：生成source map 文件但不包含源文件内容，可以看做一种代码保护。</p></li></ul><p>关键字组合模式： <code>[inline-|hidden-|eval-][nosources-][cheap-[module-]]source-map</code>。</p>`,5),m={href:"https://webpack.docschina.org/configuration/devtool/#qualities",target:"_blank",rel:"noopener noreferrer"},g=e("p",null,[t("综合以上特点，建议开发模式下选择 "),e("code",null,"eval-cheap-module-source-map"),t("，生产环境选择 "),e("code",null,"none"),t(" 或 "),e("code",null,"nosources-source-map"),t("。")],-1);function k(_,f){const a=p("ExternalLinkIcon");return l(),c("div",null,[i,e("p",null,[t("source map 有 26 个可选模式，它们各有特点，下表截取了部分模式的对比，具体看"),e("a",u,[t("文档"),s(a)]),t("。")]),d,e("p",null,[t("关于其他关键字的内容参考"),e("a",m,[t("文档"),s(a)]),t("。")]),g])}const b=o(r,[["render",k],["__file","12.sourcemap.html.vue"]]),q=JSON.parse('{"path":"/%E5%B7%A5%E7%A8%8B%E6%9E%B6%E6%9E%84/webpack/12.sourcemap.html","title":"source map","lang":"zh-CN","frontmatter":{"description":"source map 由于打包后的代码通常难以阅读和调试，我们可以通过 source map 来构建源代码和打包后代码间的联系。 在 webpack 中加入配置启用 source map： 可以看到打包后 dist 目录多出一个 main.js.map 文件，里面存储的是代码映射的内容。 在 main.js 中，最后一行也通过注释的方式指定了 sour...","head":[["meta",{"property":"og:url","content":"https://yamsfeer.github.io/notes-fe/%E5%B7%A5%E7%A8%8B%E6%9E%B6%E6%9E%84/webpack/12.sourcemap.html"}],["meta",{"property":"og:site_name","content":"yamsfeer"}],["meta",{"property":"og:title","content":"source map"}],["meta",{"property":"og:description","content":"source map 由于打包后的代码通常难以阅读和调试，我们可以通过 source map 来构建源代码和打包后代码间的联系。 在 webpack 中加入配置启用 source map： 可以看到打包后 dist 目录多出一个 main.js.map 文件，里面存储的是代码映射的内容。 在 main.js 中，最后一行也通过注释的方式指定了 sour..."}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:locale","content":"zh-CN"}],["meta",{"property":"og:updated_time","content":"2024-04-12T16:21:32.000Z"}],["meta",{"property":"article:modified_time","content":"2024-04-12T16:21:32.000Z"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"source map\\",\\"image\\":[\\"\\"],\\"dateModified\\":\\"2024-04-12T16:21:32.000Z\\",\\"author\\":[]}"]]},"headers":[],"git":{"createdTime":1712938892000,"updatedTime":1712938892000,"contributors":[{"name":"yamsfeer","email":"feer.yams@gmail.com","commits":1}]},"readingTime":{"minutes":2.42,"words":726},"filePathRelative":"工程架构/webpack/12.sourcemap.md","localizedDate":"2024年4月12日","autoDesc":true}');export{b as comp,q as data};
