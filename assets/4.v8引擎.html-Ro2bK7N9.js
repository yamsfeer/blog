import{_ as i}from"./plugin-vue_export-helper-DlAUqK2U.js";import{r,o,c as s,b as e,d as n,e as a,a as p}from"./app-BPFsuHku.js";const c={},l=p('<h1 id="execution-pipeline" tabindex="-1"><a class="header-anchor" href="#execution-pipeline"><span>Execution Pipeline</span></a></h1><p><img src="https://raw.githubusercontent.com/yamsfeer/pic-bed/master/js-engine-pipeline.svg" alt="img"></p><h2 id="parser" tabindex="-1"><a class="header-anchor" href="#parser"><span>Parser</span></a></h2><p>paser 可以将 JavaScript 文本解析成 AST。</p><h2 id="ignition" tabindex="-1"><a class="header-anchor" href="#ignition"><span>Ignition</span></a></h2><p>JavaScript 代码解析成 AST 后，Ignition 解释器会将其转化为字节码并执行。</p><p>字节码是机器代码的抽象。</p><p>如果字节码采用和物理 CPU 相同的计算模型进行设计，则将字节码编译为机器代码更容易。这就是为什么解释器 ( interpreter ) 常常是基于寄存器或堆栈的。</p><p><strong>Ignition 是具有累加器的寄存器虚拟机</strong>。</p><h2 id="turbofan" tabindex="-1"><a class="header-anchor" href="#turbofan"><span>Turbofan</span></a></h2><p>Ignition 执行字节码时，如果检测到频繁使用的函数，Turbofan 会将这些函数编译成二进制代码。如果函数的类型发生变化，则需要对已编译的代码进行去优化，变回字节码，</p><p>这个过程称为 JIT ( Just-in-Time, 即时编译 )，JIT 结合了解释和编译两种执行方式。</p><h2 id="参考" tabindex="-1"><a class="header-anchor" href="#参考"><span>参考</span></a></h2>',13),h={href:"https://dev.to/lydiahallie/javascript-visualized-the-javascript-engine-4cdf",target:"_blank",rel:"noopener noreferrer"},d={href:"https://zhuanlan.zhihu.com/p/28590489",target:"_blank",rel:"noopener noreferrer"},m={href:"https://benediktmeurer.de/2017/12/13/an-introduction-to-speculative-optimization-in-v8/",target:"_blank",rel:"noopener noreferrer"},g={href:"https://www.bilibili.com/video/BV1cD4y1s7S1",target:"_blank",rel:"noopener noreferrer"},u={href:"https://mathiasbynens.be/notes/shapes-ics",target:"_blank",rel:"noopener noreferrer"},f={href:"https://v8.dev/docs/hidden-classes",target:"_blank",rel:"noopener noreferrer"};function _(v,b){const t=r("ExternalLinkIcon");return o(),s("div",null,[l,e("p",null,[e("a",h,[n("JavaScript Visualized: the JavaScript Engine"),a(t)])]),e("p",null,[e("a",d,[n("理解 V8 的字节码「译」"),a(t)])]),e("p",null,[e("a",m,[n("An Introduction to Speculative Optimization in V8"),a(t)])]),e("p",null,[e("a",g,[n("JavaScript 性能优化"),a(t)])]),e("p",null,[e("a",u,[n("JavaScript engine fundamentals: Shapes and Inline Caches"),a(t)])]),e("p",null,[e("a",f,[n("hidden classes - v8.dev"),a(t)])])])}const S=i(c,[["render",_],["__file","4.v8引擎.html.vue"]]),x=JSON.parse('{"path":"/%E6%B5%8F%E8%A7%88%E5%99%A8/chrome/4.v8%E5%BC%95%E6%93%8E.html","title":"Execution Pipeline","lang":"zh-CN","frontmatter":{"description":"Execution Pipeline img Parser paser 可以将 JavaScript 文本解析成 AST。 Ignition JavaScript 代码解析成 AST 后，Ignition 解释器会将其转化为字节码并执行。 字节码是机器代码的抽象。 如果字节码采用和物理 CPU 相同的计算模型进行设计，则将字节码编译为机器代码更容易。这...","head":[["meta",{"property":"og:url","content":"https://yamsfeer.github.io/notes-fe/%E6%B5%8F%E8%A7%88%E5%99%A8/chrome/4.v8%E5%BC%95%E6%93%8E.html"}],["meta",{"property":"og:site_name","content":"yamsfeer"}],["meta",{"property":"og:title","content":"Execution Pipeline"}],["meta",{"property":"og:description","content":"Execution Pipeline img Parser paser 可以将 JavaScript 文本解析成 AST。 Ignition JavaScript 代码解析成 AST 后，Ignition 解释器会将其转化为字节码并执行。 字节码是机器代码的抽象。 如果字节码采用和物理 CPU 相同的计算模型进行设计，则将字节码编译为机器代码更容易。这..."}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:image","content":"https://raw.githubusercontent.com/yamsfeer/pic-bed/master/js-engine-pipeline.svg"}],["meta",{"property":"og:locale","content":"zh-CN"}],["meta",{"property":"og:updated_time","content":"2024-04-12T16:21:32.000Z"}],["meta",{"property":"article:modified_time","content":"2024-04-12T16:21:32.000Z"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"Execution Pipeline\\",\\"image\\":[\\"https://raw.githubusercontent.com/yamsfeer/pic-bed/master/js-engine-pipeline.svg\\"],\\"dateModified\\":\\"2024-04-12T16:21:32.000Z\\",\\"author\\":[]}"]]},"headers":[{"level":2,"title":"Parser","slug":"parser","link":"#parser","children":[]},{"level":2,"title":"Ignition","slug":"ignition","link":"#ignition","children":[]},{"level":2,"title":"Turbofan","slug":"turbofan","link":"#turbofan","children":[]},{"level":2,"title":"参考","slug":"参考","link":"#参考","children":[]}],"git":{"createdTime":1712938892000,"updatedTime":1712938892000,"contributors":[{"name":"yamsfeer","email":"feer.yams@gmail.com","commits":1}]},"readingTime":{"minutes":0.95,"words":286},"filePathRelative":"浏览器/chrome/4.v8引擎.md","localizedDate":"2024年4月12日","autoDesc":true}');export{S as comp,x as data};
